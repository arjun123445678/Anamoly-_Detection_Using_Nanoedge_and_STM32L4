
temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08007974  08007974  00008974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a58  08007a58  000090a4  2**0
                  CONTENTS
  4 .ARM          00000008  08007a58  08007a58  00008a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a60  08007a60  000090a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a60  08007a60  00008a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a64  08007a64  00008a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007a68  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .neai         00000034  20000070  08007ad8  00009070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000097c  200000a4  08007b0c  000090a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a20  08007b0c  00009a20  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000198fc  00000000  00000000  000090d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003474  00000000  00000000  000229d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001758  00000000  00000000  00025e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000120a  00000000  00000000  000275a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028f30  00000000  00000000  000287aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cc11  00000000  00000000  000516da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5c27  00000000  00000000  0006e2eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000087  00000000  00000000  00163f12  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006acc  00000000  00000000  00163f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0016aa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800795c 	.word	0x0800795c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	0800795c 	.word	0x0800795c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__gedf2>:
 800084c:	f04f 3cff 	mov.w	ip, #4294967295
 8000850:	e006      	b.n	8000860 <__cmpdf2+0x4>
 8000852:	bf00      	nop

08000854 <__ledf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	e002      	b.n	8000860 <__cmpdf2+0x4>
 800085a:	bf00      	nop

0800085c <__cmpdf2>:
 800085c:	f04f 0c01 	mov.w	ip, #1
 8000860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800086c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000876:	d01b      	beq.n	80008b0 <__cmpdf2+0x54>
 8000878:	b001      	add	sp, #4
 800087a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800087e:	bf0c      	ite	eq
 8000880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000884:	ea91 0f03 	teqne	r1, r3
 8000888:	bf02      	ittt	eq
 800088a:	ea90 0f02 	teqeq	r0, r2
 800088e:	2000      	moveq	r0, #0
 8000890:	4770      	bxeq	lr
 8000892:	f110 0f00 	cmn.w	r0, #0
 8000896:	ea91 0f03 	teq	r1, r3
 800089a:	bf58      	it	pl
 800089c:	4299      	cmppl	r1, r3
 800089e:	bf08      	it	eq
 80008a0:	4290      	cmpeq	r0, r2
 80008a2:	bf2c      	ite	cs
 80008a4:	17d8      	asrcs	r0, r3, #31
 80008a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d102      	bne.n	80008c0 <__cmpdf2+0x64>
 80008ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008be:	d107      	bne.n	80008d0 <__cmpdf2+0x74>
 80008c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d1d6      	bne.n	8000878 <__cmpdf2+0x1c>
 80008ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ce:	d0d3      	beq.n	8000878 <__cmpdf2+0x1c>
 80008d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdrcmple>:
 80008d8:	4684      	mov	ip, r0
 80008da:	4610      	mov	r0, r2
 80008dc:	4662      	mov	r2, ip
 80008de:	468c      	mov	ip, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4663      	mov	r3, ip
 80008e4:	e000      	b.n	80008e8 <__aeabi_cdcmpeq>
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdcmpeq>:
 80008e8:	b501      	push	{r0, lr}
 80008ea:	f7ff ffb7 	bl	800085c <__cmpdf2>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf48      	it	mi
 80008f2:	f110 0f00 	cmnmi.w	r0, #0
 80008f6:	bd01      	pop	{r0, pc}

080008f8 <__aeabi_dcmpeq>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff fff4 	bl	80008e8 <__aeabi_cdcmpeq>
 8000900:	bf0c      	ite	eq
 8000902:	2001      	moveq	r0, #1
 8000904:	2000      	movne	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_dcmplt>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffea 	bl	80008e8 <__aeabi_cdcmpeq>
 8000914:	bf34      	ite	cc
 8000916:	2001      	movcc	r0, #1
 8000918:	2000      	movcs	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_dcmple>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffe0 	bl	80008e8 <__aeabi_cdcmpeq>
 8000928:	bf94      	ite	ls
 800092a:	2001      	movls	r0, #1
 800092c:	2000      	movhi	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <__aeabi_dcmpge>:
 8000934:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000938:	f7ff ffce 	bl	80008d8 <__aeabi_cdrcmple>
 800093c:	bf94      	ite	ls
 800093e:	2001      	movls	r0, #1
 8000940:	2000      	movhi	r0, #0
 8000942:	f85d fb08 	ldr.w	pc, [sp], #8
 8000946:	bf00      	nop

08000948 <__aeabi_dcmpgt>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff ffc4 	bl	80008d8 <__aeabi_cdrcmple>
 8000950:	bf34      	ite	cc
 8000952:	2001      	movcc	r0, #1
 8000954:	2000      	movcs	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_uldivmod>:
 80009fc:	b953      	cbnz	r3, 8000a14 <__aeabi_uldivmod+0x18>
 80009fe:	b94a      	cbnz	r2, 8000a14 <__aeabi_uldivmod+0x18>
 8000a00:	2900      	cmp	r1, #0
 8000a02:	bf08      	it	eq
 8000a04:	2800      	cmpeq	r0, #0
 8000a06:	bf1c      	itt	ne
 8000a08:	f04f 31ff 	movne.w	r1, #4294967295
 8000a0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a10:	f000 b96a 	b.w	8000ce8 <__aeabi_idiv0>
 8000a14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a1c:	f000 f806 	bl	8000a2c <__udivmoddi4>
 8000a20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a28:	b004      	add	sp, #16
 8000a2a:	4770      	bx	lr

08000a2c <__udivmoddi4>:
 8000a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a30:	9d08      	ldr	r5, [sp, #32]
 8000a32:	460c      	mov	r4, r1
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d14e      	bne.n	8000ad6 <__udivmoddi4+0xaa>
 8000a38:	4694      	mov	ip, r2
 8000a3a:	458c      	cmp	ip, r1
 8000a3c:	4686      	mov	lr, r0
 8000a3e:	fab2 f282 	clz	r2, r2
 8000a42:	d962      	bls.n	8000b0a <__udivmoddi4+0xde>
 8000a44:	b14a      	cbz	r2, 8000a5a <__udivmoddi4+0x2e>
 8000a46:	f1c2 0320 	rsb	r3, r2, #32
 8000a4a:	4091      	lsls	r1, r2
 8000a4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a54:	4319      	orrs	r1, r3
 8000a56:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5e:	fa1f f68c 	uxth.w	r6, ip
 8000a62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a72:	fb04 f106 	mul.w	r1, r4, r6
 8000a76:	4299      	cmp	r1, r3
 8000a78:	d90a      	bls.n	8000a90 <__udivmoddi4+0x64>
 8000a7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a82:	f080 8112 	bcs.w	8000caa <__udivmoddi4+0x27e>
 8000a86:	4299      	cmp	r1, r3
 8000a88:	f240 810f 	bls.w	8000caa <__udivmoddi4+0x27e>
 8000a8c:	3c02      	subs	r4, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	1a59      	subs	r1, r3, r1
 8000a92:	fa1f f38e 	uxth.w	r3, lr
 8000a96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aa2:	fb00 f606 	mul.w	r6, r0, r6
 8000aa6:	429e      	cmp	r6, r3
 8000aa8:	d90a      	bls.n	8000ac0 <__udivmoddi4+0x94>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ab2:	f080 80fc 	bcs.w	8000cae <__udivmoddi4+0x282>
 8000ab6:	429e      	cmp	r6, r3
 8000ab8:	f240 80f9 	bls.w	8000cae <__udivmoddi4+0x282>
 8000abc:	4463      	add	r3, ip
 8000abe:	3802      	subs	r0, #2
 8000ac0:	1b9b      	subs	r3, r3, r6
 8000ac2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	b11d      	cbz	r5, 8000ad2 <__udivmoddi4+0xa6>
 8000aca:	40d3      	lsrs	r3, r2
 8000acc:	2200      	movs	r2, #0
 8000ace:	e9c5 3200 	strd	r3, r2, [r5]
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d905      	bls.n	8000ae6 <__udivmoddi4+0xba>
 8000ada:	b10d      	cbz	r5, 8000ae0 <__udivmoddi4+0xb4>
 8000adc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4608      	mov	r0, r1
 8000ae4:	e7f5      	b.n	8000ad2 <__udivmoddi4+0xa6>
 8000ae6:	fab3 f183 	clz	r1, r3
 8000aea:	2900      	cmp	r1, #0
 8000aec:	d146      	bne.n	8000b7c <__udivmoddi4+0x150>
 8000aee:	42a3      	cmp	r3, r4
 8000af0:	d302      	bcc.n	8000af8 <__udivmoddi4+0xcc>
 8000af2:	4290      	cmp	r0, r2
 8000af4:	f0c0 80f0 	bcc.w	8000cd8 <__udivmoddi4+0x2ac>
 8000af8:	1a86      	subs	r6, r0, r2
 8000afa:	eb64 0303 	sbc.w	r3, r4, r3
 8000afe:	2001      	movs	r0, #1
 8000b00:	2d00      	cmp	r5, #0
 8000b02:	d0e6      	beq.n	8000ad2 <__udivmoddi4+0xa6>
 8000b04:	e9c5 6300 	strd	r6, r3, [r5]
 8000b08:	e7e3      	b.n	8000ad2 <__udivmoddi4+0xa6>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	f040 8090 	bne.w	8000c30 <__udivmoddi4+0x204>
 8000b10:	eba1 040c 	sub.w	r4, r1, ip
 8000b14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b18:	fa1f f78c 	uxth.w	r7, ip
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b26:	fb08 4416 	mls	r4, r8, r6, r4
 8000b2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b2e:	fb07 f006 	mul.w	r0, r7, r6
 8000b32:	4298      	cmp	r0, r3
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x11c>
 8000b36:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x11a>
 8000b40:	4298      	cmp	r0, r3
 8000b42:	f200 80cd 	bhi.w	8000ce0 <__udivmoddi4+0x2b4>
 8000b46:	4626      	mov	r6, r4
 8000b48:	1a1c      	subs	r4, r3, r0
 8000b4a:	fa1f f38e 	uxth.w	r3, lr
 8000b4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b52:	fb08 4410 	mls	r4, r8, r0, r4
 8000b56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b5a:	fb00 f707 	mul.w	r7, r0, r7
 8000b5e:	429f      	cmp	r7, r3
 8000b60:	d908      	bls.n	8000b74 <__udivmoddi4+0x148>
 8000b62:	eb1c 0303 	adds.w	r3, ip, r3
 8000b66:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b6a:	d202      	bcs.n	8000b72 <__udivmoddi4+0x146>
 8000b6c:	429f      	cmp	r7, r3
 8000b6e:	f200 80b0 	bhi.w	8000cd2 <__udivmoddi4+0x2a6>
 8000b72:	4620      	mov	r0, r4
 8000b74:	1bdb      	subs	r3, r3, r7
 8000b76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7a:	e7a5      	b.n	8000ac8 <__udivmoddi4+0x9c>
 8000b7c:	f1c1 0620 	rsb	r6, r1, #32
 8000b80:	408b      	lsls	r3, r1
 8000b82:	fa22 f706 	lsr.w	r7, r2, r6
 8000b86:	431f      	orrs	r7, r3
 8000b88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000b90:	ea43 030c 	orr.w	r3, r3, ip
 8000b94:	40f4      	lsrs	r4, r6
 8000b96:	fa00 f801 	lsl.w	r8, r0, r1
 8000b9a:	0c38      	lsrs	r0, r7, #16
 8000b9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ba4:	fa1f fc87 	uxth.w	ip, r7
 8000ba8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb0:	fb0e f90c 	mul.w	r9, lr, ip
 8000bb4:	45a1      	cmp	r9, r4
 8000bb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000bba:	d90a      	bls.n	8000bd2 <__udivmoddi4+0x1a6>
 8000bbc:	193c      	adds	r4, r7, r4
 8000bbe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bc2:	f080 8084 	bcs.w	8000cce <__udivmoddi4+0x2a2>
 8000bc6:	45a1      	cmp	r9, r4
 8000bc8:	f240 8081 	bls.w	8000cce <__udivmoddi4+0x2a2>
 8000bcc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd0:	443c      	add	r4, r7
 8000bd2:	eba4 0409 	sub.w	r4, r4, r9
 8000bd6:	fa1f f983 	uxth.w	r9, r3
 8000bda:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bde:	fb00 4413 	mls	r4, r0, r3, r4
 8000be2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000be6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bea:	45a4      	cmp	ip, r4
 8000bec:	d907      	bls.n	8000bfe <__udivmoddi4+0x1d2>
 8000bee:	193c      	adds	r4, r7, r4
 8000bf0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bf4:	d267      	bcs.n	8000cc6 <__udivmoddi4+0x29a>
 8000bf6:	45a4      	cmp	ip, r4
 8000bf8:	d965      	bls.n	8000cc6 <__udivmoddi4+0x29a>
 8000bfa:	3b02      	subs	r3, #2
 8000bfc:	443c      	add	r4, r7
 8000bfe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c02:	fba0 9302 	umull	r9, r3, r0, r2
 8000c06:	eba4 040c 	sub.w	r4, r4, ip
 8000c0a:	429c      	cmp	r4, r3
 8000c0c:	46ce      	mov	lr, r9
 8000c0e:	469c      	mov	ip, r3
 8000c10:	d351      	bcc.n	8000cb6 <__udivmoddi4+0x28a>
 8000c12:	d04e      	beq.n	8000cb2 <__udivmoddi4+0x286>
 8000c14:	b155      	cbz	r5, 8000c2c <__udivmoddi4+0x200>
 8000c16:	ebb8 030e 	subs.w	r3, r8, lr
 8000c1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c22:	40cb      	lsrs	r3, r1
 8000c24:	431e      	orrs	r6, r3
 8000c26:	40cc      	lsrs	r4, r1
 8000c28:	e9c5 6400 	strd	r6, r4, [r5]
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	e750      	b.n	8000ad2 <__udivmoddi4+0xa6>
 8000c30:	f1c2 0320 	rsb	r3, r2, #32
 8000c34:	fa20 f103 	lsr.w	r1, r0, r3
 8000c38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c40:	4094      	lsls	r4, r2
 8000c42:	430c      	orrs	r4, r1
 8000c44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c4c:	fa1f f78c 	uxth.w	r7, ip
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3110 	mls	r1, r8, r0, r3
 8000c58:	0c23      	lsrs	r3, r4, #16
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f107 	mul.w	r1, r0, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x24c>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c6e:	d22c      	bcs.n	8000cca <__udivmoddi4+0x29e>
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d92a      	bls.n	8000cca <__udivmoddi4+0x29e>
 8000c74:	3802      	subs	r0, #2
 8000c76:	4463      	add	r3, ip
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c80:	fb08 3311 	mls	r3, r8, r1, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb01 f307 	mul.w	r3, r1, r7
 8000c8c:	42a3      	cmp	r3, r4
 8000c8e:	d908      	bls.n	8000ca2 <__udivmoddi4+0x276>
 8000c90:	eb1c 0404 	adds.w	r4, ip, r4
 8000c94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c98:	d213      	bcs.n	8000cc2 <__udivmoddi4+0x296>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d911      	bls.n	8000cc2 <__udivmoddi4+0x296>
 8000c9e:	3902      	subs	r1, #2
 8000ca0:	4464      	add	r4, ip
 8000ca2:	1ae4      	subs	r4, r4, r3
 8000ca4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ca8:	e739      	b.n	8000b1e <__udivmoddi4+0xf2>
 8000caa:	4604      	mov	r4, r0
 8000cac:	e6f0      	b.n	8000a90 <__udivmoddi4+0x64>
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e706      	b.n	8000ac0 <__udivmoddi4+0x94>
 8000cb2:	45c8      	cmp	r8, r9
 8000cb4:	d2ae      	bcs.n	8000c14 <__udivmoddi4+0x1e8>
 8000cb6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cbe:	3801      	subs	r0, #1
 8000cc0:	e7a8      	b.n	8000c14 <__udivmoddi4+0x1e8>
 8000cc2:	4631      	mov	r1, r6
 8000cc4:	e7ed      	b.n	8000ca2 <__udivmoddi4+0x276>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	e799      	b.n	8000bfe <__udivmoddi4+0x1d2>
 8000cca:	4630      	mov	r0, r6
 8000ccc:	e7d4      	b.n	8000c78 <__udivmoddi4+0x24c>
 8000cce:	46d6      	mov	lr, sl
 8000cd0:	e77f      	b.n	8000bd2 <__udivmoddi4+0x1a6>
 8000cd2:	4463      	add	r3, ip
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	e74d      	b.n	8000b74 <__udivmoddi4+0x148>
 8000cd8:	4606      	mov	r6, r0
 8000cda:	4623      	mov	r3, r4
 8000cdc:	4608      	mov	r0, r1
 8000cde:	e70f      	b.n	8000b00 <__udivmoddi4+0xd4>
 8000ce0:	3e02      	subs	r6, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	e730      	b.n	8000b48 <__udivmoddi4+0x11c>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_idiv0>:
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <fill_buffer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void fill_buffer(float input_buffer[])
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
    for(uint16_t i = 0; i < DATA_INPUT_USER; i++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	81fb      	strh	r3, [r7, #14]
 8000cf8:	e014      	b.n	8000d24 <fill_buffer+0x38>
    {
        temp_value = BSP_TSENSOR_ReadTemp();
 8000cfa:	f001 fa87 	bl	800220c <BSP_TSENSOR_ReadTemp>
 8000cfe:	eef0 7a40 	vmov.f32	s15, s0
 8000d02:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <fill_buffer+0x48>)
 8000d04:	edc3 7a00 	vstr	s15, [r3]
        input_buffer[i] = temp_value; // Store temperature value
 8000d08:	89fb      	ldrh	r3, [r7, #14]
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a08      	ldr	r2, [pc, #32]	@ (8000d34 <fill_buffer+0x48>)
 8000d12:	6812      	ldr	r2, [r2, #0]
 8000d14:	601a      	str	r2, [r3, #0]
        HAL_Delay(1000); // Delay for 1 second between readings
 8000d16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d1a:	f001 fbad 	bl	8002478 <HAL_Delay>
    for(uint16_t i = 0; i < DATA_INPUT_USER; i++)
 8000d1e:	89fb      	ldrh	r3, [r7, #14]
 8000d20:	3301      	adds	r3, #1
 8000d22:	81fb      	strh	r3, [r7, #14]
 8000d24:	89fb      	ldrh	r3, [r7, #14]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0e7      	beq.n	8000cfa <fill_buffer+0xe>
    }
}
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000844 	.word	0x20000844

08000d38 <lcd_send_cmd>:
void lcd_send_cmd (char cmd)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af02      	add	r7, sp, #8
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
  data_u = (cmd&0xf0);
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f023 030f 	bic.w	r3, r3, #15
 8000d48:	73fb      	strb	r3, [r7, #15]
  data_l = ((cmd<<4)&0xf0);
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	011b      	lsls	r3, r3, #4
 8000d4e:	73bb      	strb	r3, [r7, #14]
  uint8_t data_t[4];
   data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	f043 030c 	orr.w	r3, r3, #12
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	723b      	strb	r3, [r7, #8]
   data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	727b      	strb	r3, [r7, #9]

 	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000d64:	7bbb      	ldrb	r3, [r7, #14]
 8000d66:	f043 030c 	orr.w	r3, r3, #12
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	72bb      	strb	r3, [r7, #10]
 	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000d6e:	7bbb      	ldrb	r3, [r7, #14]
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	72fb      	strb	r3, [r7, #11]
 	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d78:	f107 0208 	add.w	r2, r7, #8
 8000d7c:	2364      	movs	r3, #100	@ 0x64
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2304      	movs	r3, #4
 8000d82:	214e      	movs	r1, #78	@ 0x4e
 8000d84:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <lcd_send_cmd+0x5c>)
 8000d86:	f002 f95d 	bl	8003044 <HAL_I2C_Master_Transmit>
 }
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200000f8 	.word	0x200000f8

08000d98 <lcd_send_data>:
void lcd_send_data (char data)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af02      	add	r7, sp, #8
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f023 030f 	bic.w	r3, r3, #15
 8000da8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	011b      	lsls	r3, r3, #4
 8000dae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 -> bxxxx1101
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	f043 030d 	orr.w	r3, r3, #13
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 -> bxxxx1001
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	f043 0309 	orr.w	r3, r3, #9
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 -> bxxxx1101
 8000dc4:	7bbb      	ldrb	r3, [r7, #14]
 8000dc6:	f043 030d 	orr.w	r3, r3, #13
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 -> bxxxx1001
 8000dce:	7bbb      	ldrb	r3, [r7, #14]
 8000dd0:	f043 0309 	orr.w	r3, r3, #9
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000dd8:	f107 0208 	add.w	r2, r7, #8
 8000ddc:	2364      	movs	r3, #100	@ 0x64
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2304      	movs	r3, #4
 8000de2:	214e      	movs	r1, #78	@ 0x4e
 8000de4:	4803      	ldr	r0, [pc, #12]	@ (8000df4 <lcd_send_data+0x5c>)
 8000de6:	f002 f92d 	bl	8003044 <HAL_I2C_Master_Transmit>
}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200000f8 	.word	0x200000f8

08000df8 <lcd_init>:
void lcd_init (void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  // 4 bit initialisation
  HAL_Delay(50);  // wait for >40ms
 8000dfc:	2032      	movs	r0, #50	@ 0x32
 8000dfe:	f001 fb3b 	bl	8002478 <HAL_Delay>
  lcd_send_cmd (0x30);
 8000e02:	2030      	movs	r0, #48	@ 0x30
 8000e04:	f7ff ff98 	bl	8000d38 <lcd_send_cmd>
  HAL_Delay(5);  // wait for >4.1ms
 8000e08:	2005      	movs	r0, #5
 8000e0a:	f001 fb35 	bl	8002478 <HAL_Delay>
  lcd_send_cmd (0x30);
 8000e0e:	2030      	movs	r0, #48	@ 0x30
 8000e10:	f7ff ff92 	bl	8000d38 <lcd_send_cmd>
  HAL_Delay(1);  // wait for >100us
 8000e14:	2001      	movs	r0, #1
 8000e16:	f001 fb2f 	bl	8002478 <HAL_Delay>
  lcd_send_cmd (0x30);
 8000e1a:	2030      	movs	r0, #48	@ 0x30
 8000e1c:	f7ff ff8c 	bl	8000d38 <lcd_send_cmd>
  HAL_Delay(10);
 8000e20:	200a      	movs	r0, #10
 8000e22:	f001 fb29 	bl	8002478 <HAL_Delay>
  lcd_send_cmd (0x20);  // 4bit mode
 8000e26:	2020      	movs	r0, #32
 8000e28:	f7ff ff86 	bl	8000d38 <lcd_send_cmd>
  HAL_Delay(10);
 8000e2c:	200a      	movs	r0, #10
 8000e2e:	f001 fb23 	bl	8002478 <HAL_Delay>

  // display initialisation
  lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000e32:	2028      	movs	r0, #40	@ 0x28
 8000e34:	f7ff ff80 	bl	8000d38 <lcd_send_cmd>
  HAL_Delay(1);
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f001 fb1d 	bl	8002478 <HAL_Delay>
  lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000e3e:	2008      	movs	r0, #8
 8000e40:	f7ff ff7a 	bl	8000d38 <lcd_send_cmd>
  HAL_Delay(1);
 8000e44:	2001      	movs	r0, #1
 8000e46:	f001 fb17 	bl	8002478 <HAL_Delay>
  lcd_send_cmd (0x01);  // clear display
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f7ff ff74 	bl	8000d38 <lcd_send_cmd>
  HAL_Delay(2);
 8000e50:	2002      	movs	r0, #2
 8000e52:	f001 fb11 	bl	8002478 <HAL_Delay>
  lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000e56:	2006      	movs	r0, #6
 8000e58:	f7ff ff6e 	bl	8000d38 <lcd_send_cmd>
  HAL_Delay(1);
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f001 fb0b 	bl	8002478 <HAL_Delay>
  lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000e62:	200c      	movs	r0, #12
 8000e64:	f7ff ff68 	bl	8000d38 <lcd_send_cmd>
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <lcd_send_string>:
void lcd_send_string (char *str)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  while (*str) lcd_send_data (*str++);
 8000e74:	e006      	b.n	8000e84 <lcd_send_string+0x18>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	1c5a      	adds	r2, r3, #1
 8000e7a:	607a      	str	r2, [r7, #4]
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff8a 	bl	8000d98 <lcd_send_data>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1f4      	bne.n	8000e76 <lcd_send_string+0xa>
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <lcd_put_cur>:
void lcd_put_cur(int row, int col)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
    switch (row)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <lcd_put_cur+0x18>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d005      	beq.n	8000eb8 <lcd_put_cur+0x22>
 8000eac:	e009      	b.n	8000ec2 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eb4:	603b      	str	r3, [r7, #0]
            break;
 8000eb6:	e004      	b.n	8000ec2 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000ebe:	603b      	str	r3, [r7, #0]
            break;
 8000ec0:	bf00      	nop
    }
    lcd_send_cmd (col);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff36 	bl	8000d38 <lcd_send_cmd>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <lcd_clear>:
void lcd_clear(void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01); // Clear display command
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff ff2d 	bl	8000d38 <lcd_send_cmd>
    HAL_Delay(2);        // Wait for the command to complete
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f001 faca 	bl	8002478 <HAL_Delay>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08e      	sub	sp, #56	@ 0x38
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eee:	f001 fa4f 	bl	8002390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef2:	f000 f87d 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef6:	f000 fa87 	bl	8001408 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000efa:	f000 f8db 	bl	80010b4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000efe:	f000 f951 	bl	80011a4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000f02:	f000 f98f 	bl	8001224 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000f06:	f000 f9b3 	bl	8001270 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000f0a:	f000 f9ef 	bl	80012ec <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f0e:	f000 fa1d 	bl	800134c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f12:	f000 fa4b 	bl	80013ac <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000f16:	f000 f905 	bl	8001124 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000f1a:	f7ff ff6d 	bl	8000df8 <lcd_init>
   BSP_TSENSOR_Init();
 8000f1e:	f001 f959 	bl	80021d4 <BSP_TSENSOR_Init>

   // Initialize NanoEdge AI
   HAL_UART_Transmit(&huart1, (uint8_t *)"=====> Temperature sensor HTS221 initialized \r\n", strlen("=====> Temperature sensor HTS221 initialized \r\n"), 1000);
 8000f22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f26:	222f      	movs	r2, #47	@ 0x2f
 8000f28:	492a      	ldr	r1, [pc, #168]	@ (8000fd4 <main+0xec>)
 8000f2a:	482b      	ldr	r0, [pc, #172]	@ (8000fd8 <main+0xf0>)
 8000f2c:	f004 fd59 	bl	80059e2 <HAL_UART_Transmit>

      // Initialize NanoEdge AI anomaly detection library
      enum neai_state error_code;
      error_code = neai_anomalydetection_init();
 8000f30:	f005 fd70 	bl	8006a14 <neai_anomalydetection_init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
      if (error_code != NEAI_OK) {
 8000f3a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <main+0x5e>
          // Handle error (e.g., not supported board)
          Error_Handler();
 8000f42:	f000 fbf9 	bl	8001738 <Error_Handler>
      }

      // Learning phase
      for (uint16_t iteration = 0 ; iteration < LEARNING_ITERATIONS ; iteration++) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8000f4a:	e008      	b.n	8000f5e <main+0x76>
          fill_buffer(input_user_buffer); // Fill buffer with temperature readings
 8000f4c:	4823      	ldr	r0, [pc, #140]	@ (8000fdc <main+0xf4>)
 8000f4e:	f7ff fecd 	bl	8000cec <fill_buffer>
          neai_anomalydetection_learn(input_user_buffer); // Learn normal behavior
 8000f52:	4822      	ldr	r0, [pc, #136]	@ (8000fdc <main+0xf4>)
 8000f54:	f005 fdb8 	bl	8006ac8 <neai_anomalydetection_learn>
      for (uint16_t iteration = 0 ; iteration < LEARNING_ITERATIONS ; iteration++) {
 8000f58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8000f5e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000f60:	2b13      	cmp	r3, #19
 8000f62:	d9f3      	bls.n	8000f4c <main+0x64>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      fill_buffer(input_user_buffer); // Get new temperature data
 8000f64:	481d      	ldr	r0, [pc, #116]	@ (8000fdc <main+0xf4>)
 8000f66:	f7ff fec1 	bl	8000cec <fill_buffer>
      neai_anomalydetection_detect(input_user_buffer, &similarity); // Detect anomaly
 8000f6a:	491d      	ldr	r1, [pc, #116]	@ (8000fe0 <main+0xf8>)
 8000f6c:	481b      	ldr	r0, [pc, #108]	@ (8000fdc <main+0xf4>)
 8000f6e:	f005 fe9f 	bl	8006cb0 <neai_anomalydetection_detect>
      char message[50];
                 sprintf(message, "Similarity: %d%%\r\n", similarity);
 8000f72:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <main+0xf8>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	463b      	mov	r3, r7
 8000f7a:	491a      	ldr	r1, [pc, #104]	@ (8000fe4 <main+0xfc>)
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f005 ffbf 	bl	8006f00 <siprintf>
                 HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen(message), 1000);
 8000f82:	463b      	mov	r3, r7
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff f923 	bl	80001d0 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	4639      	mov	r1, r7
 8000f90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f94:	4810      	ldr	r0, [pc, #64]	@ (8000fd8 <main+0xf0>)
 8000f96:	f004 fd24 	bl	80059e2 <HAL_UART_Transmit>
                 if (similarity >= 70) {
 8000f9a:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <main+0xf8>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b45      	cmp	r3, #69	@ 0x45
 8000fa0:	d909      	bls.n	8000fb6 <main+0xce>
                     lcd_clear();  // Clear the LCD before printing new content
 8000fa2:	f7ff ff97 	bl	8000ed4 <lcd_clear>
                     lcd_put_cur(0, 0);  // Set the cursor to row 0, column 0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff ff74 	bl	8000e96 <lcd_put_cur>
                     lcd_send_string("NORMAL BEHAVIOR");
 8000fae:	480e      	ldr	r0, [pc, #56]	@ (8000fe8 <main+0x100>)
 8000fb0:	f7ff ff5c 	bl	8000e6c <lcd_send_string>
 8000fb4:	e008      	b.n	8000fc8 <main+0xe0>
                 } else {
                     lcd_clear();  // Clear the LCD before printing new content
 8000fb6:	f7ff ff8d 	bl	8000ed4 <lcd_clear>
                     lcd_put_cur(0, 0);  // Set the cursor to row 0, column 0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff ff6a 	bl	8000e96 <lcd_put_cur>
                     lcd_send_string("ANOMALY DETECTED!");
 8000fc2:	480a      	ldr	r0, [pc, #40]	@ (8000fec <main+0x104>)
 8000fc4:	f7ff ff52 	bl	8000e6c <lcd_send_string>
                 }

      HAL_Delay(2000); // Delay for 1 second before the next reading
 8000fc8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fcc:	f001 fa54 	bl	8002478 <HAL_Delay>
  {
 8000fd0:	e7c8      	b.n	8000f64 <main+0x7c>
 8000fd2:	bf00      	nop
 8000fd4:	08007974 	.word	0x08007974
 8000fd8:	20000248 	.word	0x20000248
 8000fdc:	2000083c 	.word	0x2000083c
 8000fe0:	20000840 	.word	0x20000840
 8000fe4:	080079a4 	.word	0x080079a4
 8000fe8:	080079b8 	.word	0x080079b8
 8000fec:	080079c8 	.word	0x080079c8

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b096      	sub	sp, #88	@ 0x58
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	2244      	movs	r2, #68	@ 0x44
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f005 ff9e 	bl	8006f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	463b      	mov	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001012:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001016:	f003 f805 	bl	8004024 <HAL_PWREx_ControlVoltageScaling>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001020:	f000 fb8a 	bl	8001738 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001024:	f002 ffe0 	bl	8003fe8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001028:	4b21      	ldr	r3, [pc, #132]	@ (80010b0 <SystemClock_Config+0xc0>)
 800102a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800102e:	4a20      	ldr	r2, [pc, #128]	@ (80010b0 <SystemClock_Config+0xc0>)
 8001030:	f023 0318 	bic.w	r3, r3, #24
 8001034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001038:	2314      	movs	r3, #20
 800103a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800103c:	2301      	movs	r3, #1
 800103e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001040:	2301      	movs	r3, #1
 8001042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001048:	2360      	movs	r3, #96	@ 0x60
 800104a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104c:	2302      	movs	r3, #2
 800104e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001050:	2301      	movs	r3, #1
 8001052:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001054:	2301      	movs	r3, #1
 8001056:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001058:	2328      	movs	r3, #40	@ 0x28
 800105a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800105c:	2307      	movs	r3, #7
 800105e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001060:	2302      	movs	r3, #2
 8001062:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001064:	2302      	movs	r3, #2
 8001066:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4618      	mov	r0, r3
 800106e:	f003 f8fb 	bl	8004268 <HAL_RCC_OscConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001078:	f000 fb5e 	bl	8001738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107c:	230f      	movs	r3, #15
 800107e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001080:	2303      	movs	r3, #3
 8001082:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	2104      	movs	r1, #4
 8001094:	4618      	mov	r0, r3
 8001096:	f003 fcc3 	bl	8004a20 <HAL_RCC_ClockConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80010a0:	f000 fb4a 	bl	8001738 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010a4:	f004 f9ca 	bl	800543c <HAL_RCCEx_EnableMSIPLLMode>
}
 80010a8:	bf00      	nop
 80010aa:	3758      	adds	r7, #88	@ 0x58
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40021000 	.word	0x40021000

080010b4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80010b8:	4b18      	ldr	r3, [pc, #96]	@ (800111c <MX_DFSDM1_Init+0x68>)
 80010ba:	4a19      	ldr	r2, [pc, #100]	@ (8001120 <MX_DFSDM1_Init+0x6c>)
 80010bc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80010be:	4b17      	ldr	r3, [pc, #92]	@ (800111c <MX_DFSDM1_Init+0x68>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80010c4:	4b15      	ldr	r3, [pc, #84]	@ (800111c <MX_DFSDM1_Init+0x68>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80010ca:	4b14      	ldr	r3, [pc, #80]	@ (800111c <MX_DFSDM1_Init+0x68>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <MX_DFSDM1_Init+0x68>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80010d6:	4b11      	ldr	r3, [pc, #68]	@ (800111c <MX_DFSDM1_Init+0x68>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <MX_DFSDM1_Init+0x68>)
 80010de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010e2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80010e4:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <MX_DFSDM1_Init+0x68>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <MX_DFSDM1_Init+0x68>)
 80010ec:	2204      	movs	r2, #4
 80010ee:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80010f0:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <MX_DFSDM1_Init+0x68>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <MX_DFSDM1_Init+0x68>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80010fc:	4b07      	ldr	r3, [pc, #28]	@ (800111c <MX_DFSDM1_Init+0x68>)
 80010fe:	2200      	movs	r2, #0
 8001100:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001102:	4b06      	ldr	r3, [pc, #24]	@ (800111c <MX_DFSDM1_Init+0x68>)
 8001104:	2200      	movs	r2, #0
 8001106:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001108:	4804      	ldr	r0, [pc, #16]	@ (800111c <MX_DFSDM1_Init+0x68>)
 800110a:	f001 faeb 	bl	80026e4 <HAL_DFSDM_ChannelInit>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001114:	f000 fb10 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200000c0 	.word	0x200000c0
 8001120:	40016020 	.word	0x40016020

08001124 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001128:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <MX_I2C1_Init+0x74>)
 800112a:	4a1c      	ldr	r2, [pc, #112]	@ (800119c <MX_I2C1_Init+0x78>)
 800112c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800112e:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001130:	4a1b      	ldr	r2, [pc, #108]	@ (80011a0 <MX_I2C1_Init+0x7c>)
 8001132:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001134:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <MX_I2C1_Init+0x74>)
 800113c:	2201      	movs	r2, #1
 800113e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001140:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001146:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <MX_I2C1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001152:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001158:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <MX_I2C1_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800115e:	480e      	ldr	r0, [pc, #56]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001160:	f001 fea5 	bl	8002eae <HAL_I2C_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800116a:	f000 fae5 	bl	8001738 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800116e:	2100      	movs	r1, #0
 8001170:	4809      	ldr	r0, [pc, #36]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001172:	f002 fd6f 	bl	8003c54 <HAL_I2CEx_ConfigAnalogFilter>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800117c:	f000 fadc 	bl	8001738 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001180:	2100      	movs	r1, #0
 8001182:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001184:	f002 fdb1 	bl	8003cea <HAL_I2CEx_ConfigDigitalFilter>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800118e:	f000 fad3 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200000f8 	.word	0x200000f8
 800119c:	40005400 	.word	0x40005400
 80011a0:	10d19ce4 	.word	0x10d19ce4

080011a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011aa:	4a1c      	ldr	r2, [pc, #112]	@ (800121c <MX_I2C2_Init+0x78>)
 80011ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001220 <MX_I2C2_Init+0x7c>)
 80011b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011b4:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ba:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011bc:	2201      	movs	r2, #1
 80011be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c0:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011c6:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011de:	480e      	ldr	r0, [pc, #56]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011e0:	f001 fe65 	bl	8002eae <HAL_I2C_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80011ea:	f000 faa5 	bl	8001738 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ee:	2100      	movs	r1, #0
 80011f0:	4809      	ldr	r0, [pc, #36]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011f2:	f002 fd2f 	bl	8003c54 <HAL_I2CEx_ConfigAnalogFilter>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80011fc:	f000 fa9c 	bl	8001738 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001200:	2100      	movs	r1, #0
 8001202:	4805      	ldr	r0, [pc, #20]	@ (8001218 <MX_I2C2_Init+0x74>)
 8001204:	f002 fd71 	bl	8003cea <HAL_I2CEx_ConfigDigitalFilter>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800120e:	f000 fa93 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000014c 	.word	0x2000014c
 800121c:	40005800 	.word	0x40005800
 8001220:	10d19ce4 	.word	0x10d19ce4

08001224 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001228:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <MX_QUADSPI_Init+0x44>)
 800122a:	4a10      	ldr	r2, [pc, #64]	@ (800126c <MX_QUADSPI_Init+0x48>)
 800122c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800122e:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <MX_QUADSPI_Init+0x44>)
 8001230:	2202      	movs	r2, #2
 8001232:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001234:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <MX_QUADSPI_Init+0x44>)
 8001236:	2204      	movs	r2, #4
 8001238:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <MX_QUADSPI_Init+0x44>)
 800123c:	2210      	movs	r2, #16
 800123e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001240:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <MX_QUADSPI_Init+0x44>)
 8001242:	2217      	movs	r2, #23
 8001244:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001246:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <MX_QUADSPI_Init+0x44>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <MX_QUADSPI_Init+0x44>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	@ (8001268 <MX_QUADSPI_Init+0x44>)
 8001254:	f002 ff4c 	bl	80040f0 <HAL_QSPI_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800125e:	f000 fa6b 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200001a0 	.word	0x200001a0
 800126c:	a0001000 	.word	0xa0001000

08001270 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001274:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <MX_SPI3_Init+0x74>)
 8001276:	4a1c      	ldr	r2, [pc, #112]	@ (80012e8 <MX_SPI3_Init+0x78>)
 8001278:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800127a:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <MX_SPI3_Init+0x74>)
 800127c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001280:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001282:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <MX_SPI3_Init+0x74>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001288:	4b16      	ldr	r3, [pc, #88]	@ (80012e4 <MX_SPI3_Init+0x74>)
 800128a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800128e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001290:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <MX_SPI3_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001296:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <MX_SPI3_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <MX_SPI3_Init+0x74>)
 800129e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <MX_SPI3_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <MX_SPI3_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <MX_SPI3_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <MX_SPI3_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80012bc:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <MX_SPI3_Init+0x74>)
 80012be:	2207      	movs	r2, #7
 80012c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012c2:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <MX_SPI3_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <MX_SPI3_Init+0x74>)
 80012ca:	2208      	movs	r2, #8
 80012cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012ce:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <MX_SPI3_Init+0x74>)
 80012d0:	f004 fa96 	bl	8005800 <HAL_SPI_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012da:	f000 fa2d 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001e4 	.word	0x200001e4
 80012e8:	40003c00 	.word	0x40003c00

080012ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012f0:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <MX_USART1_UART_Init+0x58>)
 80012f2:	4a15      	ldr	r2, [pc, #84]	@ (8001348 <MX_USART1_UART_Init+0x5c>)
 80012f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012f6:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <MX_USART1_UART_Init+0x58>)
 80012f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <MX_USART1_UART_Init+0x58>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <MX_USART1_UART_Init+0x58>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <MX_USART1_UART_Init+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <MX_USART1_UART_Init+0x58>)
 8001312:	220c      	movs	r2, #12
 8001314:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <MX_USART1_UART_Init+0x58>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <MX_USART1_UART_Init+0x58>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <MX_USART1_UART_Init+0x58>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <MX_USART1_UART_Init+0x58>)
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800132e:	4805      	ldr	r0, [pc, #20]	@ (8001344 <MX_USART1_UART_Init+0x58>)
 8001330:	f004 fb09 	bl	8005946 <HAL_UART_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800133a:	f000 f9fd 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000248 	.word	0x20000248
 8001348:	40013800 	.word	0x40013800

0800134c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001350:	4b14      	ldr	r3, [pc, #80]	@ (80013a4 <MX_USART3_UART_Init+0x58>)
 8001352:	4a15      	ldr	r2, [pc, #84]	@ (80013a8 <MX_USART3_UART_Init+0x5c>)
 8001354:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001356:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <MX_USART3_UART_Init+0x58>)
 8001358:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800135c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <MX_USART3_UART_Init+0x58>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <MX_USART3_UART_Init+0x58>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800136a:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <MX_USART3_UART_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <MX_USART3_UART_Init+0x58>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <MX_USART3_UART_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <MX_USART3_UART_Init+0x58>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001382:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <MX_USART3_UART_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <MX_USART3_UART_Init+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800138e:	4805      	ldr	r0, [pc, #20]	@ (80013a4 <MX_USART3_UART_Init+0x58>)
 8001390:	f004 fad9 	bl	8005946 <HAL_UART_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800139a:	f000 f9cd 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200002d0 	.word	0x200002d0
 80013a8:	40004800 	.word	0x40004800

080013ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013b0:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80013b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80013b8:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ba:	2206      	movs	r2, #6
 80013bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80013be:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c0:	2202      	movs	r2, #2
 80013c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c6:	2202      	movs	r2, #2
 80013c8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013de:	2200      	movs	r2, #0
 80013e0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	@ (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013f0:	f002 fcc7 	bl	8003d82 <HAL_PCD_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80013fa:	f000 f99d 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000358 	.word	0x20000358

08001408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	@ 0x28
 800140c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800141e:	4bbe      	ldr	r3, [pc, #760]	@ (8001718 <MX_GPIO_Init+0x310>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001422:	4abd      	ldr	r2, [pc, #756]	@ (8001718 <MX_GPIO_Init+0x310>)
 8001424:	f043 0310 	orr.w	r3, r3, #16
 8001428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142a:	4bbb      	ldr	r3, [pc, #748]	@ (8001718 <MX_GPIO_Init+0x310>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	4bb8      	ldr	r3, [pc, #736]	@ (8001718 <MX_GPIO_Init+0x310>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	4ab7      	ldr	r2, [pc, #732]	@ (8001718 <MX_GPIO_Init+0x310>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001442:	4bb5      	ldr	r3, [pc, #724]	@ (8001718 <MX_GPIO_Init+0x310>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4bb2      	ldr	r3, [pc, #712]	@ (8001718 <MX_GPIO_Init+0x310>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001452:	4ab1      	ldr	r2, [pc, #708]	@ (8001718 <MX_GPIO_Init+0x310>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145a:	4baf      	ldr	r3, [pc, #700]	@ (8001718 <MX_GPIO_Init+0x310>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	4bac      	ldr	r3, [pc, #688]	@ (8001718 <MX_GPIO_Init+0x310>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146a:	4aab      	ldr	r2, [pc, #684]	@ (8001718 <MX_GPIO_Init+0x310>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001472:	4ba9      	ldr	r3, [pc, #676]	@ (8001718 <MX_GPIO_Init+0x310>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147e:	4ba6      	ldr	r3, [pc, #664]	@ (8001718 <MX_GPIO_Init+0x310>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001482:	4aa5      	ldr	r2, [pc, #660]	@ (8001718 <MX_GPIO_Init+0x310>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148a:	4ba3      	ldr	r3, [pc, #652]	@ (8001718 <MX_GPIO_Init+0x310>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800149c:	489f      	ldr	r0, [pc, #636]	@ (800171c <MX_GPIO_Init+0x314>)
 800149e:	f001 fccb 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|GPIO_PIN_8|ARD_D9_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	f248 1104 	movw	r1, #33028	@ 0x8104
 80014a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ac:	f001 fcc4 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80014b0:	2200      	movs	r2, #0
 80014b2:	f24f 0134 	movw	r1, #61492	@ 0xf034
 80014b6:	489a      	ldr	r0, [pc, #616]	@ (8001720 <MX_GPIO_Init+0x318>)
 80014b8:	f001 fcbe 	bl	8002e38 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	f241 0181 	movw	r1, #4225	@ 0x1081
 80014c2:	4898      	ldr	r0, [pc, #608]	@ (8001724 <MX_GPIO_Init+0x31c>)
 80014c4:	f001 fcb8 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014ce:	4895      	ldr	r0, [pc, #596]	@ (8001724 <MX_GPIO_Init+0x31c>)
 80014d0:	f001 fcb2 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80014da:	4893      	ldr	r0, [pc, #588]	@ (8001728 <MX_GPIO_Init+0x320>)
 80014dc:	f001 fcac 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80014e0:	2201      	movs	r2, #1
 80014e2:	2101      	movs	r1, #1
 80014e4:	488d      	ldr	r0, [pc, #564]	@ (800171c <MX_GPIO_Init+0x314>)
 80014e6:	f001 fca7 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80014ea:	f240 1315 	movw	r3, #277	@ 0x115
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	4886      	ldr	r0, [pc, #536]	@ (800171c <MX_GPIO_Init+0x314>)
 8001504:	f001 f9fa 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001508:	236a      	movs	r3, #106	@ 0x6a
 800150a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800150c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	487f      	ldr	r0, [pc, #508]	@ (800171c <MX_GPIO_Init+0x314>)
 800151e:	f001 f9ed 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001522:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001528:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800152c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	487b      	ldr	r0, [pc, #492]	@ (8001728 <MX_GPIO_Init+0x320>)
 800153a:	f001 f9df 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800153e:	233f      	movs	r3, #63	@ 0x3f
 8001540:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001542:	230b      	movs	r3, #11
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4875      	ldr	r0, [pc, #468]	@ (8001728 <MX_GPIO_Init+0x320>)
 8001552:	f001 f9d3 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001556:	2303      	movs	r3, #3
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001566:	2308      	movs	r3, #8
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001574:	f001 f9c2 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin PA8 ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|GPIO_PIN_8|ARD_D9_Pin;
 8001578:	f248 1304 	movw	r3, #33028	@ 0x8104
 800157c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001594:	f001 f9b2 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001598:	2308      	movs	r3, #8
 800159a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015a8:	2301      	movs	r3, #1
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b6:	f001 f9a1 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80015ba:	2310      	movs	r3, #16
 80015bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015be:	230b      	movs	r3, #11
 80015c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d0:	f001 f994 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80015d4:	23e0      	movs	r3, #224	@ 0xe0
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015e4:	2305      	movs	r3, #5
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f2:	f001 f983 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80015f6:	2301      	movs	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	4845      	ldr	r0, [pc, #276]	@ (8001720 <MX_GPIO_Init+0x318>)
 800160c:	f001 f976 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001610:	2302      	movs	r3, #2
 8001612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001614:	230b      	movs	r3, #11
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	483f      	ldr	r0, [pc, #252]	@ (8001720 <MX_GPIO_Init+0x318>)
 8001624:	f001 f96a 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin PB5 */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001628:	f24f 0334 	movw	r3, #61492	@ 0xf034
 800162c:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4837      	ldr	r0, [pc, #220]	@ (8001720 <MX_GPIO_Init+0x318>)
 8001642:	f001 f95b 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001646:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 800164a:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800164c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	4831      	ldr	r0, [pc, #196]	@ (8001724 <MX_GPIO_Init+0x31c>)
 800165e:	f001 f94d 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001662:	f243 0381 	movw	r3, #12417	@ 0x3081
 8001666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	482a      	ldr	r0, [pc, #168]	@ (8001724 <MX_GPIO_Init+0x31c>)
 800167c:	f001 f93e 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001680:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	4823      	ldr	r0, [pc, #140]	@ (8001728 <MX_GPIO_Init+0x320>)
 800169a:	f001 f92f 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800169e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80016a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	481c      	ldr	r0, [pc, #112]	@ (8001728 <MX_GPIO_Init+0x320>)
 80016b6:	f001 f921 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80016ba:	2302      	movs	r3, #2
 80016bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016ca:	2305      	movs	r3, #5
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4813      	ldr	r0, [pc, #76]	@ (8001724 <MX_GPIO_Init+0x31c>)
 80016d6:	f001 f911 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80016da:	2378      	movs	r3, #120	@ 0x78
 80016dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ea:	2307      	movs	r3, #7
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	480b      	ldr	r0, [pc, #44]	@ (8001724 <MX_GPIO_Init+0x31c>)
 80016f6:	f001 f901 	bl	80028fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	2017      	movs	r0, #23
 8001700:	f000 ffb9 	bl	8002676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001704:	2017      	movs	r0, #23
 8001706:	f000 ffd2 	bl	80026ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	2028      	movs	r0, #40	@ 0x28
 8001710:	f000 ffb1 	bl	8002676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001714:	2028      	movs	r0, #40	@ 0x28
 8001716:	e009      	b.n	800172c <MX_GPIO_Init+0x324>
 8001718:	40021000 	.word	0x40021000
 800171c:	48001000 	.word	0x48001000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000c00 	.word	0x48000c00
 8001728:	48000800 	.word	0x48000800
 800172c:	f000 ffbf 	bl	80026ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001730:	bf00      	nop
 8001732:	3728      	adds	r7, #40	@ 0x28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173c:	b672      	cpsid	i
}
 800173e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <Error_Handler+0x8>

08001744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	4b0f      	ldr	r3, [pc, #60]	@ (8001788 <HAL_MspInit+0x44>)
 800174c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174e:	4a0e      	ldr	r2, [pc, #56]	@ (8001788 <HAL_MspInit+0x44>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6613      	str	r3, [r2, #96]	@ 0x60
 8001756:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <HAL_MspInit+0x44>)
 8001758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <HAL_MspInit+0x44>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001766:	4a08      	ldr	r2, [pc, #32]	@ (8001788 <HAL_MspInit+0x44>)
 8001768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800176c:	6593      	str	r3, [r2, #88]	@ 0x58
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_MspInit+0x44>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000

0800178c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b0ac      	sub	sp, #176	@ 0xb0
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2288      	movs	r2, #136	@ 0x88
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f005 fbc7 	bl	8006f40 <memset>
  if(DFSDM1_Init == 0)
 80017b2:	4b25      	ldr	r3, [pc, #148]	@ (8001848 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d142      	bne.n	8001840 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80017ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4618      	mov	r0, r3
 80017cc:	f003 fb4c 	bl	8004e68 <HAL_RCCEx_PeriphCLKConfig>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80017d6:	f7ff ffaf 	bl	8001738 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80017da:	4b1c      	ldr	r3, [pc, #112]	@ (800184c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017de:	4a1b      	ldr	r2, [pc, #108]	@ (800184c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80017e6:	4b19      	ldr	r3, [pc, #100]	@ (800184c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017f2:	4b16      	ldr	r3, [pc, #88]	@ (800184c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	4a15      	ldr	r2, [pc, #84]	@ (800184c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017f8:	f043 0310 	orr.w	r3, r3, #16
 80017fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017fe:	4b13      	ldr	r3, [pc, #76]	@ (800184c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800180a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800180e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001824:	2306      	movs	r3, #6
 8001826:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800182a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800182e:	4619      	mov	r1, r3
 8001830:	4807      	ldr	r0, [pc, #28]	@ (8001850 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001832:	f001 f863 	bl	80028fc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001836:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	4a02      	ldr	r2, [pc, #8]	@ (8001848 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800183e:	6013      	str	r3, [r2, #0]
  }

}
 8001840:	bf00      	nop
 8001842:	37b0      	adds	r7, #176	@ 0xb0
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000848 	.word	0x20000848
 800184c:	40021000 	.word	0x40021000
 8001850:	48001000 	.word	0x48001000

08001854 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b0ae      	sub	sp, #184	@ 0xb8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	2288      	movs	r2, #136	@ 0x88
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f005 fb63 	bl	8006f40 <memset>
  if(hi2c->Instance==I2C1)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a42      	ldr	r2, [pc, #264]	@ (8001988 <HAL_I2C_MspInit+0x134>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d13c      	bne.n	80018fe <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001884:	2340      	movs	r3, #64	@ 0x40
 8001886:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001888:	2300      	movs	r3, #0
 800188a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	4618      	mov	r0, r3
 8001892:	f003 fae9 	bl	8004e68 <HAL_RCCEx_PeriphCLKConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800189c:	f7ff ff4c 	bl	8001738 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a0:	4b3a      	ldr	r3, [pc, #232]	@ (800198c <HAL_I2C_MspInit+0x138>)
 80018a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a4:	4a39      	ldr	r2, [pc, #228]	@ (800198c <HAL_I2C_MspInit+0x138>)
 80018a6:	f043 0302 	orr.w	r3, r3, #2
 80018aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ac:	4b37      	ldr	r3, [pc, #220]	@ (800198c <HAL_I2C_MspInit+0x138>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80018b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c0:	2312      	movs	r3, #18
 80018c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018d2:	2304      	movs	r3, #4
 80018d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80018dc:	4619      	mov	r1, r3
 80018de:	482c      	ldr	r0, [pc, #176]	@ (8001990 <HAL_I2C_MspInit+0x13c>)
 80018e0:	f001 f80c 	bl	80028fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018e4:	4b29      	ldr	r3, [pc, #164]	@ (800198c <HAL_I2C_MspInit+0x138>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e8:	4a28      	ldr	r2, [pc, #160]	@ (800198c <HAL_I2C_MspInit+0x138>)
 80018ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80018f0:	4b26      	ldr	r3, [pc, #152]	@ (800198c <HAL_I2C_MspInit+0x138>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018fc:	e040      	b.n	8001980 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a24      	ldr	r2, [pc, #144]	@ (8001994 <HAL_I2C_MspInit+0x140>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d13b      	bne.n	8001980 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001908:	2380      	movs	r3, #128	@ 0x80
 800190a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800190c:	2300      	movs	r3, #0
 800190e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001910:	f107 031c 	add.w	r3, r7, #28
 8001914:	4618      	mov	r0, r3
 8001916:	f003 faa7 	bl	8004e68 <HAL_RCCEx_PeriphCLKConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001920:	f7ff ff0a 	bl	8001738 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001924:	4b19      	ldr	r3, [pc, #100]	@ (800198c <HAL_I2C_MspInit+0x138>)
 8001926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001928:	4a18      	ldr	r2, [pc, #96]	@ (800198c <HAL_I2C_MspInit+0x138>)
 800192a:	f043 0302 	orr.w	r3, r3, #2
 800192e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001930:	4b16      	ldr	r3, [pc, #88]	@ (800198c <HAL_I2C_MspInit+0x138>)
 8001932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800193c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001940:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001944:	2312      	movs	r3, #18
 8001946:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800194a:	2301      	movs	r3, #1
 800194c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001950:	2303      	movs	r3, #3
 8001952:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001956:	2304      	movs	r3, #4
 8001958:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001960:	4619      	mov	r1, r3
 8001962:	480b      	ldr	r0, [pc, #44]	@ (8001990 <HAL_I2C_MspInit+0x13c>)
 8001964:	f000 ffca 	bl	80028fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001968:	4b08      	ldr	r3, [pc, #32]	@ (800198c <HAL_I2C_MspInit+0x138>)
 800196a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196c:	4a07      	ldr	r2, [pc, #28]	@ (800198c <HAL_I2C_MspInit+0x138>)
 800196e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001972:	6593      	str	r3, [r2, #88]	@ 0x58
 8001974:	4b05      	ldr	r3, [pc, #20]	@ (800198c <HAL_I2C_MspInit+0x138>)
 8001976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001978:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	bf00      	nop
 8001982:	37b8      	adds	r7, #184	@ 0xb8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40005400 	.word	0x40005400
 800198c:	40021000 	.word	0x40021000
 8001990:	48000400 	.word	0x48000400
 8001994:	40005800 	.word	0x40005800

08001998 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a16      	ldr	r2, [pc, #88]	@ (8001a00 <HAL_I2C_MspDeInit+0x68>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d110      	bne.n	80019cc <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80019aa:	4b16      	ldr	r3, [pc, #88]	@ (8001a04 <HAL_I2C_MspDeInit+0x6c>)
 80019ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ae:	4a15      	ldr	r2, [pc, #84]	@ (8001a04 <HAL_I2C_MspDeInit+0x6c>)
 80019b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80019b4:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 80019b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019ba:	4813      	ldr	r0, [pc, #76]	@ (8001a08 <HAL_I2C_MspDeInit+0x70>)
 80019bc:	f001 f948 	bl	8002c50 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 80019c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019c4:	4810      	ldr	r0, [pc, #64]	@ (8001a08 <HAL_I2C_MspDeInit+0x70>)
 80019c6:	f001 f943 	bl	8002c50 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80019ca:	e014      	b.n	80019f6 <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0e      	ldr	r2, [pc, #56]	@ (8001a0c <HAL_I2C_MspDeInit+0x74>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10f      	bne.n	80019f6 <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 80019d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <HAL_I2C_MspDeInit+0x6c>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <HAL_I2C_MspDeInit+0x6c>)
 80019dc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80019e0:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80019e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019e6:	4808      	ldr	r0, [pc, #32]	@ (8001a08 <HAL_I2C_MspDeInit+0x70>)
 80019e8:	f001 f932 	bl	8002c50 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80019ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019f0:	4805      	ldr	r0, [pc, #20]	@ (8001a08 <HAL_I2C_MspDeInit+0x70>)
 80019f2:	f001 f92d 	bl	8002c50 <HAL_GPIO_DeInit>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40005400 	.word	0x40005400
 8001a04:	40021000 	.word	0x40021000
 8001a08:	48000400 	.word	0x48000400
 8001a0c:	40005800 	.word	0x40005800

08001a10 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	@ 0x28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a17      	ldr	r2, [pc, #92]	@ (8001a8c <HAL_QSPI_MspInit+0x7c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d128      	bne.n	8001a84 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001a32:	4b17      	ldr	r3, [pc, #92]	@ (8001a90 <HAL_QSPI_MspInit+0x80>)
 8001a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a36:	4a16      	ldr	r2, [pc, #88]	@ (8001a90 <HAL_QSPI_MspInit+0x80>)
 8001a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a3c:	6513      	str	r3, [r2, #80]	@ 0x50
 8001a3e:	4b14      	ldr	r3, [pc, #80]	@ (8001a90 <HAL_QSPI_MspInit+0x80>)
 8001a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a4a:	4b11      	ldr	r3, [pc, #68]	@ (8001a90 <HAL_QSPI_MspInit+0x80>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4e:	4a10      	ldr	r2, [pc, #64]	@ (8001a90 <HAL_QSPI_MspInit+0x80>)
 8001a50:	f043 0310 	orr.w	r3, r3, #16
 8001a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <HAL_QSPI_MspInit+0x80>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001a62:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001a66:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a74:	230a      	movs	r3, #10
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4805      	ldr	r0, [pc, #20]	@ (8001a94 <HAL_QSPI_MspInit+0x84>)
 8001a80:	f000 ff3c 	bl	80028fc <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001a84:	bf00      	nop
 8001a86:	3728      	adds	r7, #40	@ 0x28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	a0001000 	.word	0xa0001000
 8001a90:	40021000 	.word	0x40021000
 8001a94:	48001000 	.word	0x48001000

08001a98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	@ 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a17      	ldr	r2, [pc, #92]	@ (8001b14 <HAL_SPI_MspInit+0x7c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d128      	bne.n	8001b0c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001aba:	4b17      	ldr	r3, [pc, #92]	@ (8001b18 <HAL_SPI_MspInit+0x80>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abe:	4a16      	ldr	r2, [pc, #88]	@ (8001b18 <HAL_SPI_MspInit+0x80>)
 8001ac0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ac4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ac6:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <HAL_SPI_MspInit+0x80>)
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <HAL_SPI_MspInit+0x80>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad6:	4a10      	ldr	r2, [pc, #64]	@ (8001b18 <HAL_SPI_MspInit+0x80>)
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ade:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <HAL_SPI_MspInit+0x80>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001aea:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001afc:	2306      	movs	r3, #6
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	4619      	mov	r1, r3
 8001b06:	4805      	ldr	r0, [pc, #20]	@ (8001b1c <HAL_SPI_MspInit+0x84>)
 8001b08:	f000 fef8 	bl	80028fc <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001b0c:	bf00      	nop
 8001b0e:	3728      	adds	r7, #40	@ 0x28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40003c00 	.word	0x40003c00
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	48000800 	.word	0x48000800

08001b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b0ae      	sub	sp, #184	@ 0xb8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b38:	f107 031c 	add.w	r3, r7, #28
 8001b3c:	2288      	movs	r2, #136	@ 0x88
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f005 f9fd 	bl	8006f40 <memset>
  if(huart->Instance==USART1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a42      	ldr	r2, [pc, #264]	@ (8001c54 <HAL_UART_MspInit+0x134>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d13b      	bne.n	8001bc8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b50:	2301      	movs	r3, #1
 8001b52:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b54:	2300      	movs	r3, #0
 8001b56:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 f983 	bl	8004e68 <HAL_RCCEx_PeriphCLKConfig>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b68:	f7ff fde6 	bl	8001738 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c58 <HAL_UART_MspInit+0x138>)
 8001b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b70:	4a39      	ldr	r2, [pc, #228]	@ (8001c58 <HAL_UART_MspInit+0x138>)
 8001b72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b76:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b78:	4b37      	ldr	r3, [pc, #220]	@ (8001c58 <HAL_UART_MspInit+0x138>)
 8001b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b80:	61bb      	str	r3, [r7, #24]
 8001b82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b84:	4b34      	ldr	r3, [pc, #208]	@ (8001c58 <HAL_UART_MspInit+0x138>)
 8001b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b88:	4a33      	ldr	r2, [pc, #204]	@ (8001c58 <HAL_UART_MspInit+0x138>)
 8001b8a:	f043 0302 	orr.w	r3, r3, #2
 8001b8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b90:	4b31      	ldr	r3, [pc, #196]	@ (8001c58 <HAL_UART_MspInit+0x138>)
 8001b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001b9c:	23c0      	movs	r3, #192	@ 0xc0
 8001b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bb4:	2307      	movs	r3, #7
 8001bb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4826      	ldr	r0, [pc, #152]	@ (8001c5c <HAL_UART_MspInit+0x13c>)
 8001bc2:	f000 fe9b 	bl	80028fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bc6:	e040      	b.n	8001c4a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a24      	ldr	r2, [pc, #144]	@ (8001c60 <HAL_UART_MspInit+0x140>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d13b      	bne.n	8001c4a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 f942 	bl	8004e68 <HAL_RCCEx_PeriphCLKConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001bea:	f7ff fda5 	bl	8001738 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bee:	4b1a      	ldr	r3, [pc, #104]	@ (8001c58 <HAL_UART_MspInit+0x138>)
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf2:	4a19      	ldr	r2, [pc, #100]	@ (8001c58 <HAL_UART_MspInit+0x138>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bfa:	4b17      	ldr	r3, [pc, #92]	@ (8001c58 <HAL_UART_MspInit+0x138>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c06:	4b14      	ldr	r3, [pc, #80]	@ (8001c58 <HAL_UART_MspInit+0x138>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0a:	4a13      	ldr	r2, [pc, #76]	@ (8001c58 <HAL_UART_MspInit+0x138>)
 8001c0c:	f043 0308 	orr.w	r3, r3, #8
 8001c10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c12:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <HAL_UART_MspInit+0x138>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001c1e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c32:	2303      	movs	r3, #3
 8001c34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c38:	2307      	movs	r3, #7
 8001c3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c3e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c42:	4619      	mov	r1, r3
 8001c44:	4807      	ldr	r0, [pc, #28]	@ (8001c64 <HAL_UART_MspInit+0x144>)
 8001c46:	f000 fe59 	bl	80028fc <HAL_GPIO_Init>
}
 8001c4a:	bf00      	nop
 8001c4c:	37b8      	adds	r7, #184	@ 0xb8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40013800 	.word	0x40013800
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	48000400 	.word	0x48000400
 8001c60:	40004800 	.word	0x40004800
 8001c64:	48000c00 	.word	0x48000c00

08001c68 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b0ac      	sub	sp, #176	@ 0xb0
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2288      	movs	r2, #136	@ 0x88
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f005 f959 	bl	8006f40 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c96:	d17c      	bne.n	8001d92 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001c98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c9c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001c9e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001ca2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001caa:	2301      	movs	r3, #1
 8001cac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001cae:	2318      	movs	r3, #24
 8001cb0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001cb2:	2307      	movs	r3, #7
 8001cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001cbe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001cc2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 f8cd 	bl	8004e68 <HAL_RCCEx_PeriphCLKConfig>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001cd4:	f7ff fd30 	bl	8001738 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd8:	4b30      	ldr	r3, [pc, #192]	@ (8001d9c <HAL_PCD_MspInit+0x134>)
 8001cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cdc:	4a2f      	ldr	r2, [pc, #188]	@ (8001d9c <HAL_PCD_MspInit+0x134>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d9c <HAL_PCD_MspInit+0x134>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d04:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d0e:	f000 fdf5 	bl	80028fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001d12:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001d16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d2c:	230a      	movs	r3, #10
 8001d2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d36:	4619      	mov	r1, r3
 8001d38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d3c:	f000 fdde 	bl	80028fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d40:	4b16      	ldr	r3, [pc, #88]	@ (8001d9c <HAL_PCD_MspInit+0x134>)
 8001d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d44:	4a15      	ldr	r2, [pc, #84]	@ (8001d9c <HAL_PCD_MspInit+0x134>)
 8001d46:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d4c:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <HAL_PCD_MspInit+0x134>)
 8001d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d58:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <HAL_PCD_MspInit+0x134>)
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d114      	bne.n	8001d8e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d64:	4b0d      	ldr	r3, [pc, #52]	@ (8001d9c <HAL_PCD_MspInit+0x134>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d68:	4a0c      	ldr	r2, [pc, #48]	@ (8001d9c <HAL_PCD_MspInit+0x134>)
 8001d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d70:	4b0a      	ldr	r3, [pc, #40]	@ (8001d9c <HAL_PCD_MspInit+0x134>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001d7c:	f002 f9a8 	bl	80040d0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d80:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <HAL_PCD_MspInit+0x134>)
 8001d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d84:	4a05      	ldr	r2, [pc, #20]	@ (8001d9c <HAL_PCD_MspInit+0x134>)
 8001d86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d8a:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001d8c:	e001      	b.n	8001d92 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001d8e:	f002 f99f 	bl	80040d0 <HAL_PWREx_EnableVddUSB>
}
 8001d92:	bf00      	nop
 8001d94:	37b0      	adds	r7, #176	@ 0xb0
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000

08001da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <NMI_Handler+0x4>

08001da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <HardFault_Handler+0x4>

08001db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <MemManage_Handler+0x4>

08001db8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <BusFault_Handler+0x4>

08001dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc4:	bf00      	nop
 8001dc6:	e7fd      	b.n	8001dc4 <UsageFault_Handler+0x4>

08001dc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df6:	f000 fb1f 	bl	8002438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001e02:	2020      	movs	r0, #32
 8001e04:	f001 f830 	bl	8002e68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001e08:	2040      	movs	r0, #64	@ 0x40
 8001e0a:	f001 f82d 	bl	8002e68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001e0e:	2080      	movs	r0, #128	@ 0x80
 8001e10:	f001 f82a 	bl	8002e68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001e14:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001e18:	f001 f826 	bl	8002e68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001e24:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001e28:	f001 f81e 	bl	8002e68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001e2c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001e30:	f001 f81a 	bl	8002e68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001e34:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e38:	f001 f816 	bl	8002e68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001e3c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001e40:	f001 f812 	bl	8002e68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001e44:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001e48:	f001 f80e 	bl	8002e68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e58:	4a14      	ldr	r2, [pc, #80]	@ (8001eac <_sbrk+0x5c>)
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <_sbrk+0x60>)
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e64:	4b13      	ldr	r3, [pc, #76]	@ (8001eb4 <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d102      	bne.n	8001e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <_sbrk+0x64>)
 8001e6e:	4a12      	ldr	r2, [pc, #72]	@ (8001eb8 <_sbrk+0x68>)
 8001e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e72:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <_sbrk+0x64>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d207      	bcs.n	8001e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e80:	f005 f866 	bl	8006f50 <__errno>
 8001e84:	4603      	mov	r3, r0
 8001e86:	220c      	movs	r2, #12
 8001e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	e009      	b.n	8001ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e90:	4b08      	ldr	r3, [pc, #32]	@ (8001eb4 <_sbrk+0x64>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e96:	4b07      	ldr	r3, [pc, #28]	@ (8001eb4 <_sbrk+0x64>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	4a05      	ldr	r2, [pc, #20]	@ (8001eb4 <_sbrk+0x64>)
 8001ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20018000 	.word	0x20018000
 8001eb0:	00000400 	.word	0x00000400
 8001eb4:	2000084c 	.word	0x2000084c
 8001eb8:	20000a20 	.word	0x20000a20

08001ebc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <SystemInit+0x20>)
 8001ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ec6:	4a05      	ldr	r2, [pc, #20]	@ (8001edc <SystemInit+0x20>)
 8001ec8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ecc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ee0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ee4:	f7ff ffea 	bl	8001ebc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ee8:	480c      	ldr	r0, [pc, #48]	@ (8001f1c <LoopForever+0x6>)
  ldr r1, =_edata
 8001eea:	490d      	ldr	r1, [pc, #52]	@ (8001f20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001eec:	4a0d      	ldr	r2, [pc, #52]	@ (8001f24 <LoopForever+0xe>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef0:	e002      	b.n	8001ef8 <LoopCopyDataInit>

08001ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef6:	3304      	adds	r3, #4

08001ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001efc:	d3f9      	bcc.n	8001ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efe:	4a0a      	ldr	r2, [pc, #40]	@ (8001f28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f00:	4c0a      	ldr	r4, [pc, #40]	@ (8001f2c <LoopForever+0x16>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f04:	e001      	b.n	8001f0a <LoopFillZerobss>

08001f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f08:	3204      	adds	r2, #4

08001f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f0c:	d3fb      	bcc.n	8001f06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f0e:	f005 f825 	bl	8006f5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f12:	f7fe ffe9 	bl	8000ee8 <main>

08001f16 <LoopForever>:

LoopForever:
    b LoopForever
 8001f16:	e7fe      	b.n	8001f16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f24:	08007a68 	.word	0x08007a68
  ldr r2, =_sbss
 8001f28:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001f2c:	20000a20 	.word	0x20000a20

08001f30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f30:	e7fe      	b.n	8001f30 <ADC1_2_IRQHandler>
	...

08001f34 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	@ 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001f3c:	4b27      	ldr	r3, [pc, #156]	@ (8001fdc <I2Cx_MspInit+0xa8>)
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f40:	4a26      	ldr	r2, [pc, #152]	@ (8001fdc <I2Cx_MspInit+0xa8>)
 8001f42:	f043 0302 	orr.w	r3, r3, #2
 8001f46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f48:	4b24      	ldr	r3, [pc, #144]	@ (8001fdc <I2Cx_MspInit+0xa8>)
 8001f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001f54:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f58:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001f5a:	2312      	movs	r3, #18
 8001f5c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001f66:	2304      	movs	r3, #4
 8001f68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f6a:	f107 0314 	add.w	r3, r7, #20
 8001f6e:	4619      	mov	r1, r3
 8001f70:	481b      	ldr	r0, [pc, #108]	@ (8001fe0 <I2Cx_MspInit+0xac>)
 8001f72:	f000 fcc3 	bl	80028fc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4818      	ldr	r0, [pc, #96]	@ (8001fe0 <I2Cx_MspInit+0xac>)
 8001f7e:	f000 fcbd 	bl	80028fc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001f82:	4b16      	ldr	r3, [pc, #88]	@ (8001fdc <I2Cx_MspInit+0xa8>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f86:	4a15      	ldr	r2, [pc, #84]	@ (8001fdc <I2Cx_MspInit+0xa8>)
 8001f88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f8e:	4b13      	ldr	r3, [pc, #76]	@ (8001fdc <I2Cx_MspInit+0xa8>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001f9a:	4b10      	ldr	r3, [pc, #64]	@ (8001fdc <I2Cx_MspInit+0xa8>)
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fdc <I2Cx_MspInit+0xa8>)
 8001fa0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fa4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8001fdc <I2Cx_MspInit+0xa8>)
 8001fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001faa:	4a0c      	ldr	r2, [pc, #48]	@ (8001fdc <I2Cx_MspInit+0xa8>)
 8001fac:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001fb0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	210f      	movs	r1, #15
 8001fb6:	2021      	movs	r0, #33	@ 0x21
 8001fb8:	f000 fb5d 	bl	8002676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001fbc:	2021      	movs	r0, #33	@ 0x21
 8001fbe:	f000 fb76 	bl	80026ae <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	210f      	movs	r1, #15
 8001fc6:	2022      	movs	r0, #34	@ 0x22
 8001fc8:	f000 fb55 	bl	8002676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001fcc:	2022      	movs	r0, #34	@ 0x22
 8001fce:	f000 fb6e 	bl	80026ae <HAL_NVIC_EnableIRQ>
}
 8001fd2:	bf00      	nop
 8001fd4:	3728      	adds	r7, #40	@ 0x28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	48000400 	.word	0x48000400

08001fe4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a12      	ldr	r2, [pc, #72]	@ (8002038 <I2Cx_Init+0x54>)
 8001ff0:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a11      	ldr	r2, [pc, #68]	@ (800203c <I2Cx_Init+0x58>)
 8001ff6:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ff89 	bl	8001f34 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 ff43 	bl	8002eae <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002028:	2100      	movs	r1, #0
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f001 fe12 	bl	8003c54 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40005800 	.word	0x40005800
 800203c:	00702681 	.word	0x00702681

08002040 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	@ 0x28
 8002044:	af04      	add	r7, sp, #16
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	4608      	mov	r0, r1
 800204a:	4611      	mov	r1, r2
 800204c:	461a      	mov	r2, r3
 800204e:	4603      	mov	r3, r0
 8002050:	72fb      	strb	r3, [r7, #11]
 8002052:	460b      	mov	r3, r1
 8002054:	813b      	strh	r3, [r7, #8]
 8002056:	4613      	mov	r3, r2
 8002058:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800205e:	7afb      	ldrb	r3, [r7, #11]
 8002060:	b299      	uxth	r1, r3
 8002062:	88f8      	ldrh	r0, [r7, #6]
 8002064:	893a      	ldrh	r2, [r7, #8]
 8002066:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800206a:	9302      	str	r3, [sp, #8]
 800206c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800206e:	9301      	str	r3, [sp, #4]
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	4603      	mov	r3, r0
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f001 fa10 	bl	800349c <HAL_I2C_Mem_Read>
 800207c:	4603      	mov	r3, r0
 800207e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d004      	beq.n	8002090 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002086:	7afb      	ldrb	r3, [r7, #11]
 8002088:	4619      	mov	r1, r3
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f832 	bl	80020f4 <I2Cx_Error>
  }
  return status;
 8002090:	7dfb      	ldrb	r3, [r7, #23]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b08a      	sub	sp, #40	@ 0x28
 800209e:	af04      	add	r7, sp, #16
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	4608      	mov	r0, r1
 80020a4:	4611      	mov	r1, r2
 80020a6:	461a      	mov	r2, r3
 80020a8:	4603      	mov	r3, r0
 80020aa:	72fb      	strb	r3, [r7, #11]
 80020ac:	460b      	mov	r3, r1
 80020ae:	813b      	strh	r3, [r7, #8]
 80020b0:	4613      	mov	r3, r2
 80020b2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80020b8:	7afb      	ldrb	r3, [r7, #11]
 80020ba:	b299      	uxth	r1, r3
 80020bc:	88f8      	ldrh	r0, [r7, #6]
 80020be:	893a      	ldrh	r2, [r7, #8]
 80020c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020c4:	9302      	str	r3, [sp, #8]
 80020c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	4603      	mov	r3, r0
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f001 f8cf 	bl	8003274 <HAL_I2C_Mem_Write>
 80020d6:	4603      	mov	r3, r0
 80020d8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80020da:	7dfb      	ldrb	r3, [r7, #23]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d004      	beq.n	80020ea <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80020e0:	7afb      	ldrb	r3, [r7, #11]
 80020e2:	4619      	mov	r1, r3
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 f805 	bl	80020f4 <I2Cx_Error>
  }
  return status;
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 ff6f 	bl	8002fe4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ff6c 	bl	8001fe4 <I2Cx_Init>
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002118:	4802      	ldr	r0, [pc, #8]	@ (8002124 <SENSOR_IO_Init+0x10>)
 800211a:	f7ff ff63 	bl	8001fe4 <I2Cx_Init>
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000850 	.word	0x20000850

08002128 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af02      	add	r7, sp, #8
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
 8002132:	460b      	mov	r3, r1
 8002134:	71bb      	strb	r3, [r7, #6]
 8002136:	4613      	mov	r3, r2
 8002138:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800213a:	79bb      	ldrb	r3, [r7, #6]
 800213c:	b29a      	uxth	r2, r3
 800213e:	79f9      	ldrb	r1, [r7, #7]
 8002140:	2301      	movs	r3, #1
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	1d7b      	adds	r3, r7, #5
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	2301      	movs	r3, #1
 800214a:	4803      	ldr	r0, [pc, #12]	@ (8002158 <SENSOR_IO_Write+0x30>)
 800214c:	f7ff ffa5 	bl	800209a <I2Cx_WriteMultiple>
}
 8002150:	bf00      	nop
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000850 	.word	0x20000850

0800215c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af02      	add	r7, sp, #8
 8002162:	4603      	mov	r3, r0
 8002164:	460a      	mov	r2, r1
 8002166:	71fb      	strb	r3, [r7, #7]
 8002168:	4613      	mov	r3, r2
 800216a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002170:	79bb      	ldrb	r3, [r7, #6]
 8002172:	b29a      	uxth	r2, r3
 8002174:	79f9      	ldrb	r1, [r7, #7]
 8002176:	2301      	movs	r3, #1
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	f107 030f 	add.w	r3, r7, #15
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2301      	movs	r3, #1
 8002182:	4804      	ldr	r0, [pc, #16]	@ (8002194 <SENSOR_IO_Read+0x38>)
 8002184:	f7ff ff5c 	bl	8002040 <I2Cx_ReadMultiple>

  return read_value;
 8002188:	7bfb      	ldrb	r3, [r7, #15]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000850 	.word	0x20000850

08002198 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af02      	add	r7, sp, #8
 800219e:	603a      	str	r2, [r7, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
 80021a6:	460b      	mov	r3, r1
 80021a8:	71bb      	strb	r3, [r7, #6]
 80021aa:	4613      	mov	r3, r2
 80021ac:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80021ae:	79bb      	ldrb	r3, [r7, #6]
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	79f9      	ldrb	r1, [r7, #7]
 80021b4:	88bb      	ldrh	r3, [r7, #4]
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2301      	movs	r3, #1
 80021be:	4804      	ldr	r0, [pc, #16]	@ (80021d0 <SENSOR_IO_ReadMultiple+0x38>)
 80021c0:	f7ff ff3e 	bl	8002040 <I2Cx_ReadMultiple>
 80021c4:	4603      	mov	r3, r0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000850 	.word	0x20000850

080021d4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80021de:	4b09      	ldr	r3, [pc, #36]	@ (8002204 <BSP_TSENSOR_Init+0x30>)
 80021e0:	4a09      	ldr	r2, [pc, #36]	@ (8002208 <BSP_TSENSOR_Init+0x34>)
 80021e2:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80021e4:	f7ff ff96 	bl	8002114 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80021e8:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <BSP_TSENSOR_Init+0x30>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2100      	movs	r1, #0
 80021f0:	20be      	movs	r0, #190	@ 0xbe
 80021f2:	4798      	blx	r3

  ret = TSENSOR_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80021f8:	79fb      	ldrb	r3, [r7, #7]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200008a4 	.word	0x200008a4
 8002208:	20000004 	.word	0x20000004

0800220c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002210:	4b04      	ldr	r3, [pc, #16]	@ (8002224 <BSP_TSENSOR_ReadTemp+0x18>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	20be      	movs	r0, #190	@ 0xbe
 8002218:	4798      	blx	r3
 800221a:	eef0 7a40 	vmov.f32	s15, s0
}
 800221e:	eeb0 0a67 	vmov.f32	s0, s15
 8002222:	bd80      	pop	{r7, pc}
 8002224:	200008a4 	.word	0x200008a4

08002228 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	6039      	str	r1, [r7, #0]
 8002232:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002234:	88fb      	ldrh	r3, [r7, #6]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2120      	movs	r1, #32
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff ff8e 	bl	800215c <SENSOR_IO_Read>
 8002240:	4603      	mov	r3, r0
 8002242:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	f023 0304 	bic.w	r3, r3, #4
 800224a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	f023 0303 	bic.w	r3, r3, #3
 800225a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800226a:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	2120      	movs	r1, #32
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff57 	bl	8002128 <SENSOR_IO_Write>
}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b088      	sub	sp, #32
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	b2d8      	uxtb	r0, r3
 8002290:	f107 0208 	add.w	r2, r7, #8
 8002294:	2302      	movs	r3, #2
 8002296:	21b2      	movs	r1, #178	@ 0xb2
 8002298:	f7ff ff7e 	bl	8002198 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2135      	movs	r1, #53	@ 0x35
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff ff5a 	bl	800215c <SENSOR_IO_Read>
 80022a8:	4603      	mov	r3, r0
 80022aa:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80022ac:	7ffb      	ldrb	r3, [r7, #31]
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	b21b      	sxth	r3, r3
 80022b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022b6:	b21a      	sxth	r2, r3
 80022b8:	7a3b      	ldrb	r3, [r7, #8]
 80022ba:	b21b      	sxth	r3, r3
 80022bc:	4313      	orrs	r3, r2
 80022be:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80022c0:	7ffb      	ldrb	r3, [r7, #31]
 80022c2:	019b      	lsls	r3, r3, #6
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022ca:	b21a      	sxth	r2, r3
 80022cc:	7a7b      	ldrb	r3, [r7, #9]
 80022ce:	b21b      	sxth	r3, r3
 80022d0:	4313      	orrs	r3, r2
 80022d2:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80022d4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80022d8:	10db      	asrs	r3, r3, #3
 80022da:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80022dc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80022e0:	10db      	asrs	r3, r3, #3
 80022e2:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	b2d8      	uxtb	r0, r3
 80022e8:	f107 0208 	add.w	r2, r7, #8
 80022ec:	2304      	movs	r3, #4
 80022ee:	21bc      	movs	r1, #188	@ 0xbc
 80022f0:	f7ff ff52 	bl	8002198 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80022f4:	7a7b      	ldrb	r3, [r7, #9]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	b21a      	sxth	r2, r3
 80022fa:	7a3b      	ldrb	r3, [r7, #8]
 80022fc:	b21b      	sxth	r3, r3
 80022fe:	4313      	orrs	r3, r2
 8002300:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002302:	7afb      	ldrb	r3, [r7, #11]
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	b21a      	sxth	r2, r3
 8002308:	7abb      	ldrb	r3, [r7, #10]
 800230a:	b21b      	sxth	r3, r3
 800230c:	4313      	orrs	r3, r2
 800230e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	b2d8      	uxtb	r0, r3
 8002314:	f107 0208 	add.w	r2, r7, #8
 8002318:	2302      	movs	r3, #2
 800231a:	21aa      	movs	r1, #170	@ 0xaa
 800231c:	f7ff ff3c 	bl	8002198 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002320:	7a7b      	ldrb	r3, [r7, #9]
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	b21a      	sxth	r2, r3
 8002326:	7a3b      	ldrb	r3, [r7, #8]
 8002328:	b21b      	sxth	r3, r3
 800232a:	4313      	orrs	r3, r2
 800232c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800232e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002332:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	ee07 3a90 	vmov	s15, r3
 800233c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002340:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002344:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	ee07 3a90 	vmov	s15, r3
 800234e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002352:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002356:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800235a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	ee07 3a90 	vmov	s15, r3
 8002364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002368:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800236c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002370:	ee07 3a90 	vmov	s15, r3
 8002374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237c:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	ee07 3a90 	vmov	s15, r3
}
 8002386:	eeb0 0a67 	vmov.f32	s0, s15
 800238a:	3720      	adds	r7, #32
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800239a:	2003      	movs	r0, #3
 800239c:	f000 f960 	bl	8002660 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023a0:	2000      	movs	r0, #0
 80023a2:	f000 f80d 	bl	80023c0 <HAL_InitTick>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	71fb      	strb	r3, [r7, #7]
 80023b0:	e001      	b.n	80023b6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023b2:	f7ff f9c7 	bl	8001744 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023b6:	79fb      	ldrb	r3, [r7, #7]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023cc:	4b17      	ldr	r3, [pc, #92]	@ (800242c <HAL_InitTick+0x6c>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d023      	beq.n	800241c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023d4:	4b16      	ldr	r3, [pc, #88]	@ (8002430 <HAL_InitTick+0x70>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b14      	ldr	r3, [pc, #80]	@ (800242c <HAL_InitTick+0x6c>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f96d 	bl	80026ca <HAL_SYSTICK_Config>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10f      	bne.n	8002416 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b0f      	cmp	r3, #15
 80023fa:	d809      	bhi.n	8002410 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023fc:	2200      	movs	r2, #0
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	f04f 30ff 	mov.w	r0, #4294967295
 8002404:	f000 f937 	bl	8002676 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002408:	4a0a      	ldr	r2, [pc, #40]	@ (8002434 <HAL_InitTick+0x74>)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e007      	b.n	8002420 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	e004      	b.n	8002420 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
 800241a:	e001      	b.n	8002420 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000018 	.word	0x20000018
 8002430:	20000000 	.word	0x20000000
 8002434:	20000014 	.word	0x20000014

08002438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800243c:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <HAL_IncTick+0x20>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	4b06      	ldr	r3, [pc, #24]	@ (800245c <HAL_IncTick+0x24>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4413      	add	r3, r2
 8002448:	4a04      	ldr	r2, [pc, #16]	@ (800245c <HAL_IncTick+0x24>)
 800244a:	6013      	str	r3, [r2, #0]
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000018 	.word	0x20000018
 800245c:	200008a8 	.word	0x200008a8

08002460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return uwTick;
 8002464:	4b03      	ldr	r3, [pc, #12]	@ (8002474 <HAL_GetTick+0x14>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	200008a8 	.word	0x200008a8

08002478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002480:	f7ff ffee 	bl	8002460 <HAL_GetTick>
 8002484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002490:	d005      	beq.n	800249e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002492:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <HAL_Delay+0x44>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4413      	add	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800249e:	bf00      	nop
 80024a0:	f7ff ffde 	bl	8002460 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d8f7      	bhi.n	80024a0 <HAL_Delay+0x28>
  {
  }
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000018 	.word	0x20000018

080024c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024dc:	4013      	ands	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f2:	4a04      	ldr	r2, [pc, #16]	@ (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	60d3      	str	r3, [r2, #12]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800250c:	4b04      	ldr	r3, [pc, #16]	@ (8002520 <__NVIC_GetPriorityGrouping+0x18>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	f003 0307 	and.w	r3, r3, #7
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	2b00      	cmp	r3, #0
 8002534:	db0b      	blt.n	800254e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	f003 021f 	and.w	r2, r3, #31
 800253c:	4907      	ldr	r1, [pc, #28]	@ (800255c <__NVIC_EnableIRQ+0x38>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	2001      	movs	r0, #1
 8002546:	fa00 f202 	lsl.w	r2, r0, r2
 800254a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000e100 	.word	0xe000e100

08002560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	6039      	str	r1, [r7, #0]
 800256a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	2b00      	cmp	r3, #0
 8002572:	db0a      	blt.n	800258a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	490c      	ldr	r1, [pc, #48]	@ (80025ac <__NVIC_SetPriority+0x4c>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	0112      	lsls	r2, r2, #4
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	440b      	add	r3, r1
 8002584:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002588:	e00a      	b.n	80025a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4908      	ldr	r1, [pc, #32]	@ (80025b0 <__NVIC_SetPriority+0x50>)
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	3b04      	subs	r3, #4
 8002598:	0112      	lsls	r2, r2, #4
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	440b      	add	r3, r1
 800259e:	761a      	strb	r2, [r3, #24]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000e100 	.word	0xe000e100
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	@ 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f1c3 0307 	rsb	r3, r3, #7
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	bf28      	it	cs
 80025d2:	2304      	movcs	r3, #4
 80025d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3304      	adds	r3, #4
 80025da:	2b06      	cmp	r3, #6
 80025dc:	d902      	bls.n	80025e4 <NVIC_EncodePriority+0x30>
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3b03      	subs	r3, #3
 80025e2:	e000      	b.n	80025e6 <NVIC_EncodePriority+0x32>
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43da      	mvns	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	401a      	ands	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	43d9      	mvns	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	4313      	orrs	r3, r2
         );
}
 800260e:	4618      	mov	r0, r3
 8002610:	3724      	adds	r7, #36	@ 0x24
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3b01      	subs	r3, #1
 8002628:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800262c:	d301      	bcc.n	8002632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800262e:	2301      	movs	r3, #1
 8002630:	e00f      	b.n	8002652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002632:	4a0a      	ldr	r2, [pc, #40]	@ (800265c <SysTick_Config+0x40>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3b01      	subs	r3, #1
 8002638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800263a:	210f      	movs	r1, #15
 800263c:	f04f 30ff 	mov.w	r0, #4294967295
 8002640:	f7ff ff8e 	bl	8002560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002644:	4b05      	ldr	r3, [pc, #20]	@ (800265c <SysTick_Config+0x40>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800264a:	4b04      	ldr	r3, [pc, #16]	@ (800265c <SysTick_Config+0x40>)
 800264c:	2207      	movs	r2, #7
 800264e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	e000e010 	.word	0xe000e010

08002660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ff29 	bl	80024c0 <__NVIC_SetPriorityGrouping>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b086      	sub	sp, #24
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002688:	f7ff ff3e 	bl	8002508 <__NVIC_GetPriorityGrouping>
 800268c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	6978      	ldr	r0, [r7, #20]
 8002694:	f7ff ff8e 	bl	80025b4 <NVIC_EncodePriority>
 8002698:	4602      	mov	r2, r0
 800269a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269e:	4611      	mov	r1, r2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff5d 	bl	8002560 <__NVIC_SetPriority>
}
 80026a6:	bf00      	nop
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4603      	mov	r3, r0
 80026b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff31 	bl	8002524 <__NVIC_EnableIRQ>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ffa2 	bl	800261c <SysTick_Config>
 80026d8:	4603      	mov	r3, r0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e0ac      	b.n	8002850 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f8b2 	bl	8002864 <DFSDM_GetChannelFromInstance>
 8002700:	4603      	mov	r3, r0
 8002702:	4a55      	ldr	r2, [pc, #340]	@ (8002858 <HAL_DFSDM_ChannelInit+0x174>)
 8002704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e09f      	b.n	8002850 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff f83b 	bl	800178c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002716:	4b51      	ldr	r3, [pc, #324]	@ (800285c <HAL_DFSDM_ChannelInit+0x178>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	3301      	adds	r3, #1
 800271c:	4a4f      	ldr	r2, [pc, #316]	@ (800285c <HAL_DFSDM_ChannelInit+0x178>)
 800271e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002720:	4b4e      	ldr	r3, [pc, #312]	@ (800285c <HAL_DFSDM_ChannelInit+0x178>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d125      	bne.n	8002774 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002728:	4b4d      	ldr	r3, [pc, #308]	@ (8002860 <HAL_DFSDM_ChannelInit+0x17c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a4c      	ldr	r2, [pc, #304]	@ (8002860 <HAL_DFSDM_ChannelInit+0x17c>)
 800272e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002732:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002734:	4b4a      	ldr	r3, [pc, #296]	@ (8002860 <HAL_DFSDM_ChannelInit+0x17c>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4948      	ldr	r1, [pc, #288]	@ (8002860 <HAL_DFSDM_ChannelInit+0x17c>)
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002742:	4b47      	ldr	r3, [pc, #284]	@ (8002860 <HAL_DFSDM_ChannelInit+0x17c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a46      	ldr	r2, [pc, #280]	@ (8002860 <HAL_DFSDM_ChannelInit+0x17c>)
 8002748:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800274c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	791b      	ldrb	r3, [r3, #4]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d108      	bne.n	8002768 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002756:	4b42      	ldr	r3, [pc, #264]	@ (8002860 <HAL_DFSDM_ChannelInit+0x17c>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	3b01      	subs	r3, #1
 8002760:	041b      	lsls	r3, r3, #16
 8002762:	493f      	ldr	r1, [pc, #252]	@ (8002860 <HAL_DFSDM_ChannelInit+0x17c>)
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002768:	4b3d      	ldr	r3, [pc, #244]	@ (8002860 <HAL_DFSDM_ChannelInit+0x17c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a3c      	ldr	r2, [pc, #240]	@ (8002860 <HAL_DFSDM_ChannelInit+0x17c>)
 800276e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002772:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8002782:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6819      	ldr	r1, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002792:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002798:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 020f 	bic.w	r2, r2, #15
 80027b0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6819      	ldr	r1, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80027d8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6899      	ldr	r1, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e8:	3b01      	subs	r3, #1
 80027ea:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f002 0207 	and.w	r2, r2, #7
 8002804:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6859      	ldr	r1, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002810:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002830:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f000 f810 	bl	8002864 <DFSDM_GetChannelFromInstance>
 8002844:	4602      	mov	r2, r0
 8002846:	4904      	ldr	r1, [pc, #16]	@ (8002858 <HAL_DFSDM_ChannelInit+0x174>)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	200008b0 	.word	0x200008b0
 800285c:	200008ac 	.word	0x200008ac
 8002860:	40016000 	.word	0x40016000

08002864 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a1c      	ldr	r2, [pc, #112]	@ (80028e0 <DFSDM_GetChannelFromInstance+0x7c>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d102      	bne.n	800287a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	e02b      	b.n	80028d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a19      	ldr	r2, [pc, #100]	@ (80028e4 <DFSDM_GetChannelFromInstance+0x80>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d102      	bne.n	8002888 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002882:	2301      	movs	r3, #1
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	e024      	b.n	80028d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a17      	ldr	r2, [pc, #92]	@ (80028e8 <DFSDM_GetChannelFromInstance+0x84>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d102      	bne.n	8002896 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002890:	2302      	movs	r3, #2
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	e01d      	b.n	80028d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a14      	ldr	r2, [pc, #80]	@ (80028ec <DFSDM_GetChannelFromInstance+0x88>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d102      	bne.n	80028a4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800289e:	2304      	movs	r3, #4
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	e016      	b.n	80028d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a12      	ldr	r2, [pc, #72]	@ (80028f0 <DFSDM_GetChannelFromInstance+0x8c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d102      	bne.n	80028b2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80028ac:	2305      	movs	r3, #5
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	e00f      	b.n	80028d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a0f      	ldr	r2, [pc, #60]	@ (80028f4 <DFSDM_GetChannelFromInstance+0x90>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d102      	bne.n	80028c0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80028ba:	2306      	movs	r3, #6
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	e008      	b.n	80028d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a0d      	ldr	r2, [pc, #52]	@ (80028f8 <DFSDM_GetChannelFromInstance+0x94>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d102      	bne.n	80028ce <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80028c8:	2307      	movs	r3, #7
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	e001      	b.n	80028d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80028ce:	2303      	movs	r3, #3
 80028d0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80028d2:	68fb      	ldr	r3, [r7, #12]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	40016000 	.word	0x40016000
 80028e4:	40016020 	.word	0x40016020
 80028e8:	40016040 	.word	0x40016040
 80028ec:	40016080 	.word	0x40016080
 80028f0:	400160a0 	.word	0x400160a0
 80028f4:	400160c0 	.word	0x400160c0
 80028f8:	400160e0 	.word	0x400160e0

080028fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800290a:	e17f      	b.n	8002c0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	2101      	movs	r1, #1
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	fa01 f303 	lsl.w	r3, r1, r3
 8002918:	4013      	ands	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 8171 	beq.w	8002c06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	2b01      	cmp	r3, #1
 800292e:	d005      	beq.n	800293c <HAL_GPIO_Init+0x40>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d130      	bne.n	800299e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	2203      	movs	r2, #3
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002972:	2201      	movs	r2, #1
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	091b      	lsrs	r3, r3, #4
 8002988:	f003 0201 	and.w	r2, r3, #1
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d118      	bne.n	80029dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80029b0:	2201      	movs	r2, #1
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4013      	ands	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	08db      	lsrs	r3, r3, #3
 80029c6:	f003 0201 	and.w	r2, r3, #1
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d017      	beq.n	8002a18 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	2203      	movs	r2, #3
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4013      	ands	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d123      	bne.n	8002a6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	08da      	lsrs	r2, r3, #3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3208      	adds	r2, #8
 8002a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	220f      	movs	r2, #15
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	08da      	lsrs	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3208      	adds	r2, #8
 8002a66:	6939      	ldr	r1, [r7, #16]
 8002a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	2203      	movs	r2, #3
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0203 	and.w	r2, r3, #3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80ac 	beq.w	8002c06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aae:	4b5f      	ldr	r3, [pc, #380]	@ (8002c2c <HAL_GPIO_Init+0x330>)
 8002ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab2:	4a5e      	ldr	r2, [pc, #376]	@ (8002c2c <HAL_GPIO_Init+0x330>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002aba:	4b5c      	ldr	r3, [pc, #368]	@ (8002c2c <HAL_GPIO_Init+0x330>)
 8002abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ac6:	4a5a      	ldr	r2, [pc, #360]	@ (8002c30 <HAL_GPIO_Init+0x334>)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	089b      	lsrs	r3, r3, #2
 8002acc:	3302      	adds	r3, #2
 8002ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	220f      	movs	r2, #15
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002af0:	d025      	beq.n	8002b3e <HAL_GPIO_Init+0x242>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a4f      	ldr	r2, [pc, #316]	@ (8002c34 <HAL_GPIO_Init+0x338>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d01f      	beq.n	8002b3a <HAL_GPIO_Init+0x23e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a4e      	ldr	r2, [pc, #312]	@ (8002c38 <HAL_GPIO_Init+0x33c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d019      	beq.n	8002b36 <HAL_GPIO_Init+0x23a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a4d      	ldr	r2, [pc, #308]	@ (8002c3c <HAL_GPIO_Init+0x340>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <HAL_GPIO_Init+0x236>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a4c      	ldr	r2, [pc, #304]	@ (8002c40 <HAL_GPIO_Init+0x344>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00d      	beq.n	8002b2e <HAL_GPIO_Init+0x232>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a4b      	ldr	r2, [pc, #300]	@ (8002c44 <HAL_GPIO_Init+0x348>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d007      	beq.n	8002b2a <HAL_GPIO_Init+0x22e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a4a      	ldr	r2, [pc, #296]	@ (8002c48 <HAL_GPIO_Init+0x34c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d101      	bne.n	8002b26 <HAL_GPIO_Init+0x22a>
 8002b22:	2306      	movs	r3, #6
 8002b24:	e00c      	b.n	8002b40 <HAL_GPIO_Init+0x244>
 8002b26:	2307      	movs	r3, #7
 8002b28:	e00a      	b.n	8002b40 <HAL_GPIO_Init+0x244>
 8002b2a:	2305      	movs	r3, #5
 8002b2c:	e008      	b.n	8002b40 <HAL_GPIO_Init+0x244>
 8002b2e:	2304      	movs	r3, #4
 8002b30:	e006      	b.n	8002b40 <HAL_GPIO_Init+0x244>
 8002b32:	2303      	movs	r3, #3
 8002b34:	e004      	b.n	8002b40 <HAL_GPIO_Init+0x244>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e002      	b.n	8002b40 <HAL_GPIO_Init+0x244>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_GPIO_Init+0x244>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	f002 0203 	and.w	r2, r2, #3
 8002b46:	0092      	lsls	r2, r2, #2
 8002b48:	4093      	lsls	r3, r2
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b50:	4937      	ldr	r1, [pc, #220]	@ (8002c30 <HAL_GPIO_Init+0x334>)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	089b      	lsrs	r3, r3, #2
 8002b56:	3302      	adds	r3, #2
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c4c <HAL_GPIO_Init+0x350>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b82:	4a32      	ldr	r2, [pc, #200]	@ (8002c4c <HAL_GPIO_Init+0x350>)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b88:	4b30      	ldr	r3, [pc, #192]	@ (8002c4c <HAL_GPIO_Init+0x350>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bac:	4a27      	ldr	r2, [pc, #156]	@ (8002c4c <HAL_GPIO_Init+0x350>)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bb2:	4b26      	ldr	r3, [pc, #152]	@ (8002c4c <HAL_GPIO_Init+0x350>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bd6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c4c <HAL_GPIO_Init+0x350>)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <HAL_GPIO_Init+0x350>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	43db      	mvns	r3, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c00:	4a12      	ldr	r2, [pc, #72]	@ (8002c4c <HAL_GPIO_Init+0x350>)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	fa22 f303 	lsr.w	r3, r2, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f47f ae78 	bne.w	800290c <HAL_GPIO_Init+0x10>
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40010000 	.word	0x40010000
 8002c34:	48000400 	.word	0x48000400
 8002c38:	48000800 	.word	0x48000800
 8002c3c:	48000c00 	.word	0x48000c00
 8002c40:	48001000 	.word	0x48001000
 8002c44:	48001400 	.word	0x48001400
 8002c48:	48001800 	.word	0x48001800
 8002c4c:	40010400 	.word	0x40010400

08002c50 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002c5e:	e0cd      	b.n	8002dfc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002c60:	2201      	movs	r2, #1
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80c0 	beq.w	8002df6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002c76:	4a68      	ldr	r2, [pc, #416]	@ (8002e18 <HAL_GPIO_DeInit+0x1c8>)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	089b      	lsrs	r3, r3, #2
 8002c7c:	3302      	adds	r3, #2
 8002c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c82:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	220f      	movs	r2, #15
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4013      	ands	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c9e:	d025      	beq.n	8002cec <HAL_GPIO_DeInit+0x9c>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a5e      	ldr	r2, [pc, #376]	@ (8002e1c <HAL_GPIO_DeInit+0x1cc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d01f      	beq.n	8002ce8 <HAL_GPIO_DeInit+0x98>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a5d      	ldr	r2, [pc, #372]	@ (8002e20 <HAL_GPIO_DeInit+0x1d0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d019      	beq.n	8002ce4 <HAL_GPIO_DeInit+0x94>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a5c      	ldr	r2, [pc, #368]	@ (8002e24 <HAL_GPIO_DeInit+0x1d4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d013      	beq.n	8002ce0 <HAL_GPIO_DeInit+0x90>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a5b      	ldr	r2, [pc, #364]	@ (8002e28 <HAL_GPIO_DeInit+0x1d8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00d      	beq.n	8002cdc <HAL_GPIO_DeInit+0x8c>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a5a      	ldr	r2, [pc, #360]	@ (8002e2c <HAL_GPIO_DeInit+0x1dc>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d007      	beq.n	8002cd8 <HAL_GPIO_DeInit+0x88>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a59      	ldr	r2, [pc, #356]	@ (8002e30 <HAL_GPIO_DeInit+0x1e0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d101      	bne.n	8002cd4 <HAL_GPIO_DeInit+0x84>
 8002cd0:	2306      	movs	r3, #6
 8002cd2:	e00c      	b.n	8002cee <HAL_GPIO_DeInit+0x9e>
 8002cd4:	2307      	movs	r3, #7
 8002cd6:	e00a      	b.n	8002cee <HAL_GPIO_DeInit+0x9e>
 8002cd8:	2305      	movs	r3, #5
 8002cda:	e008      	b.n	8002cee <HAL_GPIO_DeInit+0x9e>
 8002cdc:	2304      	movs	r3, #4
 8002cde:	e006      	b.n	8002cee <HAL_GPIO_DeInit+0x9e>
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e004      	b.n	8002cee <HAL_GPIO_DeInit+0x9e>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e002      	b.n	8002cee <HAL_GPIO_DeInit+0x9e>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <HAL_GPIO_DeInit+0x9e>
 8002cec:	2300      	movs	r3, #0
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	f002 0203 	and.w	r2, r2, #3
 8002cf4:	0092      	lsls	r2, r2, #2
 8002cf6:	4093      	lsls	r3, r2
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d132      	bne.n	8002d64 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002cfe:	4b4d      	ldr	r3, [pc, #308]	@ (8002e34 <HAL_GPIO_DeInit+0x1e4>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	494b      	ldr	r1, [pc, #300]	@ (8002e34 <HAL_GPIO_DeInit+0x1e4>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002d0c:	4b49      	ldr	r3, [pc, #292]	@ (8002e34 <HAL_GPIO_DeInit+0x1e4>)
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	4947      	ldr	r1, [pc, #284]	@ (8002e34 <HAL_GPIO_DeInit+0x1e4>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002d1a:	4b46      	ldr	r3, [pc, #280]	@ (8002e34 <HAL_GPIO_DeInit+0x1e4>)
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	4944      	ldr	r1, [pc, #272]	@ (8002e34 <HAL_GPIO_DeInit+0x1e4>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002d28:	4b42      	ldr	r3, [pc, #264]	@ (8002e34 <HAL_GPIO_DeInit+0x1e4>)
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	4940      	ldr	r1, [pc, #256]	@ (8002e34 <HAL_GPIO_DeInit+0x1e4>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	220f      	movs	r2, #15
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002d46:	4a34      	ldr	r2, [pc, #208]	@ (8002e18 <HAL_GPIO_DeInit+0x1c8>)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	3302      	adds	r3, #2
 8002d4e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	43da      	mvns	r2, r3
 8002d56:	4830      	ldr	r0, [pc, #192]	@ (8002e18 <HAL_GPIO_DeInit+0x1c8>)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	089b      	lsrs	r3, r3, #2
 8002d5c:	400a      	ands	r2, r1
 8002d5e:	3302      	adds	r3, #2
 8002d60:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	2103      	movs	r1, #3
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	08da      	lsrs	r2, r3, #3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3208      	adds	r2, #8
 8002d80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	220f      	movs	r2, #15
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	08d2      	lsrs	r2, r2, #3
 8002d98:	4019      	ands	r1, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3208      	adds	r2, #8
 8002d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2103      	movs	r1, #3
 8002dac:	fa01 f303 	lsl.w	r3, r1, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	401a      	ands	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	2103      	movs	r1, #3
 8002dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	401a      	ands	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002de6:	2101      	movs	r1, #1
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	401a      	ands	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f47f af2b 	bne.w	8002c60 <HAL_GPIO_DeInit+0x10>
  }
}
 8002e0a:	bf00      	nop
 8002e0c:	bf00      	nop
 8002e0e:	371c      	adds	r7, #28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	40010000 	.word	0x40010000
 8002e1c:	48000400 	.word	0x48000400
 8002e20:	48000800 	.word	0x48000800
 8002e24:	48000c00 	.word	0x48000c00
 8002e28:	48001000 	.word	0x48001000
 8002e2c:	48001400 	.word	0x48001400
 8002e30:	48001800 	.word	0x48001800
 8002e34:	40010400 	.word	0x40010400

08002e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	807b      	strh	r3, [r7, #2]
 8002e44:	4613      	mov	r3, r2
 8002e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e48:	787b      	ldrb	r3, [r7, #1]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e54:	e002      	b.n	8002e5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e56:	887a      	ldrh	r2, [r7, #2]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e72:	4b08      	ldr	r3, [pc, #32]	@ (8002e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d006      	beq.n	8002e8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e7e:	4a05      	ldr	r2, [pc, #20]	@ (8002e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 f806 	bl	8002e98 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40010400 	.word	0x40010400

08002e98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e08d      	b.n	8002fdc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d106      	bne.n	8002eda <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7fe fcbd 	bl	8001854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2224      	movs	r2, #36	@ 0x24
 8002ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0201 	bic.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002efe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f0e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d107      	bne.n	8002f28 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	e006      	b.n	8002f36 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f34:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d108      	bne.n	8002f50 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	e007      	b.n	8002f60 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f5e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6812      	ldr	r2, [r2, #0]
 8002f6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f72:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f82:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69d9      	ldr	r1, [r3, #28]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1a      	ldr	r2, [r3, #32]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0201 	orr.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e021      	b.n	800303a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2224      	movs	r2, #36	@ 0x24
 8002ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0201 	bic.w	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fe fcc2 	bl	8001998 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af02      	add	r7, sp, #8
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	461a      	mov	r2, r3
 8003050:	460b      	mov	r3, r1
 8003052:	817b      	strh	r3, [r7, #10]
 8003054:	4613      	mov	r3, r2
 8003056:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b20      	cmp	r3, #32
 8003062:	f040 80fd 	bne.w	8003260 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_I2C_Master_Transmit+0x30>
 8003070:	2302      	movs	r3, #2
 8003072:	e0f6      	b.n	8003262 <HAL_I2C_Master_Transmit+0x21e>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800307c:	f7ff f9f0 	bl	8002460 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	2319      	movs	r3, #25
 8003088:	2201      	movs	r2, #1
 800308a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 fbea 	bl	8003868 <I2C_WaitOnFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e0e1      	b.n	8003262 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2221      	movs	r2, #33	@ 0x21
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2210      	movs	r2, #16
 80030aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	893a      	ldrh	r2, [r7, #8]
 80030be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2bff      	cmp	r3, #255	@ 0xff
 80030ce:	d906      	bls.n	80030de <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	22ff      	movs	r2, #255	@ 0xff
 80030d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80030d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	e007      	b.n	80030ee <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80030e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030ec:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d024      	beq.n	8003140 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fa:	781a      	ldrb	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312a:	b2db      	uxtb	r3, r3
 800312c:	3301      	adds	r3, #1
 800312e:	b2da      	uxtb	r2, r3
 8003130:	8979      	ldrh	r1, [r7, #10]
 8003132:	4b4e      	ldr	r3, [pc, #312]	@ (800326c <HAL_I2C_Master_Transmit+0x228>)
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fd59 	bl	8003bf0 <I2C_TransferConfig>
 800313e:	e066      	b.n	800320e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003144:	b2da      	uxtb	r2, r3
 8003146:	8979      	ldrh	r1, [r7, #10]
 8003148:	4b48      	ldr	r3, [pc, #288]	@ (800326c <HAL_I2C_Master_Transmit+0x228>)
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fd4e 	bl	8003bf0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003154:	e05b      	b.n	800320e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	6a39      	ldr	r1, [r7, #32]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fbdd 	bl	800391a <I2C_WaitOnTXISFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e07b      	b.n	8003262 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316e:	781a      	ldrb	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d034      	beq.n	800320e <HAL_I2C_Master_Transmit+0x1ca>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d130      	bne.n	800320e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	2200      	movs	r2, #0
 80031b4:	2180      	movs	r1, #128	@ 0x80
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fb56 	bl	8003868 <I2C_WaitOnFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e04d      	b.n	8003262 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2bff      	cmp	r3, #255	@ 0xff
 80031ce:	d90e      	bls.n	80031ee <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	22ff      	movs	r2, #255	@ 0xff
 80031d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	8979      	ldrh	r1, [r7, #10]
 80031de:	2300      	movs	r3, #0
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 fd02 	bl	8003bf0 <I2C_TransferConfig>
 80031ec:	e00f      	b.n	800320e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	8979      	ldrh	r1, [r7, #10]
 8003200:	2300      	movs	r3, #0
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 fcf1 	bl	8003bf0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d19e      	bne.n	8003156 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	6a39      	ldr	r1, [r7, #32]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 fbc3 	bl	80039a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e01a      	b.n	8003262 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2220      	movs	r2, #32
 8003232:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6859      	ldr	r1, [r3, #4]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	4b0c      	ldr	r3, [pc, #48]	@ (8003270 <HAL_I2C_Master_Transmit+0x22c>)
 8003240:	400b      	ands	r3, r1
 8003242:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	e000      	b.n	8003262 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003260:	2302      	movs	r3, #2
  }
}
 8003262:	4618      	mov	r0, r3
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	80002000 	.word	0x80002000
 8003270:	fe00e800 	.word	0xfe00e800

08003274 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af02      	add	r7, sp, #8
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	4608      	mov	r0, r1
 800327e:	4611      	mov	r1, r2
 8003280:	461a      	mov	r2, r3
 8003282:	4603      	mov	r3, r0
 8003284:	817b      	strh	r3, [r7, #10]
 8003286:	460b      	mov	r3, r1
 8003288:	813b      	strh	r3, [r7, #8]
 800328a:	4613      	mov	r3, r2
 800328c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b20      	cmp	r3, #32
 8003298:	f040 80f9 	bne.w	800348e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <HAL_I2C_Mem_Write+0x34>
 80032a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d105      	bne.n	80032b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0ed      	b.n	8003490 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_I2C_Mem_Write+0x4e>
 80032be:	2302      	movs	r3, #2
 80032c0:	e0e6      	b.n	8003490 <HAL_I2C_Mem_Write+0x21c>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032ca:	f7ff f8c9 	bl	8002460 <HAL_GetTick>
 80032ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	2319      	movs	r3, #25
 80032d6:	2201      	movs	r2, #1
 80032d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 fac3 	bl	8003868 <I2C_WaitOnFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0d1      	b.n	8003490 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2221      	movs	r2, #33	@ 0x21
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2240      	movs	r2, #64	@ 0x40
 80032f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a3a      	ldr	r2, [r7, #32]
 8003306:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800330c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003314:	88f8      	ldrh	r0, [r7, #6]
 8003316:	893a      	ldrh	r2, [r7, #8]
 8003318:	8979      	ldrh	r1, [r7, #10]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	4603      	mov	r3, r0
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f9d3 	bl	80036d0 <I2C_RequestMemoryWrite>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0a9      	b.n	8003490 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003340:	b29b      	uxth	r3, r3
 8003342:	2bff      	cmp	r3, #255	@ 0xff
 8003344:	d90e      	bls.n	8003364 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	22ff      	movs	r2, #255	@ 0xff
 800334a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003350:	b2da      	uxtb	r2, r3
 8003352:	8979      	ldrh	r1, [r7, #10]
 8003354:	2300      	movs	r3, #0
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 fc47 	bl	8003bf0 <I2C_TransferConfig>
 8003362:	e00f      	b.n	8003384 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003372:	b2da      	uxtb	r2, r3
 8003374:	8979      	ldrh	r1, [r7, #10]
 8003376:	2300      	movs	r3, #0
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fc36 	bl	8003bf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 fac6 	bl	800391a <I2C_WaitOnTXISFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e07b      	b.n	8003490 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339c:	781a      	ldrb	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d034      	beq.n	800343c <HAL_I2C_Mem_Write+0x1c8>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d130      	bne.n	800343c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e0:	2200      	movs	r2, #0
 80033e2:	2180      	movs	r1, #128	@ 0x80
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fa3f 	bl	8003868 <I2C_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e04d      	b.n	8003490 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2bff      	cmp	r3, #255	@ 0xff
 80033fc:	d90e      	bls.n	800341c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	22ff      	movs	r2, #255	@ 0xff
 8003402:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003408:	b2da      	uxtb	r2, r3
 800340a:	8979      	ldrh	r1, [r7, #10]
 800340c:	2300      	movs	r3, #0
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 fbeb 	bl	8003bf0 <I2C_TransferConfig>
 800341a:	e00f      	b.n	800343c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800342a:	b2da      	uxtb	r2, r3
 800342c:	8979      	ldrh	r1, [r7, #10]
 800342e:	2300      	movs	r3, #0
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 fbda 	bl	8003bf0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d19e      	bne.n	8003384 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 faac 	bl	80039a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e01a      	b.n	8003490 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2220      	movs	r2, #32
 8003460:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <HAL_I2C_Mem_Write+0x224>)
 800346e:	400b      	ands	r3, r1
 8003470:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	e000      	b.n	8003490 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800348e:	2302      	movs	r3, #2
  }
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	fe00e800 	.word	0xfe00e800

0800349c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	4608      	mov	r0, r1
 80034a6:	4611      	mov	r1, r2
 80034a8:	461a      	mov	r2, r3
 80034aa:	4603      	mov	r3, r0
 80034ac:	817b      	strh	r3, [r7, #10]
 80034ae:	460b      	mov	r3, r1
 80034b0:	813b      	strh	r3, [r7, #8]
 80034b2:	4613      	mov	r3, r2
 80034b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b20      	cmp	r3, #32
 80034c0:	f040 80fd 	bne.w	80036be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <HAL_I2C_Mem_Read+0x34>
 80034ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d105      	bne.n	80034dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034d6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0f1      	b.n	80036c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_I2C_Mem_Read+0x4e>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e0ea      	b.n	80036c0 <HAL_I2C_Mem_Read+0x224>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034f2:	f7fe ffb5 	bl	8002460 <HAL_GetTick>
 80034f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	2319      	movs	r3, #25
 80034fe:	2201      	movs	r2, #1
 8003500:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 f9af 	bl	8003868 <I2C_WaitOnFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0d5      	b.n	80036c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2222      	movs	r2, #34	@ 0x22
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2240      	movs	r2, #64	@ 0x40
 8003520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a3a      	ldr	r2, [r7, #32]
 800352e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003534:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800353c:	88f8      	ldrh	r0, [r7, #6]
 800353e:	893a      	ldrh	r2, [r7, #8]
 8003540:	8979      	ldrh	r1, [r7, #10]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	4603      	mov	r3, r0
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f913 	bl	8003778 <I2C_RequestMemoryRead>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0ad      	b.n	80036c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	2bff      	cmp	r3, #255	@ 0xff
 800356c:	d90e      	bls.n	800358c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003578:	b2da      	uxtb	r2, r3
 800357a:	8979      	ldrh	r1, [r7, #10]
 800357c:	4b52      	ldr	r3, [pc, #328]	@ (80036c8 <HAL_I2C_Mem_Read+0x22c>)
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fb33 	bl	8003bf0 <I2C_TransferConfig>
 800358a:	e00f      	b.n	80035ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359a:	b2da      	uxtb	r2, r3
 800359c:	8979      	ldrh	r1, [r7, #10]
 800359e:	4b4a      	ldr	r3, [pc, #296]	@ (80036c8 <HAL_I2C_Mem_Read+0x22c>)
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 fb22 	bl	8003bf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b2:	2200      	movs	r2, #0
 80035b4:	2104      	movs	r1, #4
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f956 	bl	8003868 <I2C_WaitOnFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e07c      	b.n	80036c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d034      	beq.n	800366c <HAL_I2C_Mem_Read+0x1d0>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003606:	2b00      	cmp	r3, #0
 8003608:	d130      	bne.n	800366c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003610:	2200      	movs	r2, #0
 8003612:	2180      	movs	r1, #128	@ 0x80
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 f927 	bl	8003868 <I2C_WaitOnFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e04d      	b.n	80036c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	2bff      	cmp	r3, #255	@ 0xff
 800362c:	d90e      	bls.n	800364c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003638:	b2da      	uxtb	r2, r3
 800363a:	8979      	ldrh	r1, [r7, #10]
 800363c:	2300      	movs	r3, #0
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fad3 	bl	8003bf0 <I2C_TransferConfig>
 800364a:	e00f      	b.n	800366c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365a:	b2da      	uxtb	r2, r3
 800365c:	8979      	ldrh	r1, [r7, #10]
 800365e:	2300      	movs	r3, #0
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 fac2 	bl	8003bf0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d19a      	bne.n	80035ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f994 	bl	80039a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e01a      	b.n	80036c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2220      	movs	r2, #32
 8003690:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <HAL_I2C_Mem_Read+0x230>)
 800369e:	400b      	ands	r3, r1
 80036a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	e000      	b.n	80036c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80036be:	2302      	movs	r3, #2
  }
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	80002400 	.word	0x80002400
 80036cc:	fe00e800 	.word	0xfe00e800

080036d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	4608      	mov	r0, r1
 80036da:	4611      	mov	r1, r2
 80036dc:	461a      	mov	r2, r3
 80036de:	4603      	mov	r3, r0
 80036e0:	817b      	strh	r3, [r7, #10]
 80036e2:	460b      	mov	r3, r1
 80036e4:	813b      	strh	r3, [r7, #8]
 80036e6:	4613      	mov	r3, r2
 80036e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	8979      	ldrh	r1, [r7, #10]
 80036f0:	4b20      	ldr	r3, [pc, #128]	@ (8003774 <I2C_RequestMemoryWrite+0xa4>)
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fa79 	bl	8003bf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	69b9      	ldr	r1, [r7, #24]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f909 	bl	800391a <I2C_WaitOnTXISFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e02c      	b.n	800376c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d105      	bne.n	8003724 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003718:	893b      	ldrh	r3, [r7, #8]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	629a      	str	r2, [r3, #40]	@ 0x28
 8003722:	e015      	b.n	8003750 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003724:	893b      	ldrh	r3, [r7, #8]
 8003726:	0a1b      	lsrs	r3, r3, #8
 8003728:	b29b      	uxth	r3, r3
 800372a:	b2da      	uxtb	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	69b9      	ldr	r1, [r7, #24]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f8ef 	bl	800391a <I2C_WaitOnTXISFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e012      	b.n	800376c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003746:	893b      	ldrh	r3, [r7, #8]
 8003748:	b2da      	uxtb	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2200      	movs	r2, #0
 8003758:	2180      	movs	r1, #128	@ 0x80
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f884 	bl	8003868 <I2C_WaitOnFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	80002000 	.word	0x80002000

08003778 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af02      	add	r7, sp, #8
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	4608      	mov	r0, r1
 8003782:	4611      	mov	r1, r2
 8003784:	461a      	mov	r2, r3
 8003786:	4603      	mov	r3, r0
 8003788:	817b      	strh	r3, [r7, #10]
 800378a:	460b      	mov	r3, r1
 800378c:	813b      	strh	r3, [r7, #8]
 800378e:	4613      	mov	r3, r2
 8003790:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	b2da      	uxtb	r2, r3
 8003796:	8979      	ldrh	r1, [r7, #10]
 8003798:	4b20      	ldr	r3, [pc, #128]	@ (800381c <I2C_RequestMemoryRead+0xa4>)
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	2300      	movs	r3, #0
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fa26 	bl	8003bf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	69b9      	ldr	r1, [r7, #24]
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f8b6 	bl	800391a <I2C_WaitOnTXISFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e02c      	b.n	8003812 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d105      	bne.n	80037ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037be:	893b      	ldrh	r3, [r7, #8]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80037c8:	e015      	b.n	80037f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80037ca:	893b      	ldrh	r3, [r7, #8]
 80037cc:	0a1b      	lsrs	r3, r3, #8
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	69b9      	ldr	r1, [r7, #24]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f89c 	bl	800391a <I2C_WaitOnTXISFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e012      	b.n	8003812 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037ec:	893b      	ldrh	r3, [r7, #8]
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2200      	movs	r2, #0
 80037fe:	2140      	movs	r1, #64	@ 0x40
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f831 	bl	8003868 <I2C_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	80002000 	.word	0x80002000

08003820 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b02      	cmp	r3, #2
 8003834:	d103      	bne.n	800383e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2200      	movs	r2, #0
 800383c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b01      	cmp	r3, #1
 800384a:	d007      	beq.n	800385c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	619a      	str	r2, [r3, #24]
  }
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	4613      	mov	r3, r2
 8003876:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003878:	e03b      	b.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	6839      	ldr	r1, [r7, #0]
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f8d6 	bl	8003a30 <I2C_IsErrorOccurred>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e041      	b.n	8003912 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003894:	d02d      	beq.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003896:	f7fe fde3 	bl	8002460 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d302      	bcc.n	80038ac <I2C_WaitOnFlagUntilTimeout+0x44>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d122      	bne.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	4013      	ands	r3, r2
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	bf0c      	ite	eq
 80038bc:	2301      	moveq	r3, #1
 80038be:	2300      	movne	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	461a      	mov	r2, r3
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d113      	bne.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ce:	f043 0220 	orr.w	r2, r3, #32
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e00f      	b.n	8003912 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699a      	ldr	r2, [r3, #24]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4013      	ands	r3, r2
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	429a      	cmp	r2, r3
 8003900:	bf0c      	ite	eq
 8003902:	2301      	moveq	r3, #1
 8003904:	2300      	movne	r3, #0
 8003906:	b2db      	uxtb	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	429a      	cmp	r2, r3
 800390e:	d0b4      	beq.n	800387a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003926:	e033      	b.n	8003990 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 f87f 	bl	8003a30 <I2C_IsErrorOccurred>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e031      	b.n	80039a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003942:	d025      	beq.n	8003990 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003944:	f7fe fd8c 	bl	8002460 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	429a      	cmp	r2, r3
 8003952:	d302      	bcc.n	800395a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d11a      	bne.n	8003990 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b02      	cmp	r3, #2
 8003966:	d013      	beq.n	8003990 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396c:	f043 0220 	orr.w	r2, r3, #32
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e007      	b.n	80039a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b02      	cmp	r3, #2
 800399c:	d1c4      	bne.n	8003928 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039b4:	e02f      	b.n	8003a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f838 	bl	8003a30 <I2C_IsErrorOccurred>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e02d      	b.n	8003a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ca:	f7fe fd49 	bl	8002460 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d302      	bcc.n	80039e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d11a      	bne.n	8003a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d013      	beq.n	8003a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f2:	f043 0220 	orr.w	r2, r3, #32
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e007      	b.n	8003a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d1c8      	bne.n	80039b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08a      	sub	sp, #40	@ 0x28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d068      	beq.n	8003b2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2210      	movs	r2, #16
 8003a62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a64:	e049      	b.n	8003afa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6c:	d045      	beq.n	8003afa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a6e:	f7fe fcf7 	bl	8002460 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d302      	bcc.n	8003a84 <I2C_IsErrorOccurred+0x54>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d13a      	bne.n	8003afa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003aa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aa6:	d121      	bne.n	8003aec <I2C_IsErrorOccurred+0xbc>
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003aae:	d01d      	beq.n	8003aec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003ab0:	7cfb      	ldrb	r3, [r7, #19]
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d01a      	beq.n	8003aec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ac4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ac6:	f7fe fccb 	bl	8002460 <HAL_GetTick>
 8003aca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003acc:	e00e      	b.n	8003aec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ace:	f7fe fcc7 	bl	8002460 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b19      	cmp	r3, #25
 8003ada:	d907      	bls.n	8003aec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	f043 0320 	orr.w	r3, r3, #32
 8003ae2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003aea:	e006      	b.n	8003afa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	d1e9      	bne.n	8003ace <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d003      	beq.n	8003b10 <I2C_IsErrorOccurred+0xe0>
 8003b08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0aa      	beq.n	8003a66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d103      	bne.n	8003b20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	f043 0304 	orr.w	r3, r3, #4
 8003b26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00b      	beq.n	8003b58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	f043 0308 	orr.w	r3, r3, #8
 8003b68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00b      	beq.n	8003b9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	f043 0302 	orr.w	r3, r3, #2
 8003b8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01c      	beq.n	8003bde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7ff fe3b 	bl	8003820 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8003bec <I2C_IsErrorOccurred+0x1bc>)
 8003bb6:	400b      	ands	r3, r1
 8003bb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003bde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3728      	adds	r7, #40	@ 0x28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	fe00e800 	.word	0xfe00e800

08003bf0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	607b      	str	r3, [r7, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	817b      	strh	r3, [r7, #10]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c02:	897b      	ldrh	r3, [r7, #10]
 8003c04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c08:	7a7b      	ldrb	r3, [r7, #9]
 8003c0a:	041b      	lsls	r3, r3, #16
 8003c0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	0d5b      	lsrs	r3, r3, #21
 8003c2a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003c2e:	4b08      	ldr	r3, [pc, #32]	@ (8003c50 <I2C_TransferConfig+0x60>)
 8003c30:	430b      	orrs	r3, r1
 8003c32:	43db      	mvns	r3, r3
 8003c34:	ea02 0103 	and.w	r1, r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	03ff63ff 	.word	0x03ff63ff

08003c54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d138      	bne.n	8003cdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e032      	b.n	8003cde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2224      	movs	r2, #36	@ 0x24
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0201 	bic.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ca6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6819      	ldr	r1, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	e000      	b.n	8003cde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cdc:	2302      	movs	r3, #2
  }
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b085      	sub	sp, #20
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b20      	cmp	r3, #32
 8003cfe:	d139      	bne.n	8003d74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e033      	b.n	8003d76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2224      	movs	r2, #36	@ 0x24
 8003d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0201 	bic.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e000      	b.n	8003d76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d74:	2302      	movs	r3, #2
  }
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b086      	sub	sp, #24
 8003d86:	af02      	add	r7, sp, #8
 8003d88:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e101      	b.n	8003f98 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d106      	bne.n	8003dae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7fd ff5d 	bl	8001c68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2203      	movs	r2, #3
 8003db2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f002 fb97 	bl	80064f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	7c1a      	ldrb	r2, [r3, #16]
 8003dce:	f88d 2000 	strb.w	r2, [sp]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dd6:	f002 fb60 	bl	800649a <USB_CoreInit>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0d5      	b.n	8003f98 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2100      	movs	r1, #0
 8003df2:	4618      	mov	r0, r3
 8003df4:	f002 fb8f 	bl	8006516 <USB_SetCurrentMode>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d005      	beq.n	8003e0a <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2202      	movs	r2, #2
 8003e02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e0c6      	b.n	8003f98 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	73fb      	strb	r3, [r7, #15]
 8003e0e:	e04a      	b.n	8003ea6 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e10:	7bfa      	ldrb	r2, [r7, #15]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	3315      	adds	r3, #21
 8003e20:	2201      	movs	r2, #1
 8003e22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e24:	7bfa      	ldrb	r2, [r7, #15]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	3314      	adds	r3, #20
 8003e34:	7bfa      	ldrb	r2, [r7, #15]
 8003e36:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e38:	7bfa      	ldrb	r2, [r7, #15]
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	b298      	uxth	r0, r3
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	332e      	adds	r3, #46	@ 0x2e
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e50:	7bfa      	ldrb	r2, [r7, #15]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	3318      	adds	r3, #24
 8003e60:	2200      	movs	r2, #0
 8003e62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e64:	7bfa      	ldrb	r2, [r7, #15]
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	331c      	adds	r3, #28
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e78:	7bfa      	ldrb	r2, [r7, #15]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	3320      	adds	r3, #32
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e8c:	7bfa      	ldrb	r2, [r7, #15]
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	3324      	adds	r3, #36	@ 0x24
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	73fb      	strb	r3, [r7, #15]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	791b      	ldrb	r3, [r3, #4]
 8003eaa:	7bfa      	ldrb	r2, [r7, #15]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d3af      	bcc.n	8003e10 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	73fb      	strb	r3, [r7, #15]
 8003eb4:	e044      	b.n	8003f40 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003eb6:	7bfa      	ldrb	r2, [r7, #15]
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003ec8:	2200      	movs	r2, #0
 8003eca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ecc:	7bfa      	ldrb	r2, [r7, #15]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003ede:	7bfa      	ldrb	r2, [r7, #15]
 8003ee0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ee2:	7bfa      	ldrb	r2, [r7, #15]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ef8:	7bfa      	ldrb	r2, [r7, #15]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f0e:	7bfa      	ldrb	r2, [r7, #15]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f24:	7bfa      	ldrb	r2, [r7, #15]
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	791b      	ldrb	r3, [r3, #4]
 8003f44:	7bfa      	ldrb	r2, [r7, #15]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d3b5      	bcc.n	8003eb6 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	7c1a      	ldrb	r2, [r3, #16]
 8003f52:	f88d 2000 	strb.w	r2, [sp]
 8003f56:	3304      	adds	r3, #4
 8003f58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f5a:	f002 fb29 	bl	80065b0 <USB_DevInit>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e013      	b.n	8003f98 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	7b1b      	ldrb	r3, [r3, #12]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d102      	bne.n	8003f8c <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f80a 	bl	8003fa0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f002 fcce 	bl	8006932 <USB_DevDisconnect>

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fd2:	f043 0303 	orr.w	r3, r3, #3
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fec:	4b05      	ldr	r3, [pc, #20]	@ (8004004 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a04      	ldr	r2, [pc, #16]	@ (8004004 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ff2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ff6:	6013      	str	r3, [r2, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40007000 	.word	0x40007000

08004008 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800400c:	4b04      	ldr	r3, [pc, #16]	@ (8004020 <HAL_PWREx_GetVoltageRange+0x18>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004014:	4618      	mov	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40007000 	.word	0x40007000

08004024 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004032:	d130      	bne.n	8004096 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004034:	4b23      	ldr	r3, [pc, #140]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800403c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004040:	d038      	beq.n	80040b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004042:	4b20      	ldr	r3, [pc, #128]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800404a:	4a1e      	ldr	r2, [pc, #120]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800404c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004050:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004052:	4b1d      	ldr	r3, [pc, #116]	@ (80040c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2232      	movs	r2, #50	@ 0x32
 8004058:	fb02 f303 	mul.w	r3, r2, r3
 800405c:	4a1b      	ldr	r2, [pc, #108]	@ (80040cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	0c9b      	lsrs	r3, r3, #18
 8004064:	3301      	adds	r3, #1
 8004066:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004068:	e002      	b.n	8004070 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3b01      	subs	r3, #1
 800406e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004070:	4b14      	ldr	r3, [pc, #80]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800407c:	d102      	bne.n	8004084 <HAL_PWREx_ControlVoltageScaling+0x60>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1f2      	bne.n	800406a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004084:	4b0f      	ldr	r3, [pc, #60]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800408c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004090:	d110      	bne.n	80040b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e00f      	b.n	80040b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004096:	4b0b      	ldr	r3, [pc, #44]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800409e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040a2:	d007      	beq.n	80040b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040a4:	4b07      	ldr	r3, [pc, #28]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040ac:	4a05      	ldr	r2, [pc, #20]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40007000 	.word	0x40007000
 80040c8:	20000000 	.word	0x20000000
 80040cc:	431bde83 	.word	0x431bde83

080040d0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80040d4:	4b05      	ldr	r3, [pc, #20]	@ (80040ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4a04      	ldr	r2, [pc, #16]	@ (80040ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80040da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040de:	6053      	str	r3, [r2, #4]
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40007000 	.word	0x40007000

080040f0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af02      	add	r7, sp, #8
 80040f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80040f8:	f7fe f9b2 	bl	8002460 <HAL_GetTick>
 80040fc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e063      	b.n	80041d0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10b      	bne.n	800412c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7fd fc77 	bl	8001a10 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004122:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f858 	bl	80041dc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	3b01      	subs	r3, #1
 800413c:	021a      	lsls	r2, r3, #8
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	2120      	movs	r1, #32
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f850 	bl	80041f8 <QSPI_WaitFlagStateUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800415c:	7afb      	ldrb	r3, [r7, #11]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d131      	bne.n	80041c6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800416c:	f023 0310 	bic.w	r3, r3, #16
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6852      	ldr	r2, [r2, #4]
 8004174:	0611      	lsls	r1, r2, #24
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	68d2      	ldr	r2, [r2, #12]
 800417a:	4311      	orrs	r1, r2
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6812      	ldr	r2, [r2, #0]
 8004180:	430b      	orrs	r3, r1
 8004182:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	4b13      	ldr	r3, [pc, #76]	@ (80041d8 <HAL_QSPI_Init+0xe8>)
 800418c:	4013      	ands	r3, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6912      	ldr	r2, [r2, #16]
 8004192:	0411      	lsls	r1, r2, #16
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6952      	ldr	r2, [r2, #20]
 8004198:	4311      	orrs	r1, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6992      	ldr	r2, [r2, #24]
 800419e:	4311      	orrs	r1, r2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0201 	orr.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80041ce:	7afb      	ldrb	r3, [r7, #11]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	ffe0f8fe 	.word	0xffe0f8fe

080041dc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	4613      	mov	r3, r2
 8004206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004208:	e01a      	b.n	8004240 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004210:	d016      	beq.n	8004240 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004212:	f7fe f925 	bl	8002460 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	429a      	cmp	r2, r3
 8004220:	d302      	bcc.n	8004228 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10b      	bne.n	8004240 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2204      	movs	r2, #4
 800422c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004234:	f043 0201 	orr.w	r2, r3, #1
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e00e      	b.n	800425e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	4013      	ands	r3, r2
 800424a:	2b00      	cmp	r3, #0
 800424c:	bf14      	ite	ne
 800424e:	2301      	movne	r3, #1
 8004250:	2300      	moveq	r3, #0
 8004252:	b2db      	uxtb	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	429a      	cmp	r2, r3
 800425a:	d1d6      	bne.n	800420a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e3ca      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800427a:	4b97      	ldr	r3, [pc, #604]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
 8004282:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004284:	4b94      	ldr	r3, [pc, #592]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 80e4 	beq.w	8004464 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d007      	beq.n	80042b2 <HAL_RCC_OscConfig+0x4a>
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	2b0c      	cmp	r3, #12
 80042a6:	f040 808b 	bne.w	80043c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	f040 8087 	bne.w	80043c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042b2:	4b89      	ldr	r3, [pc, #548]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <HAL_RCC_OscConfig+0x62>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e3a2      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1a      	ldr	r2, [r3, #32]
 80042ce:	4b82      	ldr	r3, [pc, #520]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d004      	beq.n	80042e4 <HAL_RCC_OscConfig+0x7c>
 80042da:	4b7f      	ldr	r3, [pc, #508]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042e2:	e005      	b.n	80042f0 <HAL_RCC_OscConfig+0x88>
 80042e4:	4b7c      	ldr	r3, [pc, #496]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80042e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042ea:	091b      	lsrs	r3, r3, #4
 80042ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d223      	bcs.n	800433c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 fd55 	bl	8004da8 <RCC_SetFlashLatencyFromMSIRange>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e383      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004308:	4b73      	ldr	r3, [pc, #460]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a72      	ldr	r2, [pc, #456]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 800430e:	f043 0308 	orr.w	r3, r3, #8
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	4b70      	ldr	r3, [pc, #448]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	496d      	ldr	r1, [pc, #436]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004326:	4b6c      	ldr	r3, [pc, #432]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	4968      	ldr	r1, [pc, #416]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004336:	4313      	orrs	r3, r2
 8004338:	604b      	str	r3, [r1, #4]
 800433a:	e025      	b.n	8004388 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800433c:	4b66      	ldr	r3, [pc, #408]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a65      	ldr	r2, [pc, #404]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004342:	f043 0308 	orr.w	r3, r3, #8
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	4b63      	ldr	r3, [pc, #396]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	4960      	ldr	r1, [pc, #384]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004356:	4313      	orrs	r3, r2
 8004358:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800435a:	4b5f      	ldr	r3, [pc, #380]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	021b      	lsls	r3, r3, #8
 8004368:	495b      	ldr	r1, [pc, #364]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 800436a:	4313      	orrs	r3, r2
 800436c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d109      	bne.n	8004388 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fd15 	bl	8004da8 <RCC_SetFlashLatencyFromMSIRange>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e343      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004388:	f000 fc4a 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 800438c:	4602      	mov	r2, r0
 800438e:	4b52      	ldr	r3, [pc, #328]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	091b      	lsrs	r3, r3, #4
 8004394:	f003 030f 	and.w	r3, r3, #15
 8004398:	4950      	ldr	r1, [pc, #320]	@ (80044dc <HAL_RCC_OscConfig+0x274>)
 800439a:	5ccb      	ldrb	r3, [r1, r3]
 800439c:	f003 031f 	and.w	r3, r3, #31
 80043a0:	fa22 f303 	lsr.w	r3, r2, r3
 80043a4:	4a4e      	ldr	r2, [pc, #312]	@ (80044e0 <HAL_RCC_OscConfig+0x278>)
 80043a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043a8:	4b4e      	ldr	r3, [pc, #312]	@ (80044e4 <HAL_RCC_OscConfig+0x27c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fe f807 	bl	80023c0 <HAL_InitTick>
 80043b2:	4603      	mov	r3, r0
 80043b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d052      	beq.n	8004462 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	e327      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d032      	beq.n	800442e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043c8:	4b43      	ldr	r3, [pc, #268]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a42      	ldr	r2, [pc, #264]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043d4:	f7fe f844 	bl	8002460 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043dc:	f7fe f840 	bl	8002460 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e310      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043ee:	4b3a      	ldr	r3, [pc, #232]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043fa:	4b37      	ldr	r3, [pc, #220]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a36      	ldr	r2, [pc, #216]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004400:	f043 0308 	orr.w	r3, r3, #8
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	4b34      	ldr	r3, [pc, #208]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	4931      	ldr	r1, [pc, #196]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004414:	4313      	orrs	r3, r2
 8004416:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004418:	4b2f      	ldr	r3, [pc, #188]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	492c      	ldr	r1, [pc, #176]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004428:	4313      	orrs	r3, r2
 800442a:	604b      	str	r3, [r1, #4]
 800442c:	e01a      	b.n	8004464 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800442e:	4b2a      	ldr	r3, [pc, #168]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a29      	ldr	r2, [pc, #164]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800443a:	f7fe f811 	bl	8002460 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004442:	f7fe f80d 	bl	8002460 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e2dd      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004454:	4b20      	ldr	r3, [pc, #128]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f0      	bne.n	8004442 <HAL_RCC_OscConfig+0x1da>
 8004460:	e000      	b.n	8004464 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004462:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d074      	beq.n	800455a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b08      	cmp	r3, #8
 8004474:	d005      	beq.n	8004482 <HAL_RCC_OscConfig+0x21a>
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	2b0c      	cmp	r3, #12
 800447a:	d10e      	bne.n	800449a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b03      	cmp	r3, #3
 8004480:	d10b      	bne.n	800449a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004482:	4b15      	ldr	r3, [pc, #84]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d064      	beq.n	8004558 <HAL_RCC_OscConfig+0x2f0>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d160      	bne.n	8004558 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e2ba      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044a2:	d106      	bne.n	80044b2 <HAL_RCC_OscConfig+0x24a>
 80044a4:	4b0c      	ldr	r3, [pc, #48]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a0b      	ldr	r2, [pc, #44]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80044aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	e026      	b.n	8004500 <HAL_RCC_OscConfig+0x298>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044ba:	d115      	bne.n	80044e8 <HAL_RCC_OscConfig+0x280>
 80044bc:	4b06      	ldr	r3, [pc, #24]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a05      	ldr	r2, [pc, #20]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80044c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	4b03      	ldr	r3, [pc, #12]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a02      	ldr	r2, [pc, #8]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80044ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	e014      	b.n	8004500 <HAL_RCC_OscConfig+0x298>
 80044d6:	bf00      	nop
 80044d8:	40021000 	.word	0x40021000
 80044dc:	080079dc 	.word	0x080079dc
 80044e0:	20000000 	.word	0x20000000
 80044e4:	20000014 	.word	0x20000014
 80044e8:	4ba0      	ldr	r3, [pc, #640]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a9f      	ldr	r2, [pc, #636]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80044ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044f2:	6013      	str	r3, [r2, #0]
 80044f4:	4b9d      	ldr	r3, [pc, #628]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a9c      	ldr	r2, [pc, #624]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80044fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d013      	beq.n	8004530 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004508:	f7fd ffaa 	bl	8002460 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004510:	f7fd ffa6 	bl	8002460 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b64      	cmp	r3, #100	@ 0x64
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e276      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004522:	4b92      	ldr	r3, [pc, #584]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f0      	beq.n	8004510 <HAL_RCC_OscConfig+0x2a8>
 800452e:	e014      	b.n	800455a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fd ff96 	bl	8002460 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004538:	f7fd ff92 	bl	8002460 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b64      	cmp	r3, #100	@ 0x64
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e262      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800454a:	4b88      	ldr	r3, [pc, #544]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f0      	bne.n	8004538 <HAL_RCC_OscConfig+0x2d0>
 8004556:	e000      	b.n	800455a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d060      	beq.n	8004628 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b04      	cmp	r3, #4
 800456a:	d005      	beq.n	8004578 <HAL_RCC_OscConfig+0x310>
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b0c      	cmp	r3, #12
 8004570:	d119      	bne.n	80045a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2b02      	cmp	r3, #2
 8004576:	d116      	bne.n	80045a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004578:	4b7c      	ldr	r3, [pc, #496]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <HAL_RCC_OscConfig+0x328>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e23f      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004590:	4b76      	ldr	r3, [pc, #472]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	061b      	lsls	r3, r3, #24
 800459e:	4973      	ldr	r1, [pc, #460]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045a4:	e040      	b.n	8004628 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d023      	beq.n	80045f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045ae:	4b6f      	ldr	r3, [pc, #444]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a6e      	ldr	r2, [pc, #440]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80045b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ba:	f7fd ff51 	bl	8002460 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c2:	f7fd ff4d 	bl	8002460 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e21d      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045d4:	4b65      	ldr	r3, [pc, #404]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e0:	4b62      	ldr	r3, [pc, #392]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	061b      	lsls	r3, r3, #24
 80045ee:	495f      	ldr	r1, [pc, #380]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	604b      	str	r3, [r1, #4]
 80045f4:	e018      	b.n	8004628 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045f6:	4b5d      	ldr	r3, [pc, #372]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a5c      	ldr	r2, [pc, #368]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80045fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004602:	f7fd ff2d 	bl	8002460 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460a:	f7fd ff29 	bl	8002460 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e1f9      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800461c:	4b53      	ldr	r3, [pc, #332]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f0      	bne.n	800460a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b00      	cmp	r3, #0
 8004632:	d03c      	beq.n	80046ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d01c      	beq.n	8004676 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800463c:	4b4b      	ldr	r3, [pc, #300]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 800463e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004642:	4a4a      	ldr	r2, [pc, #296]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464c:	f7fd ff08 	bl	8002460 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004654:	f7fd ff04 	bl	8002460 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e1d4      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004666:	4b41      	ldr	r3, [pc, #260]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 8004668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0ef      	beq.n	8004654 <HAL_RCC_OscConfig+0x3ec>
 8004674:	e01b      	b.n	80046ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004676:	4b3d      	ldr	r3, [pc, #244]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 8004678:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800467c:	4a3b      	ldr	r2, [pc, #236]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 800467e:	f023 0301 	bic.w	r3, r3, #1
 8004682:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004686:	f7fd feeb 	bl	8002460 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800468c:	e008      	b.n	80046a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800468e:	f7fd fee7 	bl	8002460 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e1b7      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046a0:	4b32      	ldr	r3, [pc, #200]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80046a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1ef      	bne.n	800468e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 80a6 	beq.w	8004808 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046bc:	2300      	movs	r3, #0
 80046be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046c0:	4b2a      	ldr	r3, [pc, #168]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80046c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10d      	bne.n	80046e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046cc:	4b27      	ldr	r3, [pc, #156]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80046ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d0:	4a26      	ldr	r2, [pc, #152]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80046d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80046d8:	4b24      	ldr	r3, [pc, #144]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80046da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046e4:	2301      	movs	r3, #1
 80046e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046e8:	4b21      	ldr	r3, [pc, #132]	@ (8004770 <HAL_RCC_OscConfig+0x508>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d118      	bne.n	8004726 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004770 <HAL_RCC_OscConfig+0x508>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004770 <HAL_RCC_OscConfig+0x508>)
 80046fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004700:	f7fd feae 	bl	8002460 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004708:	f7fd feaa 	bl	8002460 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e17a      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800471a:	4b15      	ldr	r3, [pc, #84]	@ (8004770 <HAL_RCC_OscConfig+0x508>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d108      	bne.n	8004740 <HAL_RCC_OscConfig+0x4d8>
 800472e:	4b0f      	ldr	r3, [pc, #60]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004734:	4a0d      	ldr	r2, [pc, #52]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800473e:	e029      	b.n	8004794 <HAL_RCC_OscConfig+0x52c>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b05      	cmp	r3, #5
 8004746:	d115      	bne.n	8004774 <HAL_RCC_OscConfig+0x50c>
 8004748:	4b08      	ldr	r3, [pc, #32]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474e:	4a07      	ldr	r2, [pc, #28]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 8004750:	f043 0304 	orr.w	r3, r3, #4
 8004754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004758:	4b04      	ldr	r3, [pc, #16]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800475e:	4a03      	ldr	r2, [pc, #12]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 8004760:	f043 0301 	orr.w	r3, r3, #1
 8004764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004768:	e014      	b.n	8004794 <HAL_RCC_OscConfig+0x52c>
 800476a:	bf00      	nop
 800476c:	40021000 	.word	0x40021000
 8004770:	40007000 	.word	0x40007000
 8004774:	4b9c      	ldr	r3, [pc, #624]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477a:	4a9b      	ldr	r2, [pc, #620]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 800477c:	f023 0301 	bic.w	r3, r3, #1
 8004780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004784:	4b98      	ldr	r3, [pc, #608]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478a:	4a97      	ldr	r2, [pc, #604]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 800478c:	f023 0304 	bic.w	r3, r3, #4
 8004790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d016      	beq.n	80047ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479c:	f7fd fe60 	bl	8002460 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047a2:	e00a      	b.n	80047ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a4:	f7fd fe5c 	bl	8002460 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e12a      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ba:	4b8b      	ldr	r3, [pc, #556]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80047bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0ed      	beq.n	80047a4 <HAL_RCC_OscConfig+0x53c>
 80047c8:	e015      	b.n	80047f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ca:	f7fd fe49 	bl	8002460 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047d0:	e00a      	b.n	80047e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d2:	f7fd fe45 	bl	8002460 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e113      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047e8:	4b7f      	ldr	r3, [pc, #508]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1ed      	bne.n	80047d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047f6:	7ffb      	ldrb	r3, [r7, #31]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d105      	bne.n	8004808 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047fc:	4b7a      	ldr	r3, [pc, #488]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80047fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004800:	4a79      	ldr	r2, [pc, #484]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 8004802:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004806:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80fe 	beq.w	8004a0e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004816:	2b02      	cmp	r3, #2
 8004818:	f040 80d0 	bne.w	80049bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800481c:	4b72      	ldr	r3, [pc, #456]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f003 0203 	and.w	r2, r3, #3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482c:	429a      	cmp	r2, r3
 800482e:	d130      	bne.n	8004892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483a:	3b01      	subs	r3, #1
 800483c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800483e:	429a      	cmp	r2, r3
 8004840:	d127      	bne.n	8004892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800484c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800484e:	429a      	cmp	r2, r3
 8004850:	d11f      	bne.n	8004892 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800485c:	2a07      	cmp	r2, #7
 800485e:	bf14      	ite	ne
 8004860:	2201      	movne	r2, #1
 8004862:	2200      	moveq	r2, #0
 8004864:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004866:	4293      	cmp	r3, r2
 8004868:	d113      	bne.n	8004892 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004874:	085b      	lsrs	r3, r3, #1
 8004876:	3b01      	subs	r3, #1
 8004878:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800487a:	429a      	cmp	r2, r3
 800487c:	d109      	bne.n	8004892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004888:	085b      	lsrs	r3, r3, #1
 800488a:	3b01      	subs	r3, #1
 800488c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800488e:	429a      	cmp	r2, r3
 8004890:	d06e      	beq.n	8004970 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b0c      	cmp	r3, #12
 8004896:	d069      	beq.n	800496c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004898:	4b53      	ldr	r3, [pc, #332]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d105      	bne.n	80048b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80048a4:	4b50      	ldr	r3, [pc, #320]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0ad      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048b4:	4b4c      	ldr	r3, [pc, #304]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a4b      	ldr	r2, [pc, #300]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80048ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048c0:	f7fd fdce 	bl	8002460 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c8:	f7fd fdca 	bl	8002460 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e09a      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048da:	4b43      	ldr	r3, [pc, #268]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048e6:	4b40      	ldr	r3, [pc, #256]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	4b40      	ldr	r3, [pc, #256]	@ (80049ec <HAL_RCC_OscConfig+0x784>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80048f6:	3a01      	subs	r2, #1
 80048f8:	0112      	lsls	r2, r2, #4
 80048fa:	4311      	orrs	r1, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004900:	0212      	lsls	r2, r2, #8
 8004902:	4311      	orrs	r1, r2
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004908:	0852      	lsrs	r2, r2, #1
 800490a:	3a01      	subs	r2, #1
 800490c:	0552      	lsls	r2, r2, #21
 800490e:	4311      	orrs	r1, r2
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004914:	0852      	lsrs	r2, r2, #1
 8004916:	3a01      	subs	r2, #1
 8004918:	0652      	lsls	r2, r2, #25
 800491a:	4311      	orrs	r1, r2
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004920:	0912      	lsrs	r2, r2, #4
 8004922:	0452      	lsls	r2, r2, #17
 8004924:	430a      	orrs	r2, r1
 8004926:	4930      	ldr	r1, [pc, #192]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 8004928:	4313      	orrs	r3, r2
 800492a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800492c:	4b2e      	ldr	r3, [pc, #184]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a2d      	ldr	r2, [pc, #180]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 8004932:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004936:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004938:	4b2b      	ldr	r3, [pc, #172]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	4a2a      	ldr	r2, [pc, #168]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 800493e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004942:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004944:	f7fd fd8c 	bl	8002460 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800494c:	f7fd fd88 	bl	8002460 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e058      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800495e:	4b22      	ldr	r3, [pc, #136]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f0      	beq.n	800494c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800496a:	e050      	b.n	8004a0e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e04f      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004970:	4b1d      	ldr	r3, [pc, #116]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d148      	bne.n	8004a0e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800497c:	4b1a      	ldr	r3, [pc, #104]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a19      	ldr	r2, [pc, #100]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 8004982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004986:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004988:	4b17      	ldr	r3, [pc, #92]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4a16      	ldr	r2, [pc, #88]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 800498e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004992:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004994:	f7fd fd64 	bl	8002460 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499c:	f7fd fd60 	bl	8002460 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e030      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ae:	4b0e      	ldr	r3, [pc, #56]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0f0      	beq.n	800499c <HAL_RCC_OscConfig+0x734>
 80049ba:	e028      	b.n	8004a0e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2b0c      	cmp	r3, #12
 80049c0:	d023      	beq.n	8004a0a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c2:	4b09      	ldr	r3, [pc, #36]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a08      	ldr	r2, [pc, #32]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80049c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ce:	f7fd fd47 	bl	8002460 <HAL_GetTick>
 80049d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049d4:	e00c      	b.n	80049f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d6:	f7fd fd43 	bl	8002460 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d905      	bls.n	80049f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e013      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
 80049e8:	40021000 	.word	0x40021000
 80049ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f0:	4b09      	ldr	r3, [pc, #36]	@ (8004a18 <HAL_RCC_OscConfig+0x7b0>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1ec      	bne.n	80049d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80049fc:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <HAL_RCC_OscConfig+0x7b0>)
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	4905      	ldr	r1, [pc, #20]	@ (8004a18 <HAL_RCC_OscConfig+0x7b0>)
 8004a02:	4b06      	ldr	r3, [pc, #24]	@ (8004a1c <HAL_RCC_OscConfig+0x7b4>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	60cb      	str	r3, [r1, #12]
 8004a08:	e001      	b.n	8004a0e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3720      	adds	r7, #32
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	feeefffc 	.word	0xfeeefffc

08004a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0e7      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a34:	4b75      	ldr	r3, [pc, #468]	@ (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d910      	bls.n	8004a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a42:	4b72      	ldr	r3, [pc, #456]	@ (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 0207 	bic.w	r2, r3, #7
 8004a4a:	4970      	ldr	r1, [pc, #448]	@ (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b6e      	ldr	r3, [pc, #440]	@ (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0cf      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d010      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	4b66      	ldr	r3, [pc, #408]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d908      	bls.n	8004a92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a80:	4b63      	ldr	r3, [pc, #396]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	4960      	ldr	r1, [pc, #384]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d04c      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d107      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa6:	4b5a      	ldr	r3, [pc, #360]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d121      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e0a6      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d107      	bne.n	8004ace <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004abe:	4b54      	ldr	r3, [pc, #336]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d115      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e09a      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e08e      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e086      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004af6:	4b46      	ldr	r3, [pc, #280]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f023 0203 	bic.w	r2, r3, #3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4943      	ldr	r1, [pc, #268]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b08:	f7fd fcaa 	bl	8002460 <HAL_GetTick>
 8004b0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b10:	f7fd fca6 	bl	8002460 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e06e      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b26:	4b3a      	ldr	r3, [pc, #232]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 020c 	and.w	r2, r3, #12
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d1eb      	bne.n	8004b10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d010      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	4b31      	ldr	r3, [pc, #196]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d208      	bcs.n	8004b66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b54:	4b2e      	ldr	r3, [pc, #184]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	492b      	ldr	r1, [pc, #172]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b66:	4b29      	ldr	r3, [pc, #164]	@ (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d210      	bcs.n	8004b96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b74:	4b25      	ldr	r3, [pc, #148]	@ (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f023 0207 	bic.w	r2, r3, #7
 8004b7c:	4923      	ldr	r1, [pc, #140]	@ (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b84:	4b21      	ldr	r3, [pc, #132]	@ (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d001      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e036      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d008      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	4918      	ldr	r1, [pc, #96]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d009      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bc0:	4b13      	ldr	r3, [pc, #76]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	4910      	ldr	r1, [pc, #64]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bd4:	f000 f824 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	4b0d      	ldr	r3, [pc, #52]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	091b      	lsrs	r3, r3, #4
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	490b      	ldr	r1, [pc, #44]	@ (8004c14 <HAL_RCC_ClockConfig+0x1f4>)
 8004be6:	5ccb      	ldrb	r3, [r1, r3]
 8004be8:	f003 031f 	and.w	r3, r3, #31
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf0:	4a09      	ldr	r2, [pc, #36]	@ (8004c18 <HAL_RCC_ClockConfig+0x1f8>)
 8004bf2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bf4:	4b09      	ldr	r3, [pc, #36]	@ (8004c1c <HAL_RCC_ClockConfig+0x1fc>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fd fbe1 	bl	80023c0 <HAL_InitTick>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c02:	7afb      	ldrb	r3, [r7, #11]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40022000 	.word	0x40022000
 8004c10:	40021000 	.word	0x40021000
 8004c14:	080079dc 	.word	0x080079dc
 8004c18:	20000000 	.word	0x20000000
 8004c1c:	20000014 	.word	0x20000014

08004c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b089      	sub	sp, #36	@ 0x24
 8004c24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
 8004c36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c38:	4b3b      	ldr	r3, [pc, #236]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f003 0303 	and.w	r3, r3, #3
 8004c40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_RCC_GetSysClockFreq+0x34>
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	2b0c      	cmp	r3, #12
 8004c4c:	d121      	bne.n	8004c92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d11e      	bne.n	8004c92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c54:	4b34      	ldr	r3, [pc, #208]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d107      	bne.n	8004c70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c60:	4b31      	ldr	r3, [pc, #196]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c66:	0a1b      	lsrs	r3, r3, #8
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	61fb      	str	r3, [r7, #28]
 8004c6e:	e005      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c70:	4b2d      	ldr	r3, [pc, #180]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	091b      	lsrs	r3, r3, #4
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8004d2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10d      	bne.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c90:	e00a      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d102      	bne.n	8004c9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c98:	4b25      	ldr	r3, [pc, #148]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c9a:	61bb      	str	r3, [r7, #24]
 8004c9c:	e004      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d101      	bne.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ca4:	4b23      	ldr	r3, [pc, #140]	@ (8004d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ca6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	2b0c      	cmp	r3, #12
 8004cac:	d134      	bne.n	8004d18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cae:	4b1e      	ldr	r3, [pc, #120]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d003      	beq.n	8004cc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d003      	beq.n	8004ccc <HAL_RCC_GetSysClockFreq+0xac>
 8004cc4:	e005      	b.n	8004cd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cc8:	617b      	str	r3, [r7, #20]
      break;
 8004cca:	e005      	b.n	8004cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ccc:	4b19      	ldr	r3, [pc, #100]	@ (8004d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cce:	617b      	str	r3, [r7, #20]
      break;
 8004cd0:	e002      	b.n	8004cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	617b      	str	r3, [r7, #20]
      break;
 8004cd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cd8:	4b13      	ldr	r3, [pc, #76]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ce6:	4b10      	ldr	r3, [pc, #64]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	0a1b      	lsrs	r3, r3, #8
 8004cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	fb03 f202 	mul.w	r2, r3, r2
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	0e5b      	lsrs	r3, r3, #25
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	3301      	adds	r3, #1
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d18:	69bb      	ldr	r3, [r7, #24]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3724      	adds	r7, #36	@ 0x24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	080079f4 	.word	0x080079f4
 8004d30:	00f42400 	.word	0x00f42400
 8004d34:	007a1200 	.word	0x007a1200

08004d38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d3c:	4b03      	ldr	r3, [pc, #12]	@ (8004d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	20000000 	.word	0x20000000

08004d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d54:	f7ff fff0 	bl	8004d38 <HAL_RCC_GetHCLKFreq>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	4b06      	ldr	r3, [pc, #24]	@ (8004d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	0a1b      	lsrs	r3, r3, #8
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	4904      	ldr	r1, [pc, #16]	@ (8004d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d66:	5ccb      	ldrb	r3, [r1, r3]
 8004d68:	f003 031f 	and.w	r3, r3, #31
 8004d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40021000 	.word	0x40021000
 8004d78:	080079ec 	.word	0x080079ec

08004d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d80:	f7ff ffda 	bl	8004d38 <HAL_RCC_GetHCLKFreq>
 8004d84:	4602      	mov	r2, r0
 8004d86:	4b06      	ldr	r3, [pc, #24]	@ (8004da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	0adb      	lsrs	r3, r3, #11
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	4904      	ldr	r1, [pc, #16]	@ (8004da4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d92:	5ccb      	ldrb	r3, [r1, r3]
 8004d94:	f003 031f 	and.w	r3, r3, #31
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40021000 	.word	0x40021000
 8004da4:	080079ec 	.word	0x080079ec

08004da8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004db4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004dc0:	f7ff f922 	bl	8004008 <HAL_PWREx_GetVoltageRange>
 8004dc4:	6178      	str	r0, [r7, #20]
 8004dc6:	e014      	b.n	8004df2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dc8:	4b25      	ldr	r3, [pc, #148]	@ (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dcc:	4a24      	ldr	r2, [pc, #144]	@ (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dd4:	4b22      	ldr	r3, [pc, #136]	@ (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004de0:	f7ff f912 	bl	8004008 <HAL_PWREx_GetVoltageRange>
 8004de4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004de6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dea:	4a1d      	ldr	r2, [pc, #116]	@ (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004df0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004df8:	d10b      	bne.n	8004e12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b80      	cmp	r3, #128	@ 0x80
 8004dfe:	d919      	bls.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2ba0      	cmp	r3, #160	@ 0xa0
 8004e04:	d902      	bls.n	8004e0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e06:	2302      	movs	r3, #2
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	e013      	b.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	e010      	b.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b80      	cmp	r3, #128	@ 0x80
 8004e16:	d902      	bls.n	8004e1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e18:	2303      	movs	r3, #3
 8004e1a:	613b      	str	r3, [r7, #16]
 8004e1c:	e00a      	b.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b80      	cmp	r3, #128	@ 0x80
 8004e22:	d102      	bne.n	8004e2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e24:	2302      	movs	r3, #2
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	e004      	b.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b70      	cmp	r3, #112	@ 0x70
 8004e2e:	d101      	bne.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e30:	2301      	movs	r3, #1
 8004e32:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e34:	4b0b      	ldr	r3, [pc, #44]	@ (8004e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f023 0207 	bic.w	r2, r3, #7
 8004e3c:	4909      	ldr	r1, [pc, #36]	@ (8004e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e44:	4b07      	ldr	r3, [pc, #28]	@ (8004e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d001      	beq.n	8004e56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40021000 	.word	0x40021000
 8004e64:	40022000 	.word	0x40022000

08004e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e70:	2300      	movs	r3, #0
 8004e72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e74:	2300      	movs	r3, #0
 8004e76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d041      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e88:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e8c:	d02a      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e8e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e92:	d824      	bhi.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e98:	d008      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e9e:	d81e      	bhi.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ea4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ea8:	d010      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004eaa:	e018      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004eac:	4b86      	ldr	r3, [pc, #536]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	4a85      	ldr	r2, [pc, #532]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eb6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004eb8:	e015      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 facb 	bl	800545c <RCCEx_PLLSAI1_Config>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004eca:	e00c      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3320      	adds	r3, #32
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fbb6 	bl	8005644 <RCCEx_PLLSAI2_Config>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004edc:	e003      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	74fb      	strb	r3, [r7, #19]
      break;
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ee6:	7cfb      	ldrb	r3, [r7, #19]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10b      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004eec:	4b76      	ldr	r3, [pc, #472]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004efa:	4973      	ldr	r1, [pc, #460]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004f02:	e001      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d041      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f18:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f1c:	d02a      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f1e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f22:	d824      	bhi.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f28:	d008      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f2e:	d81e      	bhi.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00a      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f38:	d010      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f3a:	e018      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f3c:	4b62      	ldr	r3, [pc, #392]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a61      	ldr	r2, [pc, #388]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f48:	e015      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	2100      	movs	r1, #0
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fa83 	bl	800545c <RCCEx_PLLSAI1_Config>
 8004f56:	4603      	mov	r3, r0
 8004f58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f5a:	e00c      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3320      	adds	r3, #32
 8004f60:	2100      	movs	r1, #0
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fb6e 	bl	8005644 <RCCEx_PLLSAI2_Config>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f6c:	e003      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	74fb      	strb	r3, [r7, #19]
      break;
 8004f72:	e000      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f76:	7cfb      	ldrb	r3, [r7, #19]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10b      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f7c:	4b52      	ldr	r3, [pc, #328]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f82:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f8a:	494f      	ldr	r1, [pc, #316]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004f92:	e001      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f94:	7cfb      	ldrb	r3, [r7, #19]
 8004f96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 80a0 	beq.w	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004faa:	4b47      	ldr	r3, [pc, #284]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00d      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fc0:	4b41      	ldr	r3, [pc, #260]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc4:	4a40      	ldr	r2, [pc, #256]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fca:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fcc:	4b3e      	ldr	r3, [pc, #248]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a3a      	ldr	r2, [pc, #232]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fe8:	f7fd fa3a 	bl	8002460 <HAL_GetTick>
 8004fec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fee:	e009      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff0:	f7fd fa36 	bl	8002460 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d902      	bls.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	74fb      	strb	r3, [r7, #19]
        break;
 8005002:	e005      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005004:	4b31      	ldr	r3, [pc, #196]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0ef      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005010:	7cfb      	ldrb	r3, [r7, #19]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d15c      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005016:	4b2c      	ldr	r3, [pc, #176]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005020:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d01f      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	429a      	cmp	r2, r3
 8005032:	d019      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005034:	4b24      	ldr	r3, [pc, #144]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800503a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800503e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005040:	4b21      	ldr	r3, [pc, #132]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005046:	4a20      	ldr	r2, [pc, #128]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800504c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005050:	4b1d      	ldr	r3, [pc, #116]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005056:	4a1c      	ldr	r2, [pc, #112]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005058:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800505c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005060:	4a19      	ldr	r2, [pc, #100]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d016      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005072:	f7fd f9f5 	bl	8002460 <HAL_GetTick>
 8005076:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005078:	e00b      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507a:	f7fd f9f1 	bl	8002460 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005088:	4293      	cmp	r3, r2
 800508a:	d902      	bls.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	74fb      	strb	r3, [r7, #19]
            break;
 8005090:	e006      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005092:	4b0d      	ldr	r3, [pc, #52]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0ec      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80050a0:	7cfb      	ldrb	r3, [r7, #19]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10c      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050a6:	4b08      	ldr	r3, [pc, #32]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050b6:	4904      	ldr	r1, [pc, #16]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80050be:	e009      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050c0:	7cfb      	ldrb	r3, [r7, #19]
 80050c2:	74bb      	strb	r3, [r7, #18]
 80050c4:	e006      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80050c6:	bf00      	nop
 80050c8:	40021000 	.word	0x40021000
 80050cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d0:	7cfb      	ldrb	r3, [r7, #19]
 80050d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050d4:	7c7b      	ldrb	r3, [r7, #17]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d105      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050da:	4b9e      	ldr	r3, [pc, #632]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050de:	4a9d      	ldr	r2, [pc, #628]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050f2:	4b98      	ldr	r3, [pc, #608]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f8:	f023 0203 	bic.w	r2, r3, #3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005100:	4994      	ldr	r1, [pc, #592]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005114:	4b8f      	ldr	r3, [pc, #572]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800511a:	f023 020c 	bic.w	r2, r3, #12
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005122:	498c      	ldr	r1, [pc, #560]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005136:	4b87      	ldr	r3, [pc, #540]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800513c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005144:	4983      	ldr	r1, [pc, #524]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005146:	4313      	orrs	r3, r2
 8005148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00a      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005158:	4b7e      	ldr	r3, [pc, #504]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800515e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005166:	497b      	ldr	r1, [pc, #492]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0310 	and.w	r3, r3, #16
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800517a:	4b76      	ldr	r3, [pc, #472]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800517c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005180:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005188:	4972      	ldr	r1, [pc, #456]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800519c:	4b6d      	ldr	r3, [pc, #436]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051aa:	496a      	ldr	r1, [pc, #424]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051be:	4b65      	ldr	r3, [pc, #404]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051cc:	4961      	ldr	r1, [pc, #388]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051e0:	4b5c      	ldr	r3, [pc, #368]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ee:	4959      	ldr	r1, [pc, #356]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005202:	4b54      	ldr	r3, [pc, #336]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005208:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005210:	4950      	ldr	r1, [pc, #320]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005224:	4b4b      	ldr	r3, [pc, #300]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005232:	4948      	ldr	r1, [pc, #288]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005246:	4b43      	ldr	r3, [pc, #268]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005254:	493f      	ldr	r1, [pc, #252]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d028      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005268:	4b3a      	ldr	r3, [pc, #232]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800526e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005276:	4937      	ldr	r1, [pc, #220]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005282:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005286:	d106      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005288:	4b32      	ldr	r3, [pc, #200]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	4a31      	ldr	r2, [pc, #196]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005292:	60d3      	str	r3, [r2, #12]
 8005294:	e011      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800529a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800529e:	d10c      	bne.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3304      	adds	r3, #4
 80052a4:	2101      	movs	r1, #1
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f8d8 	bl	800545c <RCCEx_PLLSAI1_Config>
 80052ac:	4603      	mov	r3, r0
 80052ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052b0:	7cfb      	ldrb	r3, [r7, #19]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80052b6:	7cfb      	ldrb	r3, [r7, #19]
 80052b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d028      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052c6:	4b23      	ldr	r3, [pc, #140]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d4:	491f      	ldr	r1, [pc, #124]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052e4:	d106      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052f0:	60d3      	str	r3, [r2, #12]
 80052f2:	e011      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052fc:	d10c      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3304      	adds	r3, #4
 8005302:	2101      	movs	r1, #1
 8005304:	4618      	mov	r0, r3
 8005306:	f000 f8a9 	bl	800545c <RCCEx_PLLSAI1_Config>
 800530a:	4603      	mov	r3, r0
 800530c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800530e:	7cfb      	ldrb	r3, [r7, #19]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005314:	7cfb      	ldrb	r3, [r7, #19]
 8005316:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d02b      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005324:	4b0b      	ldr	r3, [pc, #44]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800532a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005332:	4908      	ldr	r1, [pc, #32]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800533e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005342:	d109      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005344:	4b03      	ldr	r3, [pc, #12]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	4a02      	ldr	r2, [pc, #8]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800534e:	60d3      	str	r3, [r2, #12]
 8005350:	e014      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005352:	bf00      	nop
 8005354:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800535c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005360:	d10c      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3304      	adds	r3, #4
 8005366:	2101      	movs	r1, #1
 8005368:	4618      	mov	r0, r3
 800536a:	f000 f877 	bl	800545c <RCCEx_PLLSAI1_Config>
 800536e:	4603      	mov	r3, r0
 8005370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005372:	7cfb      	ldrb	r3, [r7, #19]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005378:	7cfb      	ldrb	r3, [r7, #19]
 800537a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d02f      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005388:	4b2b      	ldr	r3, [pc, #172]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005396:	4928      	ldr	r1, [pc, #160]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053a6:	d10d      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3304      	adds	r3, #4
 80053ac:	2102      	movs	r1, #2
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 f854 	bl	800545c <RCCEx_PLLSAI1_Config>
 80053b4:	4603      	mov	r3, r0
 80053b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053b8:	7cfb      	ldrb	r3, [r7, #19]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d014      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053be:	7cfb      	ldrb	r3, [r7, #19]
 80053c0:	74bb      	strb	r3, [r7, #18]
 80053c2:	e011      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3320      	adds	r3, #32
 80053d2:	2102      	movs	r1, #2
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 f935 	bl	8005644 <RCCEx_PLLSAI2_Config>
 80053da:	4603      	mov	r3, r0
 80053dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053de:	7cfb      	ldrb	r3, [r7, #19]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053e4:	7cfb      	ldrb	r3, [r7, #19]
 80053e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00a      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053f4:	4b10      	ldr	r3, [pc, #64]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005402:	490d      	ldr	r1, [pc, #52]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005404:	4313      	orrs	r3, r2
 8005406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00b      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005416:	4b08      	ldr	r3, [pc, #32]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800541c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005426:	4904      	ldr	r1, [pc, #16]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800542e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40021000 	.word	0x40021000

0800543c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005440:	4b05      	ldr	r3, [pc, #20]	@ (8005458 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a04      	ldr	r2, [pc, #16]	@ (8005458 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005446:	f043 0304 	orr.w	r3, r3, #4
 800544a:	6013      	str	r3, [r2, #0]
}
 800544c:	bf00      	nop
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40021000 	.word	0x40021000

0800545c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005466:	2300      	movs	r3, #0
 8005468:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800546a:	4b75      	ldr	r3, [pc, #468]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d018      	beq.n	80054a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005476:	4b72      	ldr	r3, [pc, #456]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f003 0203 	and.w	r2, r3, #3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d10d      	bne.n	80054a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
       ||
 800548a:	2b00      	cmp	r3, #0
 800548c:	d009      	beq.n	80054a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800548e:	4b6c      	ldr	r3, [pc, #432]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	091b      	lsrs	r3, r3, #4
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
       ||
 800549e:	429a      	cmp	r2, r3
 80054a0:	d047      	beq.n	8005532 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	73fb      	strb	r3, [r7, #15]
 80054a6:	e044      	b.n	8005532 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d018      	beq.n	80054e2 <RCCEx_PLLSAI1_Config+0x86>
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	d825      	bhi.n	8005500 <RCCEx_PLLSAI1_Config+0xa4>
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d002      	beq.n	80054be <RCCEx_PLLSAI1_Config+0x62>
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d009      	beq.n	80054d0 <RCCEx_PLLSAI1_Config+0x74>
 80054bc:	e020      	b.n	8005500 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054be:	4b60      	ldr	r3, [pc, #384]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d11d      	bne.n	8005506 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ce:	e01a      	b.n	8005506 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054d0:	4b5b      	ldr	r3, [pc, #364]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d116      	bne.n	800550a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054e0:	e013      	b.n	800550a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054e2:	4b57      	ldr	r3, [pc, #348]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10f      	bne.n	800550e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054ee:	4b54      	ldr	r3, [pc, #336]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d109      	bne.n	800550e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054fe:	e006      	b.n	800550e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	73fb      	strb	r3, [r7, #15]
      break;
 8005504:	e004      	b.n	8005510 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005506:	bf00      	nop
 8005508:	e002      	b.n	8005510 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800550a:	bf00      	nop
 800550c:	e000      	b.n	8005510 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800550e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005510:	7bfb      	ldrb	r3, [r7, #15]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10d      	bne.n	8005532 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005516:	4b4a      	ldr	r3, [pc, #296]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6819      	ldr	r1, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	3b01      	subs	r3, #1
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	430b      	orrs	r3, r1
 800552c:	4944      	ldr	r1, [pc, #272]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 800552e:	4313      	orrs	r3, r2
 8005530:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d17d      	bne.n	8005634 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005538:	4b41      	ldr	r3, [pc, #260]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a40      	ldr	r2, [pc, #256]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 800553e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005542:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005544:	f7fc ff8c 	bl	8002460 <HAL_GetTick>
 8005548:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800554a:	e009      	b.n	8005560 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800554c:	f7fc ff88 	bl	8002460 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d902      	bls.n	8005560 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	73fb      	strb	r3, [r7, #15]
        break;
 800555e:	e005      	b.n	800556c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005560:	4b37      	ldr	r3, [pc, #220]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1ef      	bne.n	800554c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800556c:	7bfb      	ldrb	r3, [r7, #15]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d160      	bne.n	8005634 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d111      	bne.n	800559c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005578:	4b31      	ldr	r3, [pc, #196]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005580:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6892      	ldr	r2, [r2, #8]
 8005588:	0211      	lsls	r1, r2, #8
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	68d2      	ldr	r2, [r2, #12]
 800558e:	0912      	lsrs	r2, r2, #4
 8005590:	0452      	lsls	r2, r2, #17
 8005592:	430a      	orrs	r2, r1
 8005594:	492a      	ldr	r1, [pc, #168]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005596:	4313      	orrs	r3, r2
 8005598:	610b      	str	r3, [r1, #16]
 800559a:	e027      	b.n	80055ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d112      	bne.n	80055c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055a2:	4b27      	ldr	r3, [pc, #156]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80055aa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6892      	ldr	r2, [r2, #8]
 80055b2:	0211      	lsls	r1, r2, #8
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6912      	ldr	r2, [r2, #16]
 80055b8:	0852      	lsrs	r2, r2, #1
 80055ba:	3a01      	subs	r2, #1
 80055bc:	0552      	lsls	r2, r2, #21
 80055be:	430a      	orrs	r2, r1
 80055c0:	491f      	ldr	r1, [pc, #124]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	610b      	str	r3, [r1, #16]
 80055c6:	e011      	b.n	80055ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80055d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6892      	ldr	r2, [r2, #8]
 80055d8:	0211      	lsls	r1, r2, #8
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6952      	ldr	r2, [r2, #20]
 80055de:	0852      	lsrs	r2, r2, #1
 80055e0:	3a01      	subs	r2, #1
 80055e2:	0652      	lsls	r2, r2, #25
 80055e4:	430a      	orrs	r2, r1
 80055e6:	4916      	ldr	r1, [pc, #88]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055ec:	4b14      	ldr	r3, [pc, #80]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a13      	ldr	r2, [pc, #76]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f8:	f7fc ff32 	bl	8002460 <HAL_GetTick>
 80055fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055fe:	e009      	b.n	8005614 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005600:	f7fc ff2e 	bl	8002460 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d902      	bls.n	8005614 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	73fb      	strb	r3, [r7, #15]
          break;
 8005612:	e005      	b.n	8005620 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005614:	4b0a      	ldr	r3, [pc, #40]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0ef      	beq.n	8005600 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005620:	7bfb      	ldrb	r3, [r7, #15]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005626:	4b06      	ldr	r3, [pc, #24]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005628:	691a      	ldr	r2, [r3, #16]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	4904      	ldr	r1, [pc, #16]	@ (8005640 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005630:	4313      	orrs	r3, r2
 8005632:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005634:	7bfb      	ldrb	r3, [r7, #15]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	40021000 	.word	0x40021000

08005644 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800564e:	2300      	movs	r3, #0
 8005650:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005652:	4b6a      	ldr	r3, [pc, #424]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d018      	beq.n	8005690 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800565e:	4b67      	ldr	r3, [pc, #412]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f003 0203 	and.w	r2, r3, #3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d10d      	bne.n	800568a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
       ||
 8005672:	2b00      	cmp	r3, #0
 8005674:	d009      	beq.n	800568a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005676:	4b61      	ldr	r3, [pc, #388]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	091b      	lsrs	r3, r3, #4
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
       ||
 8005686:	429a      	cmp	r2, r3
 8005688:	d047      	beq.n	800571a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	73fb      	strb	r3, [r7, #15]
 800568e:	e044      	b.n	800571a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b03      	cmp	r3, #3
 8005696:	d018      	beq.n	80056ca <RCCEx_PLLSAI2_Config+0x86>
 8005698:	2b03      	cmp	r3, #3
 800569a:	d825      	bhi.n	80056e8 <RCCEx_PLLSAI2_Config+0xa4>
 800569c:	2b01      	cmp	r3, #1
 800569e:	d002      	beq.n	80056a6 <RCCEx_PLLSAI2_Config+0x62>
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d009      	beq.n	80056b8 <RCCEx_PLLSAI2_Config+0x74>
 80056a4:	e020      	b.n	80056e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056a6:	4b55      	ldr	r3, [pc, #340]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d11d      	bne.n	80056ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056b6:	e01a      	b.n	80056ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056b8:	4b50      	ldr	r3, [pc, #320]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d116      	bne.n	80056f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056c8:	e013      	b.n	80056f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056ca:	4b4c      	ldr	r3, [pc, #304]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10f      	bne.n	80056f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056d6:	4b49      	ldr	r3, [pc, #292]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056e6:	e006      	b.n	80056f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
      break;
 80056ec:	e004      	b.n	80056f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056ee:	bf00      	nop
 80056f0:	e002      	b.n	80056f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056f2:	bf00      	nop
 80056f4:	e000      	b.n	80056f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10d      	bne.n	800571a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056fe:	4b3f      	ldr	r3, [pc, #252]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6819      	ldr	r1, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	3b01      	subs	r3, #1
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	430b      	orrs	r3, r1
 8005714:	4939      	ldr	r1, [pc, #228]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005716:	4313      	orrs	r3, r2
 8005718:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800571a:	7bfb      	ldrb	r3, [r7, #15]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d167      	bne.n	80057f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005720:	4b36      	ldr	r3, [pc, #216]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a35      	ldr	r2, [pc, #212]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005726:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800572a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800572c:	f7fc fe98 	bl	8002460 <HAL_GetTick>
 8005730:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005732:	e009      	b.n	8005748 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005734:	f7fc fe94 	bl	8002460 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d902      	bls.n	8005748 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	73fb      	strb	r3, [r7, #15]
        break;
 8005746:	e005      	b.n	8005754 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005748:	4b2c      	ldr	r3, [pc, #176]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1ef      	bne.n	8005734 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005754:	7bfb      	ldrb	r3, [r7, #15]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d14a      	bne.n	80057f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d111      	bne.n	8005784 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005760:	4b26      	ldr	r3, [pc, #152]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005768:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6892      	ldr	r2, [r2, #8]
 8005770:	0211      	lsls	r1, r2, #8
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	68d2      	ldr	r2, [r2, #12]
 8005776:	0912      	lsrs	r2, r2, #4
 8005778:	0452      	lsls	r2, r2, #17
 800577a:	430a      	orrs	r2, r1
 800577c:	491f      	ldr	r1, [pc, #124]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800577e:	4313      	orrs	r3, r2
 8005780:	614b      	str	r3, [r1, #20]
 8005782:	e011      	b.n	80057a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005784:	4b1d      	ldr	r3, [pc, #116]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800578c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6892      	ldr	r2, [r2, #8]
 8005794:	0211      	lsls	r1, r2, #8
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6912      	ldr	r2, [r2, #16]
 800579a:	0852      	lsrs	r2, r2, #1
 800579c:	3a01      	subs	r2, #1
 800579e:	0652      	lsls	r2, r2, #25
 80057a0:	430a      	orrs	r2, r1
 80057a2:	4916      	ldr	r1, [pc, #88]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057a8:	4b14      	ldr	r3, [pc, #80]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a13      	ldr	r2, [pc, #76]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b4:	f7fc fe54 	bl	8002460 <HAL_GetTick>
 80057b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057ba:	e009      	b.n	80057d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057bc:	f7fc fe50 	bl	8002460 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d902      	bls.n	80057d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	73fb      	strb	r3, [r7, #15]
          break;
 80057ce:	e005      	b.n	80057dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057d0:	4b0a      	ldr	r3, [pc, #40]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0ef      	beq.n	80057bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d106      	bne.n	80057f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057e2:	4b06      	ldr	r3, [pc, #24]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	4904      	ldr	r1, [pc, #16]	@ (80057fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40021000 	.word	0x40021000

08005800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e095      	b.n	800593e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005816:	2b00      	cmp	r3, #0
 8005818:	d108      	bne.n	800582c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005822:	d009      	beq.n	8005838 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	61da      	str	r2, [r3, #28]
 800582a:	e005      	b.n	8005838 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d106      	bne.n	8005858 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fc f920 	bl	8001a98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800586e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005878:	d902      	bls.n	8005880 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800587a:	2300      	movs	r3, #0
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	e002      	b.n	8005886 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005880:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005884:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800588e:	d007      	beq.n	80058a0 <HAL_SPI_Init+0xa0>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005898:	d002      	beq.n	80058a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e2:	ea42 0103 	orr.w	r1, r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	0c1b      	lsrs	r3, r3, #16
 80058fc:	f003 0204 	and.w	r2, r3, #4
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005904:	f003 0310 	and.w	r3, r3, #16
 8005908:	431a      	orrs	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800591c:	ea42 0103 	orr.w	r1, r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b082      	sub	sp, #8
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e040      	b.n	80059da <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800595c:	2b00      	cmp	r3, #0
 800595e:	d106      	bne.n	800596e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7fc f8d9 	bl	8001b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2224      	movs	r2, #36	@ 0x24
 8005972:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0201 	bic.w	r2, r2, #1
 8005982:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fb69 	bl	8006064 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f8ae 	bl	8005af4 <UART_SetConfig>
 8005998:	4603      	mov	r3, r0
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e01b      	b.n	80059da <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0201 	orr.w	r2, r2, #1
 80059d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fbe8 	bl	80061a8 <UART_CheckIdleState>
 80059d8:	4603      	mov	r3, r0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b08a      	sub	sp, #40	@ 0x28
 80059e6:	af02      	add	r7, sp, #8
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	603b      	str	r3, [r7, #0]
 80059ee:	4613      	mov	r3, r2
 80059f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d177      	bne.n	8005aea <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_UART_Transmit+0x24>
 8005a00:	88fb      	ldrh	r3, [r7, #6]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e070      	b.n	8005aec <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2221      	movs	r2, #33	@ 0x21
 8005a16:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a18:	f7fc fd22 	bl	8002460 <HAL_GetTick>
 8005a1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	88fa      	ldrh	r2, [r7, #6]
 8005a22:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	88fa      	ldrh	r2, [r7, #6]
 8005a2a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a36:	d108      	bne.n	8005a4a <HAL_UART_Transmit+0x68>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d104      	bne.n	8005a4a <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	61bb      	str	r3, [r7, #24]
 8005a48:	e003      	b.n	8005a52 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a52:	e02f      	b.n	8005ab4 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2180      	movs	r1, #128	@ 0x80
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 fc4a 	bl	80062f8 <UART_WaitOnFlagUntilTimeout>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d004      	beq.n	8005a74 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e03b      	b.n	8005aec <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10b      	bne.n	8005a92 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	881a      	ldrh	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a86:	b292      	uxth	r2, r2
 8005a88:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	3302      	adds	r3, #2
 8005a8e:	61bb      	str	r3, [r7, #24]
 8005a90:	e007      	b.n	8005aa2 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	781a      	ldrb	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1c9      	bne.n	8005a54 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	2140      	movs	r1, #64	@ 0x40
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 fc14 	bl	80062f8 <UART_WaitOnFlagUntilTimeout>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d004      	beq.n	8005ae0 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e005      	b.n	8005aec <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	e000      	b.n	8005aec <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005aea:	2302      	movs	r3, #2
  }
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3720      	adds	r7, #32
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005af8:	b08a      	sub	sp, #40	@ 0x28
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	431a      	orrs	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4ba4      	ldr	r3, [pc, #656]	@ (8005db4 <UART_SetConfig+0x2c0>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	6812      	ldr	r2, [r2, #0]
 8005b2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b2c:	430b      	orrs	r3, r1
 8005b2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a99      	ldr	r2, [pc, #612]	@ (8005db8 <UART_SetConfig+0x2c4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d004      	beq.n	8005b60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b70:	430a      	orrs	r2, r1
 8005b72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a90      	ldr	r2, [pc, #576]	@ (8005dbc <UART_SetConfig+0x2c8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d126      	bne.n	8005bcc <UART_SetConfig+0xd8>
 8005b7e:	4b90      	ldr	r3, [pc, #576]	@ (8005dc0 <UART_SetConfig+0x2cc>)
 8005b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b84:	f003 0303 	and.w	r3, r3, #3
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d81b      	bhi.n	8005bc4 <UART_SetConfig+0xd0>
 8005b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b94 <UART_SetConfig+0xa0>)
 8005b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b92:	bf00      	nop
 8005b94:	08005ba5 	.word	0x08005ba5
 8005b98:	08005bb5 	.word	0x08005bb5
 8005b9c:	08005bad 	.word	0x08005bad
 8005ba0:	08005bbd 	.word	0x08005bbd
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005baa:	e116      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005bac:	2302      	movs	r3, #2
 8005bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bb2:	e112      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005bb4:	2304      	movs	r3, #4
 8005bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bba:	e10e      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005bbc:	2308      	movs	r3, #8
 8005bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bc2:	e10a      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bca:	e106      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a7c      	ldr	r2, [pc, #496]	@ (8005dc4 <UART_SetConfig+0x2d0>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d138      	bne.n	8005c48 <UART_SetConfig+0x154>
 8005bd6:	4b7a      	ldr	r3, [pc, #488]	@ (8005dc0 <UART_SetConfig+0x2cc>)
 8005bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bdc:	f003 030c 	and.w	r3, r3, #12
 8005be0:	2b0c      	cmp	r3, #12
 8005be2:	d82d      	bhi.n	8005c40 <UART_SetConfig+0x14c>
 8005be4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bec <UART_SetConfig+0xf8>)
 8005be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bea:	bf00      	nop
 8005bec:	08005c21 	.word	0x08005c21
 8005bf0:	08005c41 	.word	0x08005c41
 8005bf4:	08005c41 	.word	0x08005c41
 8005bf8:	08005c41 	.word	0x08005c41
 8005bfc:	08005c31 	.word	0x08005c31
 8005c00:	08005c41 	.word	0x08005c41
 8005c04:	08005c41 	.word	0x08005c41
 8005c08:	08005c41 	.word	0x08005c41
 8005c0c:	08005c29 	.word	0x08005c29
 8005c10:	08005c41 	.word	0x08005c41
 8005c14:	08005c41 	.word	0x08005c41
 8005c18:	08005c41 	.word	0x08005c41
 8005c1c:	08005c39 	.word	0x08005c39
 8005c20:	2300      	movs	r3, #0
 8005c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c26:	e0d8      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c2e:	e0d4      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005c30:	2304      	movs	r3, #4
 8005c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c36:	e0d0      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005c38:	2308      	movs	r3, #8
 8005c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c3e:	e0cc      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005c40:	2310      	movs	r3, #16
 8005c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c46:	e0c8      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a5e      	ldr	r2, [pc, #376]	@ (8005dc8 <UART_SetConfig+0x2d4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d125      	bne.n	8005c9e <UART_SetConfig+0x1aa>
 8005c52:	4b5b      	ldr	r3, [pc, #364]	@ (8005dc0 <UART_SetConfig+0x2cc>)
 8005c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005c5c:	2b30      	cmp	r3, #48	@ 0x30
 8005c5e:	d016      	beq.n	8005c8e <UART_SetConfig+0x19a>
 8005c60:	2b30      	cmp	r3, #48	@ 0x30
 8005c62:	d818      	bhi.n	8005c96 <UART_SetConfig+0x1a2>
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d00a      	beq.n	8005c7e <UART_SetConfig+0x18a>
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d814      	bhi.n	8005c96 <UART_SetConfig+0x1a2>
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <UART_SetConfig+0x182>
 8005c70:	2b10      	cmp	r3, #16
 8005c72:	d008      	beq.n	8005c86 <UART_SetConfig+0x192>
 8005c74:	e00f      	b.n	8005c96 <UART_SetConfig+0x1a2>
 8005c76:	2300      	movs	r3, #0
 8005c78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c7c:	e0ad      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c84:	e0a9      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005c86:	2304      	movs	r3, #4
 8005c88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c8c:	e0a5      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005c8e:	2308      	movs	r3, #8
 8005c90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c94:	e0a1      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005c96:	2310      	movs	r3, #16
 8005c98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c9c:	e09d      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a4a      	ldr	r2, [pc, #296]	@ (8005dcc <UART_SetConfig+0x2d8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d125      	bne.n	8005cf4 <UART_SetConfig+0x200>
 8005ca8:	4b45      	ldr	r3, [pc, #276]	@ (8005dc0 <UART_SetConfig+0x2cc>)
 8005caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005cb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cb4:	d016      	beq.n	8005ce4 <UART_SetConfig+0x1f0>
 8005cb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cb8:	d818      	bhi.n	8005cec <UART_SetConfig+0x1f8>
 8005cba:	2b80      	cmp	r3, #128	@ 0x80
 8005cbc:	d00a      	beq.n	8005cd4 <UART_SetConfig+0x1e0>
 8005cbe:	2b80      	cmp	r3, #128	@ 0x80
 8005cc0:	d814      	bhi.n	8005cec <UART_SetConfig+0x1f8>
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <UART_SetConfig+0x1d8>
 8005cc6:	2b40      	cmp	r3, #64	@ 0x40
 8005cc8:	d008      	beq.n	8005cdc <UART_SetConfig+0x1e8>
 8005cca:	e00f      	b.n	8005cec <UART_SetConfig+0x1f8>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cd2:	e082      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cda:	e07e      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005cdc:	2304      	movs	r3, #4
 8005cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ce2:	e07a      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005ce4:	2308      	movs	r3, #8
 8005ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cea:	e076      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005cec:	2310      	movs	r3, #16
 8005cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cf2:	e072      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a35      	ldr	r2, [pc, #212]	@ (8005dd0 <UART_SetConfig+0x2dc>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d12a      	bne.n	8005d54 <UART_SetConfig+0x260>
 8005cfe:	4b30      	ldr	r3, [pc, #192]	@ (8005dc0 <UART_SetConfig+0x2cc>)
 8005d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d0c:	d01a      	beq.n	8005d44 <UART_SetConfig+0x250>
 8005d0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d12:	d81b      	bhi.n	8005d4c <UART_SetConfig+0x258>
 8005d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d18:	d00c      	beq.n	8005d34 <UART_SetConfig+0x240>
 8005d1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d1e:	d815      	bhi.n	8005d4c <UART_SetConfig+0x258>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <UART_SetConfig+0x238>
 8005d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d28:	d008      	beq.n	8005d3c <UART_SetConfig+0x248>
 8005d2a:	e00f      	b.n	8005d4c <UART_SetConfig+0x258>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d32:	e052      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005d34:	2302      	movs	r3, #2
 8005d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d3a:	e04e      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005d3c:	2304      	movs	r3, #4
 8005d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d42:	e04a      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005d44:	2308      	movs	r3, #8
 8005d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d4a:	e046      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005d4c:	2310      	movs	r3, #16
 8005d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d52:	e042      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a17      	ldr	r2, [pc, #92]	@ (8005db8 <UART_SetConfig+0x2c4>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d13a      	bne.n	8005dd4 <UART_SetConfig+0x2e0>
 8005d5e:	4b18      	ldr	r3, [pc, #96]	@ (8005dc0 <UART_SetConfig+0x2cc>)
 8005d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005d68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d6c:	d01a      	beq.n	8005da4 <UART_SetConfig+0x2b0>
 8005d6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d72:	d81b      	bhi.n	8005dac <UART_SetConfig+0x2b8>
 8005d74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d78:	d00c      	beq.n	8005d94 <UART_SetConfig+0x2a0>
 8005d7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d7e:	d815      	bhi.n	8005dac <UART_SetConfig+0x2b8>
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <UART_SetConfig+0x298>
 8005d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d88:	d008      	beq.n	8005d9c <UART_SetConfig+0x2a8>
 8005d8a:	e00f      	b.n	8005dac <UART_SetConfig+0x2b8>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d92:	e022      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005d94:	2302      	movs	r3, #2
 8005d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d9a:	e01e      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005d9c:	2304      	movs	r3, #4
 8005d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da2:	e01a      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005da4:	2308      	movs	r3, #8
 8005da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005daa:	e016      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005dac:	2310      	movs	r3, #16
 8005dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005db2:	e012      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005db4:	efff69f3 	.word	0xefff69f3
 8005db8:	40008000 	.word	0x40008000
 8005dbc:	40013800 	.word	0x40013800
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	40004400 	.word	0x40004400
 8005dc8:	40004800 	.word	0x40004800
 8005dcc:	40004c00 	.word	0x40004c00
 8005dd0:	40005000 	.word	0x40005000
 8005dd4:	2310      	movs	r3, #16
 8005dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a9f      	ldr	r2, [pc, #636]	@ (800605c <UART_SetConfig+0x568>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d17a      	bne.n	8005eda <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005de4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d824      	bhi.n	8005e36 <UART_SetConfig+0x342>
 8005dec:	a201      	add	r2, pc, #4	@ (adr r2, 8005df4 <UART_SetConfig+0x300>)
 8005dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df2:	bf00      	nop
 8005df4:	08005e19 	.word	0x08005e19
 8005df8:	08005e37 	.word	0x08005e37
 8005dfc:	08005e21 	.word	0x08005e21
 8005e00:	08005e37 	.word	0x08005e37
 8005e04:	08005e27 	.word	0x08005e27
 8005e08:	08005e37 	.word	0x08005e37
 8005e0c:	08005e37 	.word	0x08005e37
 8005e10:	08005e37 	.word	0x08005e37
 8005e14:	08005e2f 	.word	0x08005e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e18:	f7fe ff9a 	bl	8004d50 <HAL_RCC_GetPCLK1Freq>
 8005e1c:	61f8      	str	r0, [r7, #28]
        break;
 8005e1e:	e010      	b.n	8005e42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e20:	4b8f      	ldr	r3, [pc, #572]	@ (8006060 <UART_SetConfig+0x56c>)
 8005e22:	61fb      	str	r3, [r7, #28]
        break;
 8005e24:	e00d      	b.n	8005e42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e26:	f7fe fefb 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 8005e2a:	61f8      	str	r0, [r7, #28]
        break;
 8005e2c:	e009      	b.n	8005e42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e32:	61fb      	str	r3, [r7, #28]
        break;
 8005e34:	e005      	b.n	8005e42 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 80fb 	beq.w	8006040 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	4413      	add	r3, r2
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d305      	bcc.n	8005e66 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d903      	bls.n	8005e6e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e6c:	e0e8      	b.n	8006040 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	2200      	movs	r2, #0
 8005e72:	461c      	mov	r4, r3
 8005e74:	4615      	mov	r5, r2
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	022b      	lsls	r3, r5, #8
 8005e80:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005e84:	0222      	lsls	r2, r4, #8
 8005e86:	68f9      	ldr	r1, [r7, #12]
 8005e88:	6849      	ldr	r1, [r1, #4]
 8005e8a:	0849      	lsrs	r1, r1, #1
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	4688      	mov	r8, r1
 8005e90:	4681      	mov	r9, r0
 8005e92:	eb12 0a08 	adds.w	sl, r2, r8
 8005e96:	eb43 0b09 	adc.w	fp, r3, r9
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	603b      	str	r3, [r7, #0]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ea8:	4650      	mov	r0, sl
 8005eaa:	4659      	mov	r1, fp
 8005eac:	f7fa fda6 	bl	80009fc <__aeabi_uldivmod>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ebe:	d308      	bcc.n	8005ed2 <UART_SetConfig+0x3de>
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ec6:	d204      	bcs.n	8005ed2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	69ba      	ldr	r2, [r7, #24]
 8005ece:	60da      	str	r2, [r3, #12]
 8005ed0:	e0b6      	b.n	8006040 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ed8:	e0b2      	b.n	8006040 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ee2:	d15e      	bne.n	8005fa2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d828      	bhi.n	8005f3e <UART_SetConfig+0x44a>
 8005eec:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef4 <UART_SetConfig+0x400>)
 8005eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef2:	bf00      	nop
 8005ef4:	08005f19 	.word	0x08005f19
 8005ef8:	08005f21 	.word	0x08005f21
 8005efc:	08005f29 	.word	0x08005f29
 8005f00:	08005f3f 	.word	0x08005f3f
 8005f04:	08005f2f 	.word	0x08005f2f
 8005f08:	08005f3f 	.word	0x08005f3f
 8005f0c:	08005f3f 	.word	0x08005f3f
 8005f10:	08005f3f 	.word	0x08005f3f
 8005f14:	08005f37 	.word	0x08005f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f18:	f7fe ff1a 	bl	8004d50 <HAL_RCC_GetPCLK1Freq>
 8005f1c:	61f8      	str	r0, [r7, #28]
        break;
 8005f1e:	e014      	b.n	8005f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f20:	f7fe ff2c 	bl	8004d7c <HAL_RCC_GetPCLK2Freq>
 8005f24:	61f8      	str	r0, [r7, #28]
        break;
 8005f26:	e010      	b.n	8005f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f28:	4b4d      	ldr	r3, [pc, #308]	@ (8006060 <UART_SetConfig+0x56c>)
 8005f2a:	61fb      	str	r3, [r7, #28]
        break;
 8005f2c:	e00d      	b.n	8005f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f2e:	f7fe fe77 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 8005f32:	61f8      	str	r0, [r7, #28]
        break;
 8005f34:	e009      	b.n	8005f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f3a:	61fb      	str	r3, [r7, #28]
        break;
 8005f3c:	e005      	b.n	8005f4a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d077      	beq.n	8006040 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	005a      	lsls	r2, r3, #1
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	085b      	lsrs	r3, r3, #1
 8005f5a:	441a      	add	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f64:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	2b0f      	cmp	r3, #15
 8005f6a:	d916      	bls.n	8005f9a <UART_SetConfig+0x4a6>
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f72:	d212      	bcs.n	8005f9a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	f023 030f 	bic.w	r3, r3, #15
 8005f7c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	085b      	lsrs	r3, r3, #1
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	8afb      	ldrh	r3, [r7, #22]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	8afa      	ldrh	r2, [r7, #22]
 8005f96:	60da      	str	r2, [r3, #12]
 8005f98:	e052      	b.n	8006040 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005fa0:	e04e      	b.n	8006040 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	d827      	bhi.n	8005ffa <UART_SetConfig+0x506>
 8005faa:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb0 <UART_SetConfig+0x4bc>)
 8005fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb0:	08005fd5 	.word	0x08005fd5
 8005fb4:	08005fdd 	.word	0x08005fdd
 8005fb8:	08005fe5 	.word	0x08005fe5
 8005fbc:	08005ffb 	.word	0x08005ffb
 8005fc0:	08005feb 	.word	0x08005feb
 8005fc4:	08005ffb 	.word	0x08005ffb
 8005fc8:	08005ffb 	.word	0x08005ffb
 8005fcc:	08005ffb 	.word	0x08005ffb
 8005fd0:	08005ff3 	.word	0x08005ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fd4:	f7fe febc 	bl	8004d50 <HAL_RCC_GetPCLK1Freq>
 8005fd8:	61f8      	str	r0, [r7, #28]
        break;
 8005fda:	e014      	b.n	8006006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fdc:	f7fe fece 	bl	8004d7c <HAL_RCC_GetPCLK2Freq>
 8005fe0:	61f8      	str	r0, [r7, #28]
        break;
 8005fe2:	e010      	b.n	8006006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8006060 <UART_SetConfig+0x56c>)
 8005fe6:	61fb      	str	r3, [r7, #28]
        break;
 8005fe8:	e00d      	b.n	8006006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fea:	f7fe fe19 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 8005fee:	61f8      	str	r0, [r7, #28]
        break;
 8005ff0:	e009      	b.n	8006006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ff6:	61fb      	str	r3, [r7, #28]
        break;
 8005ff8:	e005      	b.n	8006006 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006004:	bf00      	nop
    }

    if (pclk != 0U)
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d019      	beq.n	8006040 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	085a      	lsrs	r2, r3, #1
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	441a      	add	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	fbb2 f3f3 	udiv	r3, r2, r3
 800601e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	2b0f      	cmp	r3, #15
 8006024:	d909      	bls.n	800603a <UART_SetConfig+0x546>
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800602c:	d205      	bcs.n	800603a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	60da      	str	r2, [r3, #12]
 8006038:	e002      	b.n	8006040 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800604c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006050:	4618      	mov	r0, r3
 8006052:	3728      	adds	r7, #40	@ 0x28
 8006054:	46bd      	mov	sp, r7
 8006056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800605a:	bf00      	nop
 800605c:	40008000 	.word	0x40008000
 8006060:	00f42400 	.word	0x00f42400

08006064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006070:	f003 0308 	and.w	r3, r3, #8
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00a      	beq.n	800608e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00a      	beq.n	80060d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d6:	f003 0304 	and.w	r3, r3, #4
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00a      	beq.n	80060f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00a      	beq.n	8006116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611a:	f003 0320 	and.w	r3, r3, #32
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00a      	beq.n	8006138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006140:	2b00      	cmp	r3, #0
 8006142:	d01a      	beq.n	800617a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	430a      	orrs	r2, r1
 8006158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006162:	d10a      	bne.n	800617a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	605a      	str	r2, [r3, #4]
  }
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b098      	sub	sp, #96	@ 0x60
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061b8:	f7fc f952 	bl	8002460 <HAL_GetTick>
 80061bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0308 	and.w	r3, r3, #8
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d12e      	bne.n	800622a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061d4:	2200      	movs	r2, #0
 80061d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f88c 	bl	80062f8 <UART_WaitOnFlagUntilTimeout>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d021      	beq.n	800622a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ee:	e853 3f00 	ldrex	r3, [r3]
 80061f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006204:	647b      	str	r3, [r7, #68]	@ 0x44
 8006206:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006208:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800620a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800620c:	e841 2300 	strex	r3, r2, [r1]
 8006210:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1e6      	bne.n	80061e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2220      	movs	r2, #32
 800621c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e062      	b.n	80062f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b04      	cmp	r3, #4
 8006236:	d149      	bne.n	80062cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006238:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006240:	2200      	movs	r2, #0
 8006242:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f856 	bl	80062f8 <UART_WaitOnFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d03c      	beq.n	80062cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	623b      	str	r3, [r7, #32]
   return(result);
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	461a      	mov	r2, r3
 800626e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006270:	633b      	str	r3, [r7, #48]	@ 0x30
 8006272:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800627e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e6      	bne.n	8006252 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3308      	adds	r3, #8
 800628a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	60fb      	str	r3, [r7, #12]
   return(result);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0301 	bic.w	r3, r3, #1
 800629a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3308      	adds	r3, #8
 80062a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062a4:	61fa      	str	r2, [r7, #28]
 80062a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	69b9      	ldr	r1, [r7, #24]
 80062aa:	69fa      	ldr	r2, [r7, #28]
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	617b      	str	r3, [r7, #20]
   return(result);
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e5      	bne.n	8006284 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e011      	b.n	80062f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2220      	movs	r2, #32
 80062d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2220      	movs	r2, #32
 80062d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3758      	adds	r7, #88	@ 0x58
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	603b      	str	r3, [r7, #0]
 8006304:	4613      	mov	r3, r2
 8006306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006308:	e04f      	b.n	80063aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006310:	d04b      	beq.n	80063aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006312:	f7fc f8a5 	bl	8002460 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	429a      	cmp	r2, r3
 8006320:	d302      	bcc.n	8006328 <UART_WaitOnFlagUntilTimeout+0x30>
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e04e      	b.n	80063ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0304 	and.w	r3, r3, #4
 8006336:	2b00      	cmp	r3, #0
 8006338:	d037      	beq.n	80063aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2b80      	cmp	r3, #128	@ 0x80
 800633e:	d034      	beq.n	80063aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2b40      	cmp	r3, #64	@ 0x40
 8006344:	d031      	beq.n	80063aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	f003 0308 	and.w	r3, r3, #8
 8006350:	2b08      	cmp	r3, #8
 8006352:	d110      	bne.n	8006376 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2208      	movs	r2, #8
 800635a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 f838 	bl	80063d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2208      	movs	r2, #8
 8006366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e029      	b.n	80063ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006380:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006384:	d111      	bne.n	80063aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800638e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 f81e 	bl	80063d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2220      	movs	r2, #32
 800639a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e00f      	b.n	80063ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	4013      	ands	r3, r2
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	bf0c      	ite	eq
 80063ba:	2301      	moveq	r3, #1
 80063bc:	2300      	movne	r3, #0
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	461a      	mov	r2, r3
 80063c2:	79fb      	ldrb	r3, [r7, #7]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d0a0      	beq.n	800630a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b095      	sub	sp, #84	@ 0x54
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e2:	e853 3f00 	ldrex	r3, [r3]
 80063e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80063fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006400:	e841 2300 	strex	r3, r2, [r1]
 8006404:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e6      	bne.n	80063da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3308      	adds	r3, #8
 8006412:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	61fb      	str	r3, [r7, #28]
   return(result);
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	f023 0301 	bic.w	r3, r3, #1
 8006422:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3308      	adds	r3, #8
 800642a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800642c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800642e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800643a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e5      	bne.n	800640c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006444:	2b01      	cmp	r3, #1
 8006446:	d118      	bne.n	800647a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	e853 3f00 	ldrex	r3, [r3]
 8006454:	60bb      	str	r3, [r7, #8]
   return(result);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	f023 0310 	bic.w	r3, r3, #16
 800645c:	647b      	str	r3, [r7, #68]	@ 0x44
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006466:	61bb      	str	r3, [r7, #24]
 8006468:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646a:	6979      	ldr	r1, [r7, #20]
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	e841 2300 	strex	r3, r2, [r1]
 8006472:	613b      	str	r3, [r7, #16]
   return(result);
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1e6      	bne.n	8006448 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800648e:	bf00      	nop
 8006490:	3754      	adds	r7, #84	@ 0x54
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800649a:	b084      	sub	sp, #16
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	f107 001c 	add.w	r0, r7, #28
 80064a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fa69 	bl	8006990 <USB_CoreReset>
 80064be:	4603      	mov	r3, r0
 80064c0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80064c2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d106      	bne.n	80064d8 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80064d6:	e005      	b.n	80064e4 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064f0:	b004      	add	sp, #16
 80064f2:	4770      	bx	lr

080064f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f023 0201 	bic.w	r2, r3, #1
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	460b      	mov	r3, r1
 8006520:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006532:	78fb      	ldrb	r3, [r7, #3]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d115      	bne.n	8006564 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006544:	200a      	movs	r0, #10
 8006546:	f7fb ff97 	bl	8002478 <HAL_Delay>
      ms += 10U;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	330a      	adds	r3, #10
 800654e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fa0f 	bl	8006974 <USB_GetMode>
 8006556:	4603      	mov	r3, r0
 8006558:	2b01      	cmp	r3, #1
 800655a:	d01e      	beq.n	800659a <USB_SetCurrentMode+0x84>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006560:	d9f0      	bls.n	8006544 <USB_SetCurrentMode+0x2e>
 8006562:	e01a      	b.n	800659a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006564:	78fb      	ldrb	r3, [r7, #3]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d115      	bne.n	8006596 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006576:	200a      	movs	r0, #10
 8006578:	f7fb ff7e 	bl	8002478 <HAL_Delay>
      ms += 10U;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	330a      	adds	r3, #10
 8006580:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f9f6 	bl	8006974 <USB_GetMode>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d005      	beq.n	800659a <USB_SetCurrentMode+0x84>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2bc7      	cmp	r3, #199	@ 0xc7
 8006592:	d9f0      	bls.n	8006576 <USB_SetCurrentMode+0x60>
 8006594:	e001      	b.n	800659a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e005      	b.n	80065a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2bc8      	cmp	r3, #200	@ 0xc8
 800659e:	d101      	bne.n	80065a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e000      	b.n	80065a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065b0:	b084      	sub	sp, #16
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b086      	sub	sp, #24
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80065be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065ca:	2300      	movs	r3, #0
 80065cc:	613b      	str	r3, [r7, #16]
 80065ce:	e009      	b.n	80065e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	3340      	adds	r3, #64	@ 0x40
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4413      	add	r3, r2
 80065da:	2200      	movs	r2, #0
 80065dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	3301      	adds	r3, #1
 80065e2:	613b      	str	r3, [r7, #16]
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	2b0e      	cmp	r3, #14
 80065e8:	d9f2      	bls.n	80065d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d11c      	bne.n	800662c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006600:	f043 0302 	orr.w	r3, r3, #2
 8006604:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	e005      	b.n	8006638 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006630:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800663e:	461a      	mov	r2, r3
 8006640:	2300      	movs	r3, #0
 8006642:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006644:	2103      	movs	r1, #3
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f95a 	bl	8006900 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800664c:	2110      	movs	r1, #16
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f8f6 	bl	8006840 <USB_FlushTxFifo>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f920 	bl	80068a4 <USB_FlushRxFifo>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006674:	461a      	mov	r2, r3
 8006676:	2300      	movs	r3, #0
 8006678:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006680:	461a      	mov	r2, r3
 8006682:	2300      	movs	r3, #0
 8006684:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800668c:	461a      	mov	r2, r3
 800668e:	2300      	movs	r3, #0
 8006690:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006692:	2300      	movs	r3, #0
 8006694:	613b      	str	r3, [r7, #16]
 8006696:	e043      	b.n	8006720 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066ae:	d118      	bne.n	80066e2 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10a      	bne.n	80066cc <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066c2:	461a      	mov	r2, r3
 80066c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	e013      	b.n	80066f4 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066d8:	461a      	mov	r2, r3
 80066da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	e008      	b.n	80066f4 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ee:	461a      	mov	r2, r3
 80066f0:	2300      	movs	r3, #0
 80066f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006700:	461a      	mov	r2, r3
 8006702:	2300      	movs	r3, #0
 8006704:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006712:	461a      	mov	r2, r3
 8006714:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006718:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	3301      	adds	r3, #1
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006724:	461a      	mov	r2, r3
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	4293      	cmp	r3, r2
 800672a:	d3b5      	bcc.n	8006698 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800672c:	2300      	movs	r3, #0
 800672e:	613b      	str	r3, [r7, #16]
 8006730:	e043      	b.n	80067ba <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4413      	add	r3, r2
 800673a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006744:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006748:	d118      	bne.n	800677c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10a      	bne.n	8006766 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800675c:	461a      	mov	r2, r3
 800675e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	e013      	b.n	800678e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006772:	461a      	mov	r2, r3
 8006774:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	e008      	b.n	800678e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006788:	461a      	mov	r2, r3
 800678a:	2300      	movs	r3, #0
 800678c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4413      	add	r3, r2
 8006796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800679a:	461a      	mov	r2, r3
 800679c:	2300      	movs	r3, #0
 800679e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ac:	461a      	mov	r2, r3
 80067ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80067b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	3301      	adds	r3, #1
 80067b8:	613b      	str	r3, [r7, #16]
 80067ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80067be:	461a      	mov	r2, r3
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d3b5      	bcc.n	8006732 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067d8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80067e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	f043 0210 	orr.w	r2, r3, #16
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	699a      	ldr	r2, [r3, #24]
 80067f8:	4b10      	ldr	r3, [pc, #64]	@ (800683c <USB_DevInit+0x28c>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006800:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006804:	2b00      	cmp	r3, #0
 8006806:	d005      	beq.n	8006814 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	f043 0208 	orr.w	r2, r3, #8
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006814:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006818:	2b01      	cmp	r3, #1
 800681a:	d107      	bne.n	800682c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006824:	f043 0304 	orr.w	r3, r3, #4
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800682c:	7dfb      	ldrb	r3, [r7, #23]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006838:	b004      	add	sp, #16
 800683a:	4770      	bx	lr
 800683c:	803c3800 	.word	0x803c3800

08006840 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3301      	adds	r3, #1
 8006852:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800685a:	d901      	bls.n	8006860 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e01b      	b.n	8006898 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	daf2      	bge.n	800684e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	019b      	lsls	r3, r3, #6
 8006870:	f043 0220 	orr.w	r2, r3, #32
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	3301      	adds	r3, #1
 800687c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006884:	d901      	bls.n	800688a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e006      	b.n	8006898 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b20      	cmp	r3, #32
 8006894:	d0f0      	beq.n	8006878 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3301      	adds	r3, #1
 80068b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068bc:	d901      	bls.n	80068c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e018      	b.n	80068f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	daf2      	bge.n	80068b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2210      	movs	r2, #16
 80068d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3301      	adds	r3, #1
 80068d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068e0:	d901      	bls.n	80068e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e006      	b.n	80068f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f003 0310 	and.w	r3, r3, #16
 80068ee:	2b10      	cmp	r3, #16
 80068f0:	d0f0      	beq.n	80068d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	68f9      	ldr	r1, [r7, #12]
 800691c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006920:	4313      	orrs	r3, r2
 8006922:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006932:	b480      	push	{r7}
 8006934:	b085      	sub	sp, #20
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800694c:	f023 0303 	bic.w	r3, r3, #3
 8006950:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006960:	f043 0302 	orr.w	r3, r3, #2
 8006964:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	f003 0301 	and.w	r3, r3, #1
}
 8006984:	4618      	mov	r0, r3
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006998:	2300      	movs	r3, #0
 800699a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	3301      	adds	r3, #1
 80069a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069a8:	d901      	bls.n	80069ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e01b      	b.n	80069e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	daf2      	bge.n	800699c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	f043 0201 	orr.w	r2, r3, #1
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3301      	adds	r3, #1
 80069ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069d2:	d901      	bls.n	80069d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e006      	b.n	80069e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d0f0      	beq.n	80069c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
	...

080069f4 <funchad33.constprop.0>:
 80069f4:	edd0 7a00 	vldr	s15, [r0]
 80069f8:	4b05      	ldr	r3, [pc, #20]	@ (8006a10 <funchad33.constprop.0+0x1c>)
 80069fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80069fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a02:	bf48      	it	mi
 8006a04:	eef1 7a67 	vnegmi.f32	s15, s15
 8006a08:	edc3 7a00 	vstr	s15, [r3]
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	200008d0 	.word	0x200008d0

08006a14 <neai_anomalydetection_init>:
 8006a14:	4a18      	ldr	r2, [pc, #96]	@ (8006a78 <neai_anomalydetection_init+0x64>)
 8006a16:	4819      	ldr	r0, [pc, #100]	@ (8006a7c <neai_anomalydetection_init+0x68>)
 8006a18:	4919      	ldr	r1, [pc, #100]	@ (8006a80 <neai_anomalydetection_init+0x6c>)
 8006a1a:	b410      	push	{r4}
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	4c19      	ldr	r4, [pc, #100]	@ (8006a84 <neai_anomalydetection_init+0x70>)
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	4a19      	ldr	r2, [pc, #100]	@ (8006a88 <neai_anomalydetection_init+0x74>)
 8006a24:	600b      	str	r3, [r1, #0]
 8006a26:	6023      	str	r3, [r4, #0]
 8006a28:	6003      	str	r3, [r0, #0]
 8006a2a:	f04f 5c7e 	mov.w	ip, #1065353216	@ 0x3f800000
 8006a2e:	4b17      	ldr	r3, [pc, #92]	@ (8006a8c <neai_anomalydetection_init+0x78>)
 8006a30:	f8c2 c000 	str.w	ip, [r2]
 8006a34:	4a16      	ldr	r2, [pc, #88]	@ (8006a90 <neai_anomalydetection_init+0x7c>)
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	4916      	ldr	r1, [pc, #88]	@ (8006a94 <neai_anomalydetection_init+0x80>)
 8006a3a:	4b17      	ldr	r3, [pc, #92]	@ (8006a98 <neai_anomalydetection_init+0x84>)
 8006a3c:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8006abc <neai_anomalydetection_init+0xa8>
 8006a40:	4a16      	ldr	r2, [pc, #88]	@ (8006a9c <neai_anomalydetection_init+0x88>)
 8006a42:	f8c1 c000 	str.w	ip, [r1]
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	4915      	ldr	r1, [pc, #84]	@ (8006aa0 <neai_anomalydetection_init+0x8c>)
 8006a4a:	4b16      	ldr	r3, [pc, #88]	@ (8006aa4 <neai_anomalydetection_init+0x90>)
 8006a4c:	f8df c070 	ldr.w	ip, [pc, #112]	@ 8006ac0 <neai_anomalydetection_init+0xac>
 8006a50:	4a15      	ldr	r2, [pc, #84]	@ (8006aa8 <neai_anomalydetection_init+0x94>)
 8006a52:	f8c1 c000 	str.w	ip, [r1]
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	4914      	ldr	r1, [pc, #80]	@ (8006aac <neai_anomalydetection_init+0x98>)
 8006a5a:	4a15      	ldr	r2, [pc, #84]	@ (8006ab0 <neai_anomalydetection_init+0x9c>)
 8006a5c:	4c15      	ldr	r4, [pc, #84]	@ (8006ab4 <neai_anomalydetection_init+0xa0>)
 8006a5e:	4b16      	ldr	r3, [pc, #88]	@ (8006ab8 <neai_anomalydetection_init+0xa4>)
 8006a60:	2000      	movs	r0, #0
 8006a62:	f04f 0c01 	mov.w	ip, #1
 8006a66:	f881 c000 	strb.w	ip, [r1]
 8006a6a:	7010      	strb	r0, [r2, #0]
 8006a6c:	6020      	str	r0, [r4, #0]
 8006a6e:	6018      	str	r0, [r3, #0]
 8006a70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	20000080 	.word	0x20000080
 8006a7c:	200000a0 	.word	0x200000a0
 8006a80:	20000084 	.word	0x20000084
 8006a84:	2000009c 	.word	0x2000009c
 8006a88:	20000098 	.word	0x20000098
 8006a8c:	20000094 	.word	0x20000094
 8006a90:	40400000 	.word	0x40400000
 8006a94:	20000090 	.word	0x20000090
 8006a98:	200008d4 	.word	0x200008d4
 8006a9c:	409ae148 	.word	0x409ae148
 8006aa0:	2000008c 	.word	0x2000008c
 8006aa4:	20000088 	.word	0x20000088
 8006aa8:	3f333333 	.word	0x3f333333
 8006aac:	20000078 	.word	0x20000078
 8006ab0:	20000070 	.word	0x20000070
 8006ab4:	2000007c 	.word	0x2000007c
 8006ab8:	20000074 	.word	0x20000074
 8006abc:	3f1c28f6 	.word	0x3f1c28f6
 8006ac0:	3e2e147b 	.word	0x3e2e147b
 8006ac4:	00000000 	.word	0x00000000

08006ac8 <neai_anomalydetection_learn>:
 8006ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aca:	ed2d 8b06 	vpush	{d8-d10}
 8006ace:	4b6a      	ldr	r3, [pc, #424]	@ (8006c78 <neai_anomalydetection_learn+0x1b0>)
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d005      	beq.n	8006ae2 <neai_anomalydetection_learn+0x1a>
 8006ad6:	4b69      	ldr	r3, [pc, #420]	@ (8006c7c <neai_anomalydetection_learn+0x1b4>)
 8006ad8:	207b      	movs	r0, #123	@ 0x7b
 8006ada:	7018      	strb	r0, [r3, #0]
 8006adc:	ecbd 8b06 	vpop	{d8-d10}
 8006ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ae2:	f7ff ff87 	bl	80069f4 <funchad33.constprop.0>
 8006ae6:	4b66      	ldr	r3, [pc, #408]	@ (8006c80 <neai_anomalydetection_learn+0x1b8>)
 8006ae8:	4f66      	ldr	r7, [pc, #408]	@ (8006c84 <neai_anomalydetection_learn+0x1bc>)
 8006aea:	681c      	ldr	r4, [r3, #0]
 8006aec:	1c65      	adds	r5, r4, #1
 8006aee:	2d02      	cmp	r5, #2
 8006af0:	601d      	str	r5, [r3, #0]
 8006af2:	4b65      	ldr	r3, [pc, #404]	@ (8006c88 <neai_anomalydetection_learn+0x1c0>)
 8006af4:	d839      	bhi.n	8006b6a <neai_anomalydetection_learn+0xa2>
 8006af6:	ed93 9a00 	vldr	s18, [r3]
 8006afa:	edd7 9a00 	vldr	s19, [r7]
 8006afe:	4e63      	ldr	r6, [pc, #396]	@ (8006c8c <neai_anomalydetection_learn+0x1c4>)
 8006b00:	ee39 aa69 	vsub.f32	s20, s18, s19
 8006b04:	ed96 8a00 	vldr	s16, [r6]
 8006b08:	4b5c      	ldr	r3, [pc, #368]	@ (8006c7c <neai_anomalydetection_learn+0x1b4>)
 8006b0a:	3402      	adds	r4, #2
 8006b0c:	ee28 8a08 	vmul.f32	s16, s16, s16
 8006b10:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8006b14:	ee07 4a10 	vmov	s14, r4
 8006b18:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006b1c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006b20:	ee29 9a09 	vmul.f32	s18, s18, s18
 8006b24:	eeca 6a07 	vdiv.f32	s13, s20, s14
 8006b28:	ee39 9a67 	vsub.f32	s18, s18, s15
 8006b2c:	ee89 6a07 	vdiv.f32	s12, s18, s14
 8006b30:	ee36 7aa9 	vadd.f32	s14, s13, s19
 8006b34:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006b38:	ee67 6a07 	vmul.f32	s13, s14, s14
 8006b3c:	ed87 7a00 	vstr	s14, [r7]
 8006b40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b4c:	bfac      	ite	ge
 8006b4e:	eef1 6ae7 	vsqrtge.f32	s13, s15
 8006b52:	eddf 6a4f 	vldrlt	s13, [pc, #316]	@ 8006c90 <neai_anomalydetection_learn+0x1c8>
 8006b56:	2d09      	cmp	r5, #9
 8006b58:	bf8c      	ite	hi
 8006b5a:	207f      	movhi	r0, #127	@ 0x7f
 8006b5c:	207e      	movls	r0, #126	@ 0x7e
 8006b5e:	7018      	strb	r0, [r3, #0]
 8006b60:	ecbd 8b06 	vpop	{d8-d10}
 8006b64:	edc6 6a00 	vstr	s13, [r6]
 8006b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b6a:	4e48      	ldr	r6, [pc, #288]	@ (8006c8c <neai_anomalydetection_learn+0x1c4>)
 8006b6c:	ed93 9a00 	vldr	s18, [r3]
 8006b70:	ed96 8a00 	vldr	s16, [r6]
 8006b74:	edd7 9a00 	vldr	s19, [r7]
 8006b78:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b80:	ee39 aa69 	vsub.f32	s20, s18, s19
 8006b84:	d159      	bne.n	8006c3a <neai_anomalydetection_learn+0x172>
 8006b86:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8006c94 <neai_anomalydetection_learn+0x1cc>
 8006b8a:	eef0 7a47 	vmov.f32	s15, s14
 8006b8e:	4a42      	ldr	r2, [pc, #264]	@ (8006c98 <neai_anomalydetection_learn+0x1d0>)
 8006b90:	4942      	ldr	r1, [pc, #264]	@ (8006c9c <neai_anomalydetection_learn+0x1d4>)
 8006b92:	6813      	ldr	r3, [r2, #0]
 8006b94:	edd1 5a00 	vldr	s11, [r1]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	6013      	str	r3, [r2, #0]
 8006b9c:	4a40      	ldr	r2, [pc, #256]	@ (8006ca0 <neai_anomalydetection_learn+0x1d8>)
 8006b9e:	ee06 3a90 	vmov	s13, r3
 8006ba2:	ed92 6a00 	vldr	s12, [r2]
 8006ba6:	eeb8 5a66 	vcvt.f32.u32	s10, s13
 8006baa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006bae:	ee77 6a65 	vsub.f32	s13, s14, s11
 8006bb2:	eec7 8a85 	vdiv.f32	s17, s15, s10
 8006bb6:	ee86 7a85 	vdiv.f32	s14, s13, s10
 8006bba:	ee78 8a86 	vadd.f32	s17, s17, s12
 8006bbe:	ee77 7a25 	vadd.f32	s15, s14, s11
 8006bc2:	edc2 8a00 	vstr	s17, [r2]
 8006bc6:	edc1 7a00 	vstr	s15, [r1]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d09c      	beq.n	8006b08 <neai_anomalydetection_learn+0x40>
 8006bce:	4b35      	ldr	r3, [pc, #212]	@ (8006ca4 <neai_anomalydetection_learn+0x1dc>)
 8006bd0:	edd3 aa00 	vldr	s21, [r3]
 8006bd4:	ee67 7aaa 	vmul.f32	s15, s15, s21
 8006bd8:	ee17 0a90 	vmov	r0, s15
 8006bdc:	f7f9 fdde 	bl	800079c <__aeabi_f2d>
 8006be0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006c68 <neai_anomalydetection_learn+0x1a0>
 8006be4:	ec41 0b10 	vmov	d0, r0, r1
 8006be8:	f000 fe2a 	bl	8007840 <fmax>
 8006bec:	ec51 0b10 	vmov	r0, r1, d0
 8006bf0:	f7f9 feb4 	bl	800095c <__aeabi_d2f>
 8006bf4:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8006bf8:	ee00 0a10 	vmov	s0, r0
 8006bfc:	f000 fe74 	bl	80078e8 <fminf>
 8006c00:	4b29      	ldr	r3, [pc, #164]	@ (8006ca8 <neai_anomalydetection_learn+0x1e0>)
 8006c02:	ee68 7aaa 	vmul.f32	s15, s17, s21
 8006c06:	ed83 0a00 	vstr	s0, [r3]
 8006c0a:	ee17 0a90 	vmov	r0, s15
 8006c0e:	f7f9 fdc5 	bl	800079c <__aeabi_f2d>
 8006c12:	ed9f 1b17 	vldr	d1, [pc, #92]	@ 8006c70 <neai_anomalydetection_learn+0x1a8>
 8006c16:	ec41 0b10 	vmov	d0, r0, r1
 8006c1a:	f000 fe11 	bl	8007840 <fmax>
 8006c1e:	ec51 0b10 	vmov	r0, r1, d0
 8006c22:	f7f9 fe9b 	bl	800095c <__aeabi_d2f>
 8006c26:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8006c94 <neai_anomalydetection_learn+0x1cc>
 8006c2a:	ee00 0a10 	vmov	s0, r0
 8006c2e:	f000 fe5b 	bl	80078e8 <fminf>
 8006c32:	4b1e      	ldr	r3, [pc, #120]	@ (8006cac <neai_anomalydetection_learn+0x1e4>)
 8006c34:	ed83 0a00 	vstr	s0, [r3]
 8006c38:	e766      	b.n	8006b08 <neai_anomalydetection_learn+0x40>
 8006c3a:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8006c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c42:	bf4c      	ite	mi
 8006c44:	eeb1 7a4a 	vnegmi.f32	s14, s20
 8006c48:	eeb0 7a4a 	vmovpl.f32	s14, s20
 8006c4c:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8006c50:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8006c90 <neai_anomalydetection_learn+0x1c8>
 8006c54:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c5c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006c60:	dc95      	bgt.n	8006b8e <neai_anomalydetection_learn+0xc6>
 8006c62:	eef0 7a66 	vmov.f32	s15, s13
 8006c66:	e792      	b.n	8006b8e <neai_anomalydetection_learn+0xc6>
 8006c68:	00000000 	.word	0x00000000
 8006c6c:	3ff00000 	.word	0x3ff00000
 8006c70:	00000000 	.word	0x00000000
 8006c74:	40080000 	.word	0x40080000
 8006c78:	20000078 	.word	0x20000078
 8006c7c:	20000070 	.word	0x20000070
 8006c80:	20000074 	.word	0x20000074
 8006c84:	2000009c 	.word	0x2000009c
 8006c88:	200008d0 	.word	0x200008d0
 8006c8c:	200000a0 	.word	0x200000a0
 8006c90:	00000000 	.word	0x00000000
 8006c94:	42c80000 	.word	0x42c80000
 8006c98:	2000007c 	.word	0x2000007c
 8006c9c:	20000084 	.word	0x20000084
 8006ca0:	20000080 	.word	0x20000080
 8006ca4:	20000090 	.word	0x20000090
 8006ca8:	20000098 	.word	0x20000098
 8006cac:	20000094 	.word	0x20000094

08006cb0 <neai_anomalydetection_detect>:
 8006cb0:	b510      	push	{r4, lr}
 8006cb2:	ed2d 8b04 	vpush	{d8-d9}
 8006cb6:	4b82      	ldr	r3, [pc, #520]	@ (8006ec0 <neai_anomalydetection_detect+0x210>)
 8006cb8:	460c      	mov	r4, r1
 8006cba:	781a      	ldrb	r2, [r3, #0]
 8006cbc:	21ff      	movs	r1, #255	@ 0xff
 8006cbe:	7021      	strb	r1, [r4, #0]
 8006cc0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8006cc4:	2901      	cmp	r1, #1
 8006cc6:	f240 8092 	bls.w	8006dee <neai_anomalydetection_detect+0x13e>
 8006cca:	2a80      	cmp	r2, #128	@ 0x80
 8006ccc:	f000 808f 	beq.w	8006dee <neai_anomalydetection_detect+0x13e>
 8006cd0:	4a7c      	ldr	r2, [pc, #496]	@ (8006ec4 <neai_anomalydetection_detect+0x214>)
 8006cd2:	6812      	ldr	r2, [r2, #0]
 8006cd4:	2a09      	cmp	r2, #9
 8006cd6:	f240 808e 	bls.w	8006df6 <neai_anomalydetection_detect+0x146>
 8006cda:	f7ff fe8b 	bl	80069f4 <funchad33.constprop.0>
 8006cde:	4b7a      	ldr	r3, [pc, #488]	@ (8006ec8 <neai_anomalydetection_detect+0x218>)
 8006ce0:	6818      	ldr	r0, [r3, #0]
 8006ce2:	f7f9 fd5b 	bl	800079c <__aeabi_f2d>
 8006ce6:	a372      	add	r3, pc, #456	@ (adr r3, 8006eb0 <neai_anomalydetection_detect+0x200>)
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	f7f9 fac8 	bl	8000280 <__aeabi_dmul>
 8006cf0:	f7f9 fe34 	bl	800095c <__aeabi_d2f>
 8006cf4:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8006ecc <neai_anomalydetection_detect+0x21c>
 8006cf8:	ee07 0a10 	vmov	s14, r0
 8006cfc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8006d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d04:	da7d      	bge.n	8006e02 <neai_anomalydetection_detect+0x152>
 8006d06:	4a72      	ldr	r2, [pc, #456]	@ (8006ed0 <neai_anomalydetection_detect+0x220>)
 8006d08:	4b72      	ldr	r3, [pc, #456]	@ (8006ed4 <neai_anomalydetection_detect+0x224>)
 8006d0a:	4973      	ldr	r1, [pc, #460]	@ (8006ed8 <neai_anomalydetection_detect+0x228>)
 8006d0c:	edd2 7a00 	vldr	s15, [r2]
 8006d10:	edd3 5a00 	vldr	s11, [r3]
 8006d14:	ed91 6a00 	vldr	s12, [r1]
 8006d18:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d20:	f340 80bb 	ble.w	8006e9a <neai_anomalydetection_detect+0x1ea>
 8006d24:	4b6d      	ldr	r3, [pc, #436]	@ (8006edc <neai_anomalydetection_detect+0x22c>)
 8006d26:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8006d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d2e:	edc3 6a00 	vstr	s13, [r3]
 8006d32:	f040 8089 	bne.w	8006e48 <neai_anomalydetection_detect+0x198>
 8006d36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d3a:	ed9f 9a69 	vldr	s18, [pc, #420]	@ 8006ee0 <neai_anomalydetection_detect+0x230>
 8006d3e:	eeb0 8a47 	vmov.f32	s16, s14
 8006d42:	4b68      	ldr	r3, [pc, #416]	@ (8006ee4 <neai_anomalydetection_detect+0x234>)
 8006d44:	edd3 6a00 	vldr	s13, [r3]
 8006d48:	4b67      	ldr	r3, [pc, #412]	@ (8006ee8 <neai_anomalydetection_detect+0x238>)
 8006d4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d4e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8006d52:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8006d56:	ed93 7a00 	vldr	s14, [r3]
 8006d5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d62:	ee17 0a90 	vmov	r0, s15
 8006d66:	f7f9 fd19 	bl	800079c <__aeabi_f2d>
 8006d6a:	ed9f 1b53 	vldr	d1, [pc, #332]	@ 8006eb8 <neai_anomalydetection_detect+0x208>
 8006d6e:	ec41 0b10 	vmov	d0, r0, r1
 8006d72:	f000 fd65 	bl	8007840 <fmax>
 8006d76:	ec51 0b10 	vmov	r0, r1, d0
 8006d7a:	f7f9 fdef 	bl	800095c <__aeabi_d2f>
 8006d7e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8006d82:	ee00 0a10 	vmov	s0, r0
 8006d86:	f000 fdaf 	bl	80078e8 <fminf>
 8006d8a:	4a58      	ldr	r2, [pc, #352]	@ (8006eec <neai_anomalydetection_detect+0x23c>)
 8006d8c:	4b58      	ldr	r3, [pc, #352]	@ (8006ef0 <neai_anomalydetection_detect+0x240>)
 8006d8e:	edd2 6a00 	vldr	s13, [r2]
 8006d92:	ed93 7a00 	vldr	s14, [r3]
 8006d96:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8006d9a:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8006d9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006da6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006daa:	ee67 7a89 	vmul.f32	s15, s15, s18
 8006dae:	ee17 0a90 	vmov	r0, s15
 8006db2:	f7f9 fcf3 	bl	800079c <__aeabi_f2d>
 8006db6:	ed9f 1b40 	vldr	d1, [pc, #256]	@ 8006eb8 <neai_anomalydetection_detect+0x208>
 8006dba:	ec41 0b10 	vmov	d0, r0, r1
 8006dbe:	f000 fd3f 	bl	8007840 <fmax>
 8006dc2:	ec51 0b10 	vmov	r0, r1, d0
 8006dc6:	f7f9 fdc9 	bl	800095c <__aeabi_d2f>
 8006dca:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8006dce:	ee00 0a10 	vmov	s0, r0
 8006dd2:	f000 fd89 	bl	80078e8 <fminf>
 8006dd6:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8006dda:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006dde:	2200      	movs	r2, #0
 8006de0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006de4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006de8:	ee17 3a90 	vmov	r3, s15
 8006dec:	7023      	strb	r3, [r4, #0]
 8006dee:	ecbd 8b04 	vpop	{d8-d9}
 8006df2:	4610      	mov	r0, r2
 8006df4:	bd10      	pop	{r4, pc}
 8006df6:	227e      	movs	r2, #126	@ 0x7e
 8006df8:	701a      	strb	r2, [r3, #0]
 8006dfa:	ecbd 8b04 	vpop	{d8-d9}
 8006dfe:	4610      	mov	r0, r2
 8006e00:	bd10      	pop	{r4, pc}
 8006e02:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 8006ef4 <neai_anomalydetection_detect+0x244>
 8006e06:	4835      	ldr	r0, [pc, #212]	@ (8006edc <neai_anomalydetection_detect+0x22c>)
 8006e08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e10:	d939      	bls.n	8006e86 <neai_anomalydetection_detect+0x1d6>
 8006e12:	ed9f 9a39 	vldr	s18, [pc, #228]	@ 8006ef8 <neai_anomalydetection_detect+0x248>
 8006e16:	4a2e      	ldr	r2, [pc, #184]	@ (8006ed0 <neai_anomalydetection_detect+0x220>)
 8006e18:	4b2e      	ldr	r3, [pc, #184]	@ (8006ed4 <neai_anomalydetection_detect+0x224>)
 8006e1a:	492f      	ldr	r1, [pc, #188]	@ (8006ed8 <neai_anomalydetection_detect+0x228>)
 8006e1c:	edc0 7a00 	vstr	s15, [r0]
 8006e20:	eeb0 7a67 	vmov.f32	s14, s15
 8006e24:	ed91 6a00 	vldr	s12, [r1]
 8006e28:	edd2 7a00 	vldr	s15, [r2]
 8006e2c:	edd3 5a00 	vldr	s11, [r3]
 8006e30:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8006e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e38:	d10a      	bne.n	8006e50 <neai_anomalydetection_detect+0x1a0>
 8006e3a:	ed9f 8a2e 	vldr	s16, [pc, #184]	@ 8006ef4 <neai_anomalydetection_detect+0x244>
 8006e3e:	ee27 8a08 	vmul.f32	s16, s14, s16
 8006e42:	eeb0 7a48 	vmov.f32	s14, s16
 8006e46:	e77c      	b.n	8006d42 <neai_anomalydetection_detect+0x92>
 8006e48:	ed9f 9a25 	vldr	s18, [pc, #148]	@ 8006ee0 <neai_anomalydetection_detect+0x230>
 8006e4c:	eeb0 7a66 	vmov.f32	s14, s13
 8006e50:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006e54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e5c:	bf48      	it	mi
 8006e5e:	eef1 7a67 	vnegmi.f32	s15, s15
 8006e62:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006e66:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8006efc <neai_anomalydetection_detect+0x24c>
 8006e6a:	ee36 8aa7 	vadd.f32	s16, s13, s15
 8006e6e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8006e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e76:	ee28 8a07 	vmul.f32	s16, s16, s14
 8006e7a:	bfd4      	ite	le
 8006e7c:	ee27 7a27 	vmulle.f32	s14, s14, s15
 8006e80:	ee26 7a87 	vmulgt.f32	s14, s13, s14
 8006e84:	e75d      	b.n	8006d42 <neai_anomalydetection_detect+0x92>
 8006e86:	eeb7 9a08 	vmov.f32	s18, #120	@ 0x3fc00000  1.5
 8006e8a:	ee27 9a09 	vmul.f32	s18, s14, s18
 8006e8e:	4a10      	ldr	r2, [pc, #64]	@ (8006ed0 <neai_anomalydetection_detect+0x220>)
 8006e90:	4b10      	ldr	r3, [pc, #64]	@ (8006ed4 <neai_anomalydetection_detect+0x224>)
 8006e92:	4911      	ldr	r1, [pc, #68]	@ (8006ed8 <neai_anomalydetection_detect+0x228>)
 8006e94:	ed80 7a00 	vstr	s14, [r0]
 8006e98:	e7c4      	b.n	8006e24 <neai_anomalydetection_detect+0x174>
 8006e9a:	4810      	ldr	r0, [pc, #64]	@ (8006edc <neai_anomalydetection_detect+0x22c>)
 8006e9c:	ed90 7a00 	vldr	s14, [r0]
 8006ea0:	eeb7 9a08 	vmov.f32	s18, #120	@ 0x3fc00000  1.5
 8006ea4:	ee27 9a09 	vmul.f32	s18, s14, s18
 8006ea8:	e7bc      	b.n	8006e24 <neai_anomalydetection_detect+0x174>
 8006eaa:	bf00      	nop
 8006eac:	f3af 8000 	nop.w
 8006eb0:	f5c28f5c 	.word	0xf5c28f5c
 8006eb4:	40135c28 	.word	0x40135c28
	...
 8006ec0:	20000070 	.word	0x20000070
 8006ec4:	20000074 	.word	0x20000074
 8006ec8:	2000001c 	.word	0x2000001c
 8006ecc:	3c23d70a 	.word	0x3c23d70a
 8006ed0:	200008d0 	.word	0x200008d0
 8006ed4:	2000009c 	.word	0x2000009c
 8006ed8:	200000a0 	.word	0x200000a0
 8006edc:	200008d4 	.word	0x200008d4
 8006ee0:	3c75c28f 	.word	0x3c75c28f
 8006ee4:	20000094 	.word	0x20000094
 8006ee8:	20000088 	.word	0x20000088
 8006eec:	20000098 	.word	0x20000098
 8006ef0:	2000008c 	.word	0x2000008c
 8006ef4:	42c80000 	.word	0x42c80000
 8006ef8:	43160000 	.word	0x43160000
 8006efc:	00000000 	.word	0x00000000

08006f00 <siprintf>:
 8006f00:	b40e      	push	{r1, r2, r3}
 8006f02:	b500      	push	{lr}
 8006f04:	b09c      	sub	sp, #112	@ 0x70
 8006f06:	ab1d      	add	r3, sp, #116	@ 0x74
 8006f08:	9002      	str	r0, [sp, #8]
 8006f0a:	9006      	str	r0, [sp, #24]
 8006f0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f10:	4809      	ldr	r0, [pc, #36]	@ (8006f38 <siprintf+0x38>)
 8006f12:	9107      	str	r1, [sp, #28]
 8006f14:	9104      	str	r1, [sp, #16]
 8006f16:	4909      	ldr	r1, [pc, #36]	@ (8006f3c <siprintf+0x3c>)
 8006f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f1c:	9105      	str	r1, [sp, #20]
 8006f1e:	6800      	ldr	r0, [r0, #0]
 8006f20:	9301      	str	r3, [sp, #4]
 8006f22:	a902      	add	r1, sp, #8
 8006f24:	f000 f9a2 	bl	800726c <_svfiprintf_r>
 8006f28:	9b02      	ldr	r3, [sp, #8]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	b01c      	add	sp, #112	@ 0x70
 8006f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f34:	b003      	add	sp, #12
 8006f36:	4770      	bx	lr
 8006f38:	20000020 	.word	0x20000020
 8006f3c:	ffff0208 	.word	0xffff0208

08006f40 <memset>:
 8006f40:	4402      	add	r2, r0
 8006f42:	4603      	mov	r3, r0
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d100      	bne.n	8006f4a <memset+0xa>
 8006f48:	4770      	bx	lr
 8006f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f4e:	e7f9      	b.n	8006f44 <memset+0x4>

08006f50 <__errno>:
 8006f50:	4b01      	ldr	r3, [pc, #4]	@ (8006f58 <__errno+0x8>)
 8006f52:	6818      	ldr	r0, [r3, #0]
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	20000020 	.word	0x20000020

08006f5c <__libc_init_array>:
 8006f5c:	b570      	push	{r4, r5, r6, lr}
 8006f5e:	4d0d      	ldr	r5, [pc, #52]	@ (8006f94 <__libc_init_array+0x38>)
 8006f60:	4c0d      	ldr	r4, [pc, #52]	@ (8006f98 <__libc_init_array+0x3c>)
 8006f62:	1b64      	subs	r4, r4, r5
 8006f64:	10a4      	asrs	r4, r4, #2
 8006f66:	2600      	movs	r6, #0
 8006f68:	42a6      	cmp	r6, r4
 8006f6a:	d109      	bne.n	8006f80 <__libc_init_array+0x24>
 8006f6c:	4d0b      	ldr	r5, [pc, #44]	@ (8006f9c <__libc_init_array+0x40>)
 8006f6e:	4c0c      	ldr	r4, [pc, #48]	@ (8006fa0 <__libc_init_array+0x44>)
 8006f70:	f000 fcf4 	bl	800795c <_init>
 8006f74:	1b64      	subs	r4, r4, r5
 8006f76:	10a4      	asrs	r4, r4, #2
 8006f78:	2600      	movs	r6, #0
 8006f7a:	42a6      	cmp	r6, r4
 8006f7c:	d105      	bne.n	8006f8a <__libc_init_array+0x2e>
 8006f7e:	bd70      	pop	{r4, r5, r6, pc}
 8006f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f84:	4798      	blx	r3
 8006f86:	3601      	adds	r6, #1
 8006f88:	e7ee      	b.n	8006f68 <__libc_init_array+0xc>
 8006f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f8e:	4798      	blx	r3
 8006f90:	3601      	adds	r6, #1
 8006f92:	e7f2      	b.n	8006f7a <__libc_init_array+0x1e>
 8006f94:	08007a60 	.word	0x08007a60
 8006f98:	08007a60 	.word	0x08007a60
 8006f9c:	08007a60 	.word	0x08007a60
 8006fa0:	08007a64 	.word	0x08007a64

08006fa4 <__retarget_lock_acquire_recursive>:
 8006fa4:	4770      	bx	lr

08006fa6 <__retarget_lock_release_recursive>:
 8006fa6:	4770      	bx	lr

08006fa8 <memcpy>:
 8006fa8:	440a      	add	r2, r1
 8006faa:	4291      	cmp	r1, r2
 8006fac:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fb0:	d100      	bne.n	8006fb4 <memcpy+0xc>
 8006fb2:	4770      	bx	lr
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fbe:	4291      	cmp	r1, r2
 8006fc0:	d1f9      	bne.n	8006fb6 <memcpy+0xe>
 8006fc2:	bd10      	pop	{r4, pc}

08006fc4 <_free_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4605      	mov	r5, r0
 8006fc8:	2900      	cmp	r1, #0
 8006fca:	d041      	beq.n	8007050 <_free_r+0x8c>
 8006fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fd0:	1f0c      	subs	r4, r1, #4
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	bfb8      	it	lt
 8006fd6:	18e4      	addlt	r4, r4, r3
 8006fd8:	f000 f8e0 	bl	800719c <__malloc_lock>
 8006fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8007054 <_free_r+0x90>)
 8006fde:	6813      	ldr	r3, [r2, #0]
 8006fe0:	b933      	cbnz	r3, 8006ff0 <_free_r+0x2c>
 8006fe2:	6063      	str	r3, [r4, #4]
 8006fe4:	6014      	str	r4, [r2, #0]
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fec:	f000 b8dc 	b.w	80071a8 <__malloc_unlock>
 8006ff0:	42a3      	cmp	r3, r4
 8006ff2:	d908      	bls.n	8007006 <_free_r+0x42>
 8006ff4:	6820      	ldr	r0, [r4, #0]
 8006ff6:	1821      	adds	r1, r4, r0
 8006ff8:	428b      	cmp	r3, r1
 8006ffa:	bf01      	itttt	eq
 8006ffc:	6819      	ldreq	r1, [r3, #0]
 8006ffe:	685b      	ldreq	r3, [r3, #4]
 8007000:	1809      	addeq	r1, r1, r0
 8007002:	6021      	streq	r1, [r4, #0]
 8007004:	e7ed      	b.n	8006fe2 <_free_r+0x1e>
 8007006:	461a      	mov	r2, r3
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	b10b      	cbz	r3, 8007010 <_free_r+0x4c>
 800700c:	42a3      	cmp	r3, r4
 800700e:	d9fa      	bls.n	8007006 <_free_r+0x42>
 8007010:	6811      	ldr	r1, [r2, #0]
 8007012:	1850      	adds	r0, r2, r1
 8007014:	42a0      	cmp	r0, r4
 8007016:	d10b      	bne.n	8007030 <_free_r+0x6c>
 8007018:	6820      	ldr	r0, [r4, #0]
 800701a:	4401      	add	r1, r0
 800701c:	1850      	adds	r0, r2, r1
 800701e:	4283      	cmp	r3, r0
 8007020:	6011      	str	r1, [r2, #0]
 8007022:	d1e0      	bne.n	8006fe6 <_free_r+0x22>
 8007024:	6818      	ldr	r0, [r3, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	6053      	str	r3, [r2, #4]
 800702a:	4408      	add	r0, r1
 800702c:	6010      	str	r0, [r2, #0]
 800702e:	e7da      	b.n	8006fe6 <_free_r+0x22>
 8007030:	d902      	bls.n	8007038 <_free_r+0x74>
 8007032:	230c      	movs	r3, #12
 8007034:	602b      	str	r3, [r5, #0]
 8007036:	e7d6      	b.n	8006fe6 <_free_r+0x22>
 8007038:	6820      	ldr	r0, [r4, #0]
 800703a:	1821      	adds	r1, r4, r0
 800703c:	428b      	cmp	r3, r1
 800703e:	bf04      	itt	eq
 8007040:	6819      	ldreq	r1, [r3, #0]
 8007042:	685b      	ldreq	r3, [r3, #4]
 8007044:	6063      	str	r3, [r4, #4]
 8007046:	bf04      	itt	eq
 8007048:	1809      	addeq	r1, r1, r0
 800704a:	6021      	streq	r1, [r4, #0]
 800704c:	6054      	str	r4, [r2, #4]
 800704e:	e7ca      	b.n	8006fe6 <_free_r+0x22>
 8007050:	bd38      	pop	{r3, r4, r5, pc}
 8007052:	bf00      	nop
 8007054:	20000a1c 	.word	0x20000a1c

08007058 <sbrk_aligned>:
 8007058:	b570      	push	{r4, r5, r6, lr}
 800705a:	4e0f      	ldr	r6, [pc, #60]	@ (8007098 <sbrk_aligned+0x40>)
 800705c:	460c      	mov	r4, r1
 800705e:	6831      	ldr	r1, [r6, #0]
 8007060:	4605      	mov	r5, r0
 8007062:	b911      	cbnz	r1, 800706a <sbrk_aligned+0x12>
 8007064:	f000 fba6 	bl	80077b4 <_sbrk_r>
 8007068:	6030      	str	r0, [r6, #0]
 800706a:	4621      	mov	r1, r4
 800706c:	4628      	mov	r0, r5
 800706e:	f000 fba1 	bl	80077b4 <_sbrk_r>
 8007072:	1c43      	adds	r3, r0, #1
 8007074:	d103      	bne.n	800707e <sbrk_aligned+0x26>
 8007076:	f04f 34ff 	mov.w	r4, #4294967295
 800707a:	4620      	mov	r0, r4
 800707c:	bd70      	pop	{r4, r5, r6, pc}
 800707e:	1cc4      	adds	r4, r0, #3
 8007080:	f024 0403 	bic.w	r4, r4, #3
 8007084:	42a0      	cmp	r0, r4
 8007086:	d0f8      	beq.n	800707a <sbrk_aligned+0x22>
 8007088:	1a21      	subs	r1, r4, r0
 800708a:	4628      	mov	r0, r5
 800708c:	f000 fb92 	bl	80077b4 <_sbrk_r>
 8007090:	3001      	adds	r0, #1
 8007092:	d1f2      	bne.n	800707a <sbrk_aligned+0x22>
 8007094:	e7ef      	b.n	8007076 <sbrk_aligned+0x1e>
 8007096:	bf00      	nop
 8007098:	20000a18 	.word	0x20000a18

0800709c <_malloc_r>:
 800709c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070a0:	1ccd      	adds	r5, r1, #3
 80070a2:	f025 0503 	bic.w	r5, r5, #3
 80070a6:	3508      	adds	r5, #8
 80070a8:	2d0c      	cmp	r5, #12
 80070aa:	bf38      	it	cc
 80070ac:	250c      	movcc	r5, #12
 80070ae:	2d00      	cmp	r5, #0
 80070b0:	4606      	mov	r6, r0
 80070b2:	db01      	blt.n	80070b8 <_malloc_r+0x1c>
 80070b4:	42a9      	cmp	r1, r5
 80070b6:	d904      	bls.n	80070c2 <_malloc_r+0x26>
 80070b8:	230c      	movs	r3, #12
 80070ba:	6033      	str	r3, [r6, #0]
 80070bc:	2000      	movs	r0, #0
 80070be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007198 <_malloc_r+0xfc>
 80070c6:	f000 f869 	bl	800719c <__malloc_lock>
 80070ca:	f8d8 3000 	ldr.w	r3, [r8]
 80070ce:	461c      	mov	r4, r3
 80070d0:	bb44      	cbnz	r4, 8007124 <_malloc_r+0x88>
 80070d2:	4629      	mov	r1, r5
 80070d4:	4630      	mov	r0, r6
 80070d6:	f7ff ffbf 	bl	8007058 <sbrk_aligned>
 80070da:	1c43      	adds	r3, r0, #1
 80070dc:	4604      	mov	r4, r0
 80070de:	d158      	bne.n	8007192 <_malloc_r+0xf6>
 80070e0:	f8d8 4000 	ldr.w	r4, [r8]
 80070e4:	4627      	mov	r7, r4
 80070e6:	2f00      	cmp	r7, #0
 80070e8:	d143      	bne.n	8007172 <_malloc_r+0xd6>
 80070ea:	2c00      	cmp	r4, #0
 80070ec:	d04b      	beq.n	8007186 <_malloc_r+0xea>
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	4639      	mov	r1, r7
 80070f2:	4630      	mov	r0, r6
 80070f4:	eb04 0903 	add.w	r9, r4, r3
 80070f8:	f000 fb5c 	bl	80077b4 <_sbrk_r>
 80070fc:	4581      	cmp	r9, r0
 80070fe:	d142      	bne.n	8007186 <_malloc_r+0xea>
 8007100:	6821      	ldr	r1, [r4, #0]
 8007102:	1a6d      	subs	r5, r5, r1
 8007104:	4629      	mov	r1, r5
 8007106:	4630      	mov	r0, r6
 8007108:	f7ff ffa6 	bl	8007058 <sbrk_aligned>
 800710c:	3001      	adds	r0, #1
 800710e:	d03a      	beq.n	8007186 <_malloc_r+0xea>
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	442b      	add	r3, r5
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	f8d8 3000 	ldr.w	r3, [r8]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	bb62      	cbnz	r2, 8007178 <_malloc_r+0xdc>
 800711e:	f8c8 7000 	str.w	r7, [r8]
 8007122:	e00f      	b.n	8007144 <_malloc_r+0xa8>
 8007124:	6822      	ldr	r2, [r4, #0]
 8007126:	1b52      	subs	r2, r2, r5
 8007128:	d420      	bmi.n	800716c <_malloc_r+0xd0>
 800712a:	2a0b      	cmp	r2, #11
 800712c:	d917      	bls.n	800715e <_malloc_r+0xc2>
 800712e:	1961      	adds	r1, r4, r5
 8007130:	42a3      	cmp	r3, r4
 8007132:	6025      	str	r5, [r4, #0]
 8007134:	bf18      	it	ne
 8007136:	6059      	strne	r1, [r3, #4]
 8007138:	6863      	ldr	r3, [r4, #4]
 800713a:	bf08      	it	eq
 800713c:	f8c8 1000 	streq.w	r1, [r8]
 8007140:	5162      	str	r2, [r4, r5]
 8007142:	604b      	str	r3, [r1, #4]
 8007144:	4630      	mov	r0, r6
 8007146:	f000 f82f 	bl	80071a8 <__malloc_unlock>
 800714a:	f104 000b 	add.w	r0, r4, #11
 800714e:	1d23      	adds	r3, r4, #4
 8007150:	f020 0007 	bic.w	r0, r0, #7
 8007154:	1ac2      	subs	r2, r0, r3
 8007156:	bf1c      	itt	ne
 8007158:	1a1b      	subne	r3, r3, r0
 800715a:	50a3      	strne	r3, [r4, r2]
 800715c:	e7af      	b.n	80070be <_malloc_r+0x22>
 800715e:	6862      	ldr	r2, [r4, #4]
 8007160:	42a3      	cmp	r3, r4
 8007162:	bf0c      	ite	eq
 8007164:	f8c8 2000 	streq.w	r2, [r8]
 8007168:	605a      	strne	r2, [r3, #4]
 800716a:	e7eb      	b.n	8007144 <_malloc_r+0xa8>
 800716c:	4623      	mov	r3, r4
 800716e:	6864      	ldr	r4, [r4, #4]
 8007170:	e7ae      	b.n	80070d0 <_malloc_r+0x34>
 8007172:	463c      	mov	r4, r7
 8007174:	687f      	ldr	r7, [r7, #4]
 8007176:	e7b6      	b.n	80070e6 <_malloc_r+0x4a>
 8007178:	461a      	mov	r2, r3
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	42a3      	cmp	r3, r4
 800717e:	d1fb      	bne.n	8007178 <_malloc_r+0xdc>
 8007180:	2300      	movs	r3, #0
 8007182:	6053      	str	r3, [r2, #4]
 8007184:	e7de      	b.n	8007144 <_malloc_r+0xa8>
 8007186:	230c      	movs	r3, #12
 8007188:	6033      	str	r3, [r6, #0]
 800718a:	4630      	mov	r0, r6
 800718c:	f000 f80c 	bl	80071a8 <__malloc_unlock>
 8007190:	e794      	b.n	80070bc <_malloc_r+0x20>
 8007192:	6005      	str	r5, [r0, #0]
 8007194:	e7d6      	b.n	8007144 <_malloc_r+0xa8>
 8007196:	bf00      	nop
 8007198:	20000a1c 	.word	0x20000a1c

0800719c <__malloc_lock>:
 800719c:	4801      	ldr	r0, [pc, #4]	@ (80071a4 <__malloc_lock+0x8>)
 800719e:	f7ff bf01 	b.w	8006fa4 <__retarget_lock_acquire_recursive>
 80071a2:	bf00      	nop
 80071a4:	20000a14 	.word	0x20000a14

080071a8 <__malloc_unlock>:
 80071a8:	4801      	ldr	r0, [pc, #4]	@ (80071b0 <__malloc_unlock+0x8>)
 80071aa:	f7ff befc 	b.w	8006fa6 <__retarget_lock_release_recursive>
 80071ae:	bf00      	nop
 80071b0:	20000a14 	.word	0x20000a14

080071b4 <__ssputs_r>:
 80071b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071b8:	688e      	ldr	r6, [r1, #8]
 80071ba:	461f      	mov	r7, r3
 80071bc:	42be      	cmp	r6, r7
 80071be:	680b      	ldr	r3, [r1, #0]
 80071c0:	4682      	mov	sl, r0
 80071c2:	460c      	mov	r4, r1
 80071c4:	4690      	mov	r8, r2
 80071c6:	d82d      	bhi.n	8007224 <__ssputs_r+0x70>
 80071c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80071d0:	d026      	beq.n	8007220 <__ssputs_r+0x6c>
 80071d2:	6965      	ldr	r5, [r4, #20]
 80071d4:	6909      	ldr	r1, [r1, #16]
 80071d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071da:	eba3 0901 	sub.w	r9, r3, r1
 80071de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071e2:	1c7b      	adds	r3, r7, #1
 80071e4:	444b      	add	r3, r9
 80071e6:	106d      	asrs	r5, r5, #1
 80071e8:	429d      	cmp	r5, r3
 80071ea:	bf38      	it	cc
 80071ec:	461d      	movcc	r5, r3
 80071ee:	0553      	lsls	r3, r2, #21
 80071f0:	d527      	bpl.n	8007242 <__ssputs_r+0x8e>
 80071f2:	4629      	mov	r1, r5
 80071f4:	f7ff ff52 	bl	800709c <_malloc_r>
 80071f8:	4606      	mov	r6, r0
 80071fa:	b360      	cbz	r0, 8007256 <__ssputs_r+0xa2>
 80071fc:	6921      	ldr	r1, [r4, #16]
 80071fe:	464a      	mov	r2, r9
 8007200:	f7ff fed2 	bl	8006fa8 <memcpy>
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800720a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800720e:	81a3      	strh	r3, [r4, #12]
 8007210:	6126      	str	r6, [r4, #16]
 8007212:	6165      	str	r5, [r4, #20]
 8007214:	444e      	add	r6, r9
 8007216:	eba5 0509 	sub.w	r5, r5, r9
 800721a:	6026      	str	r6, [r4, #0]
 800721c:	60a5      	str	r5, [r4, #8]
 800721e:	463e      	mov	r6, r7
 8007220:	42be      	cmp	r6, r7
 8007222:	d900      	bls.n	8007226 <__ssputs_r+0x72>
 8007224:	463e      	mov	r6, r7
 8007226:	6820      	ldr	r0, [r4, #0]
 8007228:	4632      	mov	r2, r6
 800722a:	4641      	mov	r1, r8
 800722c:	f000 faa8 	bl	8007780 <memmove>
 8007230:	68a3      	ldr	r3, [r4, #8]
 8007232:	1b9b      	subs	r3, r3, r6
 8007234:	60a3      	str	r3, [r4, #8]
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	4433      	add	r3, r6
 800723a:	6023      	str	r3, [r4, #0]
 800723c:	2000      	movs	r0, #0
 800723e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007242:	462a      	mov	r2, r5
 8007244:	f000 fac6 	bl	80077d4 <_realloc_r>
 8007248:	4606      	mov	r6, r0
 800724a:	2800      	cmp	r0, #0
 800724c:	d1e0      	bne.n	8007210 <__ssputs_r+0x5c>
 800724e:	6921      	ldr	r1, [r4, #16]
 8007250:	4650      	mov	r0, sl
 8007252:	f7ff feb7 	bl	8006fc4 <_free_r>
 8007256:	230c      	movs	r3, #12
 8007258:	f8ca 3000 	str.w	r3, [sl]
 800725c:	89a3      	ldrh	r3, [r4, #12]
 800725e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007262:	81a3      	strh	r3, [r4, #12]
 8007264:	f04f 30ff 	mov.w	r0, #4294967295
 8007268:	e7e9      	b.n	800723e <__ssputs_r+0x8a>
	...

0800726c <_svfiprintf_r>:
 800726c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007270:	4698      	mov	r8, r3
 8007272:	898b      	ldrh	r3, [r1, #12]
 8007274:	061b      	lsls	r3, r3, #24
 8007276:	b09d      	sub	sp, #116	@ 0x74
 8007278:	4607      	mov	r7, r0
 800727a:	460d      	mov	r5, r1
 800727c:	4614      	mov	r4, r2
 800727e:	d510      	bpl.n	80072a2 <_svfiprintf_r+0x36>
 8007280:	690b      	ldr	r3, [r1, #16]
 8007282:	b973      	cbnz	r3, 80072a2 <_svfiprintf_r+0x36>
 8007284:	2140      	movs	r1, #64	@ 0x40
 8007286:	f7ff ff09 	bl	800709c <_malloc_r>
 800728a:	6028      	str	r0, [r5, #0]
 800728c:	6128      	str	r0, [r5, #16]
 800728e:	b930      	cbnz	r0, 800729e <_svfiprintf_r+0x32>
 8007290:	230c      	movs	r3, #12
 8007292:	603b      	str	r3, [r7, #0]
 8007294:	f04f 30ff 	mov.w	r0, #4294967295
 8007298:	b01d      	add	sp, #116	@ 0x74
 800729a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800729e:	2340      	movs	r3, #64	@ 0x40
 80072a0:	616b      	str	r3, [r5, #20]
 80072a2:	2300      	movs	r3, #0
 80072a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80072a6:	2320      	movs	r3, #32
 80072a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80072b0:	2330      	movs	r3, #48	@ 0x30
 80072b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007450 <_svfiprintf_r+0x1e4>
 80072b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072ba:	f04f 0901 	mov.w	r9, #1
 80072be:	4623      	mov	r3, r4
 80072c0:	469a      	mov	sl, r3
 80072c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072c6:	b10a      	cbz	r2, 80072cc <_svfiprintf_r+0x60>
 80072c8:	2a25      	cmp	r2, #37	@ 0x25
 80072ca:	d1f9      	bne.n	80072c0 <_svfiprintf_r+0x54>
 80072cc:	ebba 0b04 	subs.w	fp, sl, r4
 80072d0:	d00b      	beq.n	80072ea <_svfiprintf_r+0x7e>
 80072d2:	465b      	mov	r3, fp
 80072d4:	4622      	mov	r2, r4
 80072d6:	4629      	mov	r1, r5
 80072d8:	4638      	mov	r0, r7
 80072da:	f7ff ff6b 	bl	80071b4 <__ssputs_r>
 80072de:	3001      	adds	r0, #1
 80072e0:	f000 80a7 	beq.w	8007432 <_svfiprintf_r+0x1c6>
 80072e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072e6:	445a      	add	r2, fp
 80072e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80072ea:	f89a 3000 	ldrb.w	r3, [sl]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f000 809f 	beq.w	8007432 <_svfiprintf_r+0x1c6>
 80072f4:	2300      	movs	r3, #0
 80072f6:	f04f 32ff 	mov.w	r2, #4294967295
 80072fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072fe:	f10a 0a01 	add.w	sl, sl, #1
 8007302:	9304      	str	r3, [sp, #16]
 8007304:	9307      	str	r3, [sp, #28]
 8007306:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800730a:	931a      	str	r3, [sp, #104]	@ 0x68
 800730c:	4654      	mov	r4, sl
 800730e:	2205      	movs	r2, #5
 8007310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007314:	484e      	ldr	r0, [pc, #312]	@ (8007450 <_svfiprintf_r+0x1e4>)
 8007316:	f7f8 ff63 	bl	80001e0 <memchr>
 800731a:	9a04      	ldr	r2, [sp, #16]
 800731c:	b9d8      	cbnz	r0, 8007356 <_svfiprintf_r+0xea>
 800731e:	06d0      	lsls	r0, r2, #27
 8007320:	bf44      	itt	mi
 8007322:	2320      	movmi	r3, #32
 8007324:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007328:	0711      	lsls	r1, r2, #28
 800732a:	bf44      	itt	mi
 800732c:	232b      	movmi	r3, #43	@ 0x2b
 800732e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007332:	f89a 3000 	ldrb.w	r3, [sl]
 8007336:	2b2a      	cmp	r3, #42	@ 0x2a
 8007338:	d015      	beq.n	8007366 <_svfiprintf_r+0xfa>
 800733a:	9a07      	ldr	r2, [sp, #28]
 800733c:	4654      	mov	r4, sl
 800733e:	2000      	movs	r0, #0
 8007340:	f04f 0c0a 	mov.w	ip, #10
 8007344:	4621      	mov	r1, r4
 8007346:	f811 3b01 	ldrb.w	r3, [r1], #1
 800734a:	3b30      	subs	r3, #48	@ 0x30
 800734c:	2b09      	cmp	r3, #9
 800734e:	d94b      	bls.n	80073e8 <_svfiprintf_r+0x17c>
 8007350:	b1b0      	cbz	r0, 8007380 <_svfiprintf_r+0x114>
 8007352:	9207      	str	r2, [sp, #28]
 8007354:	e014      	b.n	8007380 <_svfiprintf_r+0x114>
 8007356:	eba0 0308 	sub.w	r3, r0, r8
 800735a:	fa09 f303 	lsl.w	r3, r9, r3
 800735e:	4313      	orrs	r3, r2
 8007360:	9304      	str	r3, [sp, #16]
 8007362:	46a2      	mov	sl, r4
 8007364:	e7d2      	b.n	800730c <_svfiprintf_r+0xa0>
 8007366:	9b03      	ldr	r3, [sp, #12]
 8007368:	1d19      	adds	r1, r3, #4
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	9103      	str	r1, [sp, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	bfbb      	ittet	lt
 8007372:	425b      	neglt	r3, r3
 8007374:	f042 0202 	orrlt.w	r2, r2, #2
 8007378:	9307      	strge	r3, [sp, #28]
 800737a:	9307      	strlt	r3, [sp, #28]
 800737c:	bfb8      	it	lt
 800737e:	9204      	strlt	r2, [sp, #16]
 8007380:	7823      	ldrb	r3, [r4, #0]
 8007382:	2b2e      	cmp	r3, #46	@ 0x2e
 8007384:	d10a      	bne.n	800739c <_svfiprintf_r+0x130>
 8007386:	7863      	ldrb	r3, [r4, #1]
 8007388:	2b2a      	cmp	r3, #42	@ 0x2a
 800738a:	d132      	bne.n	80073f2 <_svfiprintf_r+0x186>
 800738c:	9b03      	ldr	r3, [sp, #12]
 800738e:	1d1a      	adds	r2, r3, #4
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	9203      	str	r2, [sp, #12]
 8007394:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007398:	3402      	adds	r4, #2
 800739a:	9305      	str	r3, [sp, #20]
 800739c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007460 <_svfiprintf_r+0x1f4>
 80073a0:	7821      	ldrb	r1, [r4, #0]
 80073a2:	2203      	movs	r2, #3
 80073a4:	4650      	mov	r0, sl
 80073a6:	f7f8 ff1b 	bl	80001e0 <memchr>
 80073aa:	b138      	cbz	r0, 80073bc <_svfiprintf_r+0x150>
 80073ac:	9b04      	ldr	r3, [sp, #16]
 80073ae:	eba0 000a 	sub.w	r0, r0, sl
 80073b2:	2240      	movs	r2, #64	@ 0x40
 80073b4:	4082      	lsls	r2, r0
 80073b6:	4313      	orrs	r3, r2
 80073b8:	3401      	adds	r4, #1
 80073ba:	9304      	str	r3, [sp, #16]
 80073bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073c0:	4824      	ldr	r0, [pc, #144]	@ (8007454 <_svfiprintf_r+0x1e8>)
 80073c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073c6:	2206      	movs	r2, #6
 80073c8:	f7f8 ff0a 	bl	80001e0 <memchr>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d036      	beq.n	800743e <_svfiprintf_r+0x1d2>
 80073d0:	4b21      	ldr	r3, [pc, #132]	@ (8007458 <_svfiprintf_r+0x1ec>)
 80073d2:	bb1b      	cbnz	r3, 800741c <_svfiprintf_r+0x1b0>
 80073d4:	9b03      	ldr	r3, [sp, #12]
 80073d6:	3307      	adds	r3, #7
 80073d8:	f023 0307 	bic.w	r3, r3, #7
 80073dc:	3308      	adds	r3, #8
 80073de:	9303      	str	r3, [sp, #12]
 80073e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e2:	4433      	add	r3, r6
 80073e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073e6:	e76a      	b.n	80072be <_svfiprintf_r+0x52>
 80073e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80073ec:	460c      	mov	r4, r1
 80073ee:	2001      	movs	r0, #1
 80073f0:	e7a8      	b.n	8007344 <_svfiprintf_r+0xd8>
 80073f2:	2300      	movs	r3, #0
 80073f4:	3401      	adds	r4, #1
 80073f6:	9305      	str	r3, [sp, #20]
 80073f8:	4619      	mov	r1, r3
 80073fa:	f04f 0c0a 	mov.w	ip, #10
 80073fe:	4620      	mov	r0, r4
 8007400:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007404:	3a30      	subs	r2, #48	@ 0x30
 8007406:	2a09      	cmp	r2, #9
 8007408:	d903      	bls.n	8007412 <_svfiprintf_r+0x1a6>
 800740a:	2b00      	cmp	r3, #0
 800740c:	d0c6      	beq.n	800739c <_svfiprintf_r+0x130>
 800740e:	9105      	str	r1, [sp, #20]
 8007410:	e7c4      	b.n	800739c <_svfiprintf_r+0x130>
 8007412:	fb0c 2101 	mla	r1, ip, r1, r2
 8007416:	4604      	mov	r4, r0
 8007418:	2301      	movs	r3, #1
 800741a:	e7f0      	b.n	80073fe <_svfiprintf_r+0x192>
 800741c:	ab03      	add	r3, sp, #12
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	462a      	mov	r2, r5
 8007422:	4b0e      	ldr	r3, [pc, #56]	@ (800745c <_svfiprintf_r+0x1f0>)
 8007424:	a904      	add	r1, sp, #16
 8007426:	4638      	mov	r0, r7
 8007428:	f3af 8000 	nop.w
 800742c:	1c42      	adds	r2, r0, #1
 800742e:	4606      	mov	r6, r0
 8007430:	d1d6      	bne.n	80073e0 <_svfiprintf_r+0x174>
 8007432:	89ab      	ldrh	r3, [r5, #12]
 8007434:	065b      	lsls	r3, r3, #25
 8007436:	f53f af2d 	bmi.w	8007294 <_svfiprintf_r+0x28>
 800743a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800743c:	e72c      	b.n	8007298 <_svfiprintf_r+0x2c>
 800743e:	ab03      	add	r3, sp, #12
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	462a      	mov	r2, r5
 8007444:	4b05      	ldr	r3, [pc, #20]	@ (800745c <_svfiprintf_r+0x1f0>)
 8007446:	a904      	add	r1, sp, #16
 8007448:	4638      	mov	r0, r7
 800744a:	f000 f879 	bl	8007540 <_printf_i>
 800744e:	e7ed      	b.n	800742c <_svfiprintf_r+0x1c0>
 8007450:	08007a24 	.word	0x08007a24
 8007454:	08007a2e 	.word	0x08007a2e
 8007458:	00000000 	.word	0x00000000
 800745c:	080071b5 	.word	0x080071b5
 8007460:	08007a2a 	.word	0x08007a2a

08007464 <_printf_common>:
 8007464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007468:	4616      	mov	r6, r2
 800746a:	4698      	mov	r8, r3
 800746c:	688a      	ldr	r2, [r1, #8]
 800746e:	690b      	ldr	r3, [r1, #16]
 8007470:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007474:	4293      	cmp	r3, r2
 8007476:	bfb8      	it	lt
 8007478:	4613      	movlt	r3, r2
 800747a:	6033      	str	r3, [r6, #0]
 800747c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007480:	4607      	mov	r7, r0
 8007482:	460c      	mov	r4, r1
 8007484:	b10a      	cbz	r2, 800748a <_printf_common+0x26>
 8007486:	3301      	adds	r3, #1
 8007488:	6033      	str	r3, [r6, #0]
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	0699      	lsls	r1, r3, #26
 800748e:	bf42      	ittt	mi
 8007490:	6833      	ldrmi	r3, [r6, #0]
 8007492:	3302      	addmi	r3, #2
 8007494:	6033      	strmi	r3, [r6, #0]
 8007496:	6825      	ldr	r5, [r4, #0]
 8007498:	f015 0506 	ands.w	r5, r5, #6
 800749c:	d106      	bne.n	80074ac <_printf_common+0x48>
 800749e:	f104 0a19 	add.w	sl, r4, #25
 80074a2:	68e3      	ldr	r3, [r4, #12]
 80074a4:	6832      	ldr	r2, [r6, #0]
 80074a6:	1a9b      	subs	r3, r3, r2
 80074a8:	42ab      	cmp	r3, r5
 80074aa:	dc26      	bgt.n	80074fa <_printf_common+0x96>
 80074ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074b0:	6822      	ldr	r2, [r4, #0]
 80074b2:	3b00      	subs	r3, #0
 80074b4:	bf18      	it	ne
 80074b6:	2301      	movne	r3, #1
 80074b8:	0692      	lsls	r2, r2, #26
 80074ba:	d42b      	bmi.n	8007514 <_printf_common+0xb0>
 80074bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074c0:	4641      	mov	r1, r8
 80074c2:	4638      	mov	r0, r7
 80074c4:	47c8      	blx	r9
 80074c6:	3001      	adds	r0, #1
 80074c8:	d01e      	beq.n	8007508 <_printf_common+0xa4>
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	6922      	ldr	r2, [r4, #16]
 80074ce:	f003 0306 	and.w	r3, r3, #6
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	bf02      	ittt	eq
 80074d6:	68e5      	ldreq	r5, [r4, #12]
 80074d8:	6833      	ldreq	r3, [r6, #0]
 80074da:	1aed      	subeq	r5, r5, r3
 80074dc:	68a3      	ldr	r3, [r4, #8]
 80074de:	bf0c      	ite	eq
 80074e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074e4:	2500      	movne	r5, #0
 80074e6:	4293      	cmp	r3, r2
 80074e8:	bfc4      	itt	gt
 80074ea:	1a9b      	subgt	r3, r3, r2
 80074ec:	18ed      	addgt	r5, r5, r3
 80074ee:	2600      	movs	r6, #0
 80074f0:	341a      	adds	r4, #26
 80074f2:	42b5      	cmp	r5, r6
 80074f4:	d11a      	bne.n	800752c <_printf_common+0xc8>
 80074f6:	2000      	movs	r0, #0
 80074f8:	e008      	b.n	800750c <_printf_common+0xa8>
 80074fa:	2301      	movs	r3, #1
 80074fc:	4652      	mov	r2, sl
 80074fe:	4641      	mov	r1, r8
 8007500:	4638      	mov	r0, r7
 8007502:	47c8      	blx	r9
 8007504:	3001      	adds	r0, #1
 8007506:	d103      	bne.n	8007510 <_printf_common+0xac>
 8007508:	f04f 30ff 	mov.w	r0, #4294967295
 800750c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007510:	3501      	adds	r5, #1
 8007512:	e7c6      	b.n	80074a2 <_printf_common+0x3e>
 8007514:	18e1      	adds	r1, r4, r3
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	2030      	movs	r0, #48	@ 0x30
 800751a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800751e:	4422      	add	r2, r4
 8007520:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007524:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007528:	3302      	adds	r3, #2
 800752a:	e7c7      	b.n	80074bc <_printf_common+0x58>
 800752c:	2301      	movs	r3, #1
 800752e:	4622      	mov	r2, r4
 8007530:	4641      	mov	r1, r8
 8007532:	4638      	mov	r0, r7
 8007534:	47c8      	blx	r9
 8007536:	3001      	adds	r0, #1
 8007538:	d0e6      	beq.n	8007508 <_printf_common+0xa4>
 800753a:	3601      	adds	r6, #1
 800753c:	e7d9      	b.n	80074f2 <_printf_common+0x8e>
	...

08007540 <_printf_i>:
 8007540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007544:	7e0f      	ldrb	r7, [r1, #24]
 8007546:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007548:	2f78      	cmp	r7, #120	@ 0x78
 800754a:	4691      	mov	r9, r2
 800754c:	4680      	mov	r8, r0
 800754e:	460c      	mov	r4, r1
 8007550:	469a      	mov	sl, r3
 8007552:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007556:	d807      	bhi.n	8007568 <_printf_i+0x28>
 8007558:	2f62      	cmp	r7, #98	@ 0x62
 800755a:	d80a      	bhi.n	8007572 <_printf_i+0x32>
 800755c:	2f00      	cmp	r7, #0
 800755e:	f000 80d2 	beq.w	8007706 <_printf_i+0x1c6>
 8007562:	2f58      	cmp	r7, #88	@ 0x58
 8007564:	f000 80b9 	beq.w	80076da <_printf_i+0x19a>
 8007568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800756c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007570:	e03a      	b.n	80075e8 <_printf_i+0xa8>
 8007572:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007576:	2b15      	cmp	r3, #21
 8007578:	d8f6      	bhi.n	8007568 <_printf_i+0x28>
 800757a:	a101      	add	r1, pc, #4	@ (adr r1, 8007580 <_printf_i+0x40>)
 800757c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007580:	080075d9 	.word	0x080075d9
 8007584:	080075ed 	.word	0x080075ed
 8007588:	08007569 	.word	0x08007569
 800758c:	08007569 	.word	0x08007569
 8007590:	08007569 	.word	0x08007569
 8007594:	08007569 	.word	0x08007569
 8007598:	080075ed 	.word	0x080075ed
 800759c:	08007569 	.word	0x08007569
 80075a0:	08007569 	.word	0x08007569
 80075a4:	08007569 	.word	0x08007569
 80075a8:	08007569 	.word	0x08007569
 80075ac:	080076ed 	.word	0x080076ed
 80075b0:	08007617 	.word	0x08007617
 80075b4:	080076a7 	.word	0x080076a7
 80075b8:	08007569 	.word	0x08007569
 80075bc:	08007569 	.word	0x08007569
 80075c0:	0800770f 	.word	0x0800770f
 80075c4:	08007569 	.word	0x08007569
 80075c8:	08007617 	.word	0x08007617
 80075cc:	08007569 	.word	0x08007569
 80075d0:	08007569 	.word	0x08007569
 80075d4:	080076af 	.word	0x080076af
 80075d8:	6833      	ldr	r3, [r6, #0]
 80075da:	1d1a      	adds	r2, r3, #4
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6032      	str	r2, [r6, #0]
 80075e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075e8:	2301      	movs	r3, #1
 80075ea:	e09d      	b.n	8007728 <_printf_i+0x1e8>
 80075ec:	6833      	ldr	r3, [r6, #0]
 80075ee:	6820      	ldr	r0, [r4, #0]
 80075f0:	1d19      	adds	r1, r3, #4
 80075f2:	6031      	str	r1, [r6, #0]
 80075f4:	0606      	lsls	r6, r0, #24
 80075f6:	d501      	bpl.n	80075fc <_printf_i+0xbc>
 80075f8:	681d      	ldr	r5, [r3, #0]
 80075fa:	e003      	b.n	8007604 <_printf_i+0xc4>
 80075fc:	0645      	lsls	r5, r0, #25
 80075fe:	d5fb      	bpl.n	80075f8 <_printf_i+0xb8>
 8007600:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007604:	2d00      	cmp	r5, #0
 8007606:	da03      	bge.n	8007610 <_printf_i+0xd0>
 8007608:	232d      	movs	r3, #45	@ 0x2d
 800760a:	426d      	negs	r5, r5
 800760c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007610:	4859      	ldr	r0, [pc, #356]	@ (8007778 <_printf_i+0x238>)
 8007612:	230a      	movs	r3, #10
 8007614:	e011      	b.n	800763a <_printf_i+0xfa>
 8007616:	6821      	ldr	r1, [r4, #0]
 8007618:	6833      	ldr	r3, [r6, #0]
 800761a:	0608      	lsls	r0, r1, #24
 800761c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007620:	d402      	bmi.n	8007628 <_printf_i+0xe8>
 8007622:	0649      	lsls	r1, r1, #25
 8007624:	bf48      	it	mi
 8007626:	b2ad      	uxthmi	r5, r5
 8007628:	2f6f      	cmp	r7, #111	@ 0x6f
 800762a:	4853      	ldr	r0, [pc, #332]	@ (8007778 <_printf_i+0x238>)
 800762c:	6033      	str	r3, [r6, #0]
 800762e:	bf14      	ite	ne
 8007630:	230a      	movne	r3, #10
 8007632:	2308      	moveq	r3, #8
 8007634:	2100      	movs	r1, #0
 8007636:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800763a:	6866      	ldr	r6, [r4, #4]
 800763c:	60a6      	str	r6, [r4, #8]
 800763e:	2e00      	cmp	r6, #0
 8007640:	bfa2      	ittt	ge
 8007642:	6821      	ldrge	r1, [r4, #0]
 8007644:	f021 0104 	bicge.w	r1, r1, #4
 8007648:	6021      	strge	r1, [r4, #0]
 800764a:	b90d      	cbnz	r5, 8007650 <_printf_i+0x110>
 800764c:	2e00      	cmp	r6, #0
 800764e:	d04b      	beq.n	80076e8 <_printf_i+0x1a8>
 8007650:	4616      	mov	r6, r2
 8007652:	fbb5 f1f3 	udiv	r1, r5, r3
 8007656:	fb03 5711 	mls	r7, r3, r1, r5
 800765a:	5dc7      	ldrb	r7, [r0, r7]
 800765c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007660:	462f      	mov	r7, r5
 8007662:	42bb      	cmp	r3, r7
 8007664:	460d      	mov	r5, r1
 8007666:	d9f4      	bls.n	8007652 <_printf_i+0x112>
 8007668:	2b08      	cmp	r3, #8
 800766a:	d10b      	bne.n	8007684 <_printf_i+0x144>
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	07df      	lsls	r7, r3, #31
 8007670:	d508      	bpl.n	8007684 <_printf_i+0x144>
 8007672:	6923      	ldr	r3, [r4, #16]
 8007674:	6861      	ldr	r1, [r4, #4]
 8007676:	4299      	cmp	r1, r3
 8007678:	bfde      	ittt	le
 800767a:	2330      	movle	r3, #48	@ 0x30
 800767c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007680:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007684:	1b92      	subs	r2, r2, r6
 8007686:	6122      	str	r2, [r4, #16]
 8007688:	f8cd a000 	str.w	sl, [sp]
 800768c:	464b      	mov	r3, r9
 800768e:	aa03      	add	r2, sp, #12
 8007690:	4621      	mov	r1, r4
 8007692:	4640      	mov	r0, r8
 8007694:	f7ff fee6 	bl	8007464 <_printf_common>
 8007698:	3001      	adds	r0, #1
 800769a:	d14a      	bne.n	8007732 <_printf_i+0x1f2>
 800769c:	f04f 30ff 	mov.w	r0, #4294967295
 80076a0:	b004      	add	sp, #16
 80076a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	f043 0320 	orr.w	r3, r3, #32
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	4833      	ldr	r0, [pc, #204]	@ (800777c <_printf_i+0x23c>)
 80076b0:	2778      	movs	r7, #120	@ 0x78
 80076b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	6831      	ldr	r1, [r6, #0]
 80076ba:	061f      	lsls	r7, r3, #24
 80076bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80076c0:	d402      	bmi.n	80076c8 <_printf_i+0x188>
 80076c2:	065f      	lsls	r7, r3, #25
 80076c4:	bf48      	it	mi
 80076c6:	b2ad      	uxthmi	r5, r5
 80076c8:	6031      	str	r1, [r6, #0]
 80076ca:	07d9      	lsls	r1, r3, #31
 80076cc:	bf44      	itt	mi
 80076ce:	f043 0320 	orrmi.w	r3, r3, #32
 80076d2:	6023      	strmi	r3, [r4, #0]
 80076d4:	b11d      	cbz	r5, 80076de <_printf_i+0x19e>
 80076d6:	2310      	movs	r3, #16
 80076d8:	e7ac      	b.n	8007634 <_printf_i+0xf4>
 80076da:	4827      	ldr	r0, [pc, #156]	@ (8007778 <_printf_i+0x238>)
 80076dc:	e7e9      	b.n	80076b2 <_printf_i+0x172>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	f023 0320 	bic.w	r3, r3, #32
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	e7f6      	b.n	80076d6 <_printf_i+0x196>
 80076e8:	4616      	mov	r6, r2
 80076ea:	e7bd      	b.n	8007668 <_printf_i+0x128>
 80076ec:	6833      	ldr	r3, [r6, #0]
 80076ee:	6825      	ldr	r5, [r4, #0]
 80076f0:	6961      	ldr	r1, [r4, #20]
 80076f2:	1d18      	adds	r0, r3, #4
 80076f4:	6030      	str	r0, [r6, #0]
 80076f6:	062e      	lsls	r6, r5, #24
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	d501      	bpl.n	8007700 <_printf_i+0x1c0>
 80076fc:	6019      	str	r1, [r3, #0]
 80076fe:	e002      	b.n	8007706 <_printf_i+0x1c6>
 8007700:	0668      	lsls	r0, r5, #25
 8007702:	d5fb      	bpl.n	80076fc <_printf_i+0x1bc>
 8007704:	8019      	strh	r1, [r3, #0]
 8007706:	2300      	movs	r3, #0
 8007708:	6123      	str	r3, [r4, #16]
 800770a:	4616      	mov	r6, r2
 800770c:	e7bc      	b.n	8007688 <_printf_i+0x148>
 800770e:	6833      	ldr	r3, [r6, #0]
 8007710:	1d1a      	adds	r2, r3, #4
 8007712:	6032      	str	r2, [r6, #0]
 8007714:	681e      	ldr	r6, [r3, #0]
 8007716:	6862      	ldr	r2, [r4, #4]
 8007718:	2100      	movs	r1, #0
 800771a:	4630      	mov	r0, r6
 800771c:	f7f8 fd60 	bl	80001e0 <memchr>
 8007720:	b108      	cbz	r0, 8007726 <_printf_i+0x1e6>
 8007722:	1b80      	subs	r0, r0, r6
 8007724:	6060      	str	r0, [r4, #4]
 8007726:	6863      	ldr	r3, [r4, #4]
 8007728:	6123      	str	r3, [r4, #16]
 800772a:	2300      	movs	r3, #0
 800772c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007730:	e7aa      	b.n	8007688 <_printf_i+0x148>
 8007732:	6923      	ldr	r3, [r4, #16]
 8007734:	4632      	mov	r2, r6
 8007736:	4649      	mov	r1, r9
 8007738:	4640      	mov	r0, r8
 800773a:	47d0      	blx	sl
 800773c:	3001      	adds	r0, #1
 800773e:	d0ad      	beq.n	800769c <_printf_i+0x15c>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	079b      	lsls	r3, r3, #30
 8007744:	d413      	bmi.n	800776e <_printf_i+0x22e>
 8007746:	68e0      	ldr	r0, [r4, #12]
 8007748:	9b03      	ldr	r3, [sp, #12]
 800774a:	4298      	cmp	r0, r3
 800774c:	bfb8      	it	lt
 800774e:	4618      	movlt	r0, r3
 8007750:	e7a6      	b.n	80076a0 <_printf_i+0x160>
 8007752:	2301      	movs	r3, #1
 8007754:	4632      	mov	r2, r6
 8007756:	4649      	mov	r1, r9
 8007758:	4640      	mov	r0, r8
 800775a:	47d0      	blx	sl
 800775c:	3001      	adds	r0, #1
 800775e:	d09d      	beq.n	800769c <_printf_i+0x15c>
 8007760:	3501      	adds	r5, #1
 8007762:	68e3      	ldr	r3, [r4, #12]
 8007764:	9903      	ldr	r1, [sp, #12]
 8007766:	1a5b      	subs	r3, r3, r1
 8007768:	42ab      	cmp	r3, r5
 800776a:	dcf2      	bgt.n	8007752 <_printf_i+0x212>
 800776c:	e7eb      	b.n	8007746 <_printf_i+0x206>
 800776e:	2500      	movs	r5, #0
 8007770:	f104 0619 	add.w	r6, r4, #25
 8007774:	e7f5      	b.n	8007762 <_printf_i+0x222>
 8007776:	bf00      	nop
 8007778:	08007a35 	.word	0x08007a35
 800777c:	08007a46 	.word	0x08007a46

08007780 <memmove>:
 8007780:	4288      	cmp	r0, r1
 8007782:	b510      	push	{r4, lr}
 8007784:	eb01 0402 	add.w	r4, r1, r2
 8007788:	d902      	bls.n	8007790 <memmove+0x10>
 800778a:	4284      	cmp	r4, r0
 800778c:	4623      	mov	r3, r4
 800778e:	d807      	bhi.n	80077a0 <memmove+0x20>
 8007790:	1e43      	subs	r3, r0, #1
 8007792:	42a1      	cmp	r1, r4
 8007794:	d008      	beq.n	80077a8 <memmove+0x28>
 8007796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800779a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800779e:	e7f8      	b.n	8007792 <memmove+0x12>
 80077a0:	4402      	add	r2, r0
 80077a2:	4601      	mov	r1, r0
 80077a4:	428a      	cmp	r2, r1
 80077a6:	d100      	bne.n	80077aa <memmove+0x2a>
 80077a8:	bd10      	pop	{r4, pc}
 80077aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077b2:	e7f7      	b.n	80077a4 <memmove+0x24>

080077b4 <_sbrk_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	4d06      	ldr	r5, [pc, #24]	@ (80077d0 <_sbrk_r+0x1c>)
 80077b8:	2300      	movs	r3, #0
 80077ba:	4604      	mov	r4, r0
 80077bc:	4608      	mov	r0, r1
 80077be:	602b      	str	r3, [r5, #0]
 80077c0:	f7fa fb46 	bl	8001e50 <_sbrk>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d102      	bne.n	80077ce <_sbrk_r+0x1a>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	b103      	cbz	r3, 80077ce <_sbrk_r+0x1a>
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	20000a10 	.word	0x20000a10

080077d4 <_realloc_r>:
 80077d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077d8:	4680      	mov	r8, r0
 80077da:	4615      	mov	r5, r2
 80077dc:	460c      	mov	r4, r1
 80077de:	b921      	cbnz	r1, 80077ea <_realloc_r+0x16>
 80077e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077e4:	4611      	mov	r1, r2
 80077e6:	f7ff bc59 	b.w	800709c <_malloc_r>
 80077ea:	b92a      	cbnz	r2, 80077f8 <_realloc_r+0x24>
 80077ec:	f7ff fbea 	bl	8006fc4 <_free_r>
 80077f0:	2400      	movs	r4, #0
 80077f2:	4620      	mov	r0, r4
 80077f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077f8:	f000 f81a 	bl	8007830 <_malloc_usable_size_r>
 80077fc:	4285      	cmp	r5, r0
 80077fe:	4606      	mov	r6, r0
 8007800:	d802      	bhi.n	8007808 <_realloc_r+0x34>
 8007802:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007806:	d8f4      	bhi.n	80077f2 <_realloc_r+0x1e>
 8007808:	4629      	mov	r1, r5
 800780a:	4640      	mov	r0, r8
 800780c:	f7ff fc46 	bl	800709c <_malloc_r>
 8007810:	4607      	mov	r7, r0
 8007812:	2800      	cmp	r0, #0
 8007814:	d0ec      	beq.n	80077f0 <_realloc_r+0x1c>
 8007816:	42b5      	cmp	r5, r6
 8007818:	462a      	mov	r2, r5
 800781a:	4621      	mov	r1, r4
 800781c:	bf28      	it	cs
 800781e:	4632      	movcs	r2, r6
 8007820:	f7ff fbc2 	bl	8006fa8 <memcpy>
 8007824:	4621      	mov	r1, r4
 8007826:	4640      	mov	r0, r8
 8007828:	f7ff fbcc 	bl	8006fc4 <_free_r>
 800782c:	463c      	mov	r4, r7
 800782e:	e7e0      	b.n	80077f2 <_realloc_r+0x1e>

08007830 <_malloc_usable_size_r>:
 8007830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007834:	1f18      	subs	r0, r3, #4
 8007836:	2b00      	cmp	r3, #0
 8007838:	bfbc      	itt	lt
 800783a:	580b      	ldrlt	r3, [r1, r0]
 800783c:	18c0      	addlt	r0, r0, r3
 800783e:	4770      	bx	lr

08007840 <fmax>:
 8007840:	b508      	push	{r3, lr}
 8007842:	ed2d 8b04 	vpush	{d8-d9}
 8007846:	eeb0 8a40 	vmov.f32	s16, s0
 800784a:	eef0 8a60 	vmov.f32	s17, s1
 800784e:	eeb0 9a41 	vmov.f32	s18, s2
 8007852:	eef0 9a61 	vmov.f32	s19, s3
 8007856:	f000 f81d 	bl	8007894 <__fpclassifyd>
 800785a:	b950      	cbnz	r0, 8007872 <fmax+0x32>
 800785c:	eeb0 8a49 	vmov.f32	s16, s18
 8007860:	eef0 8a69 	vmov.f32	s17, s19
 8007864:	eeb0 0a48 	vmov.f32	s0, s16
 8007868:	eef0 0a68 	vmov.f32	s1, s17
 800786c:	ecbd 8b04 	vpop	{d8-d9}
 8007870:	bd08      	pop	{r3, pc}
 8007872:	eeb0 0a49 	vmov.f32	s0, s18
 8007876:	eef0 0a69 	vmov.f32	s1, s19
 800787a:	f000 f80b 	bl	8007894 <__fpclassifyd>
 800787e:	2800      	cmp	r0, #0
 8007880:	d0f0      	beq.n	8007864 <fmax+0x24>
 8007882:	ec53 2b19 	vmov	r2, r3, d9
 8007886:	ec51 0b18 	vmov	r0, r1, d8
 800788a:	f7f9 f85d 	bl	8000948 <__aeabi_dcmpgt>
 800788e:	2800      	cmp	r0, #0
 8007890:	d0e4      	beq.n	800785c <fmax+0x1c>
 8007892:	e7e7      	b.n	8007864 <fmax+0x24>

08007894 <__fpclassifyd>:
 8007894:	ec51 0b10 	vmov	r0, r1, d0
 8007898:	b510      	push	{r4, lr}
 800789a:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800789e:	460b      	mov	r3, r1
 80078a0:	d019      	beq.n	80078d6 <__fpclassifyd+0x42>
 80078a2:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 80078a6:	490e      	ldr	r1, [pc, #56]	@ (80078e0 <__fpclassifyd+0x4c>)
 80078a8:	428a      	cmp	r2, r1
 80078aa:	d90e      	bls.n	80078ca <__fpclassifyd+0x36>
 80078ac:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 80078b0:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 80078b4:	428a      	cmp	r2, r1
 80078b6:	d908      	bls.n	80078ca <__fpclassifyd+0x36>
 80078b8:	4a0a      	ldr	r2, [pc, #40]	@ (80078e4 <__fpclassifyd+0x50>)
 80078ba:	4213      	tst	r3, r2
 80078bc:	d007      	beq.n	80078ce <__fpclassifyd+0x3a>
 80078be:	4294      	cmp	r4, r2
 80078c0:	d107      	bne.n	80078d2 <__fpclassifyd+0x3e>
 80078c2:	fab0 f080 	clz	r0, r0
 80078c6:	0940      	lsrs	r0, r0, #5
 80078c8:	bd10      	pop	{r4, pc}
 80078ca:	2004      	movs	r0, #4
 80078cc:	e7fc      	b.n	80078c8 <__fpclassifyd+0x34>
 80078ce:	2003      	movs	r0, #3
 80078d0:	e7fa      	b.n	80078c8 <__fpclassifyd+0x34>
 80078d2:	2000      	movs	r0, #0
 80078d4:	e7f8      	b.n	80078c8 <__fpclassifyd+0x34>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d1ee      	bne.n	80078b8 <__fpclassifyd+0x24>
 80078da:	2002      	movs	r0, #2
 80078dc:	e7f4      	b.n	80078c8 <__fpclassifyd+0x34>
 80078de:	bf00      	nop
 80078e0:	7fdfffff 	.word	0x7fdfffff
 80078e4:	7ff00000 	.word	0x7ff00000

080078e8 <fminf>:
 80078e8:	b508      	push	{r3, lr}
 80078ea:	ed2d 8b02 	vpush	{d8}
 80078ee:	eeb0 8a40 	vmov.f32	s16, s0
 80078f2:	eef0 8a60 	vmov.f32	s17, s1
 80078f6:	f000 f815 	bl	8007924 <__fpclassifyf>
 80078fa:	b930      	cbnz	r0, 800790a <fminf+0x22>
 80078fc:	eeb0 8a68 	vmov.f32	s16, s17
 8007900:	eeb0 0a48 	vmov.f32	s0, s16
 8007904:	ecbd 8b02 	vpop	{d8}
 8007908:	bd08      	pop	{r3, pc}
 800790a:	eeb0 0a68 	vmov.f32	s0, s17
 800790e:	f000 f809 	bl	8007924 <__fpclassifyf>
 8007912:	2800      	cmp	r0, #0
 8007914:	d0f4      	beq.n	8007900 <fminf+0x18>
 8007916:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800791a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800791e:	d5ed      	bpl.n	80078fc <fminf+0x14>
 8007920:	e7ee      	b.n	8007900 <fminf+0x18>
	...

08007924 <__fpclassifyf>:
 8007924:	ee10 3a10 	vmov	r3, s0
 8007928:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800792c:	d00d      	beq.n	800794a <__fpclassifyf+0x26>
 800792e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8007932:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8007936:	d30a      	bcc.n	800794e <__fpclassifyf+0x2a>
 8007938:	4b07      	ldr	r3, [pc, #28]	@ (8007958 <__fpclassifyf+0x34>)
 800793a:	1e42      	subs	r2, r0, #1
 800793c:	429a      	cmp	r2, r3
 800793e:	d908      	bls.n	8007952 <__fpclassifyf+0x2e>
 8007940:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8007944:	4258      	negs	r0, r3
 8007946:	4158      	adcs	r0, r3
 8007948:	4770      	bx	lr
 800794a:	2002      	movs	r0, #2
 800794c:	4770      	bx	lr
 800794e:	2004      	movs	r0, #4
 8007950:	4770      	bx	lr
 8007952:	2003      	movs	r0, #3
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	007ffffe 	.word	0x007ffffe

0800795c <_init>:
 800795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795e:	bf00      	nop
 8007960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007962:	bc08      	pop	{r3}
 8007964:	469e      	mov	lr, r3
 8007966:	4770      	bx	lr

08007968 <_fini>:
 8007968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796a:	bf00      	nop
 800796c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800796e:	bc08      	pop	{r3}
 8007970:	469e      	mov	lr, r3
 8007972:	4770      	bx	lr
